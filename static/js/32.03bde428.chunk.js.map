{"version":3,"file":"static/js/32.03bde428.chunk.js","mappings":"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","sources":["pages/Home.styled.js","components/ui/Section/Section.styled.js","components/ui/Section/Section.jsx","components/colorPicker/colorPicker.styled.js","components/listColorsMenu/listColorsMenu.styled.js","util/colorPalette.js","components/listColorsMenu/listColorsMenu.jsx","components/Converter/ConverterColor.styled.js","components/colorsInputPicker/colorsInputPicker.styled.js","components/colorsInputPicker/colorsInputPicker.jsx","util/getColor.js","components/Converter/ConverterColor.jsx","util/ActivElement/activInputNameOrHEX.js","util/ActivElement/ActivSetInputNameOrHEX.js","util/ActivElement/activColorInput.js","util/ActivElement/nameActivMenu.js","util/ActivElement/activColorInputValue.js","util/ActivElement/activFlowerSystemt.js","util/ActivElement/actinInput.js","util/ActivElement/activInputSecond.js","util/ActivElement/activInputThird.js","util/ActivElement/activInputFourth.js","util/ActivElement/activSetInputs.js","util/ActivElement/activSetInputsSecond.js","util/ActivElement/activSetInputsThird.js","util/ActivElement/activSetInputsFourth.js","util/saturationToInput.js","util/ColumnConvert.js","components/colorReference/ColorReference.styled.js","components/colorModelDescription/ColorModel.styled.js","components/colorModelDescription/RGB.jsx","components/colorModelDescription/RGBA.jsx","components/colorModelDescription/HEX.jsx","components/colorModelDescription/CMYK.jsx","components/colorModelDescription/Name.jsx","components/colorModelDescription/HSL.jsx","components/colorModelDescription/HSLA.jsx","components/colorModelDescription/HSIA.jsx","components/colorModelDescription/HLSA.jsx","components/colorModelDescription/HSI.jsx","components/colorModelDescription/HLS.jsx","components/colorModelDescription/HSV.jsx","components/colorModelDescription/HSB.jsx","components/colorModelDescription/Safe.jsx","components/colorModelDescription/CMY.jsx","components/colorModelDescription/XYZ.jsx","components/colorModelDescription/Yxy.jsx","components/colorModelDescription/Lab.jsx","components/colorModelDescription/LCH.jsx","components/colorModelDescription/HunterLab.jsx","components/colorReference/ColorReference.jsx","util/ActivElement/activColorModel.js","components/colorPicker/colorPicker.jsx","components/main/Main.styled.js","components/DescriptionText/DescriptionText.styled.js","components/DescriptionText/DescriptionText.jsx","components/main/Main.jsx","pages/Home.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wraper = styled.div`\n  width-max:1440px;\n  height-max: 100%;\n  padding-left: 147px;\n    padding-right: 147px;\nbackground-color: #424343;\n@media (max-width: 1050px) {\n    padding-left: 50px;\n    padding-right: 50px;\n  }\n  @media (max-width: 768px) {\n    padding-left: 25px;\n    padding-right: 25px;\n  }\n  @media (max-width: 500px) {\n    padding-left: 5px;\n    padding-right: 5px;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Sections = styled.section`\n padding: 30px 0px;\n`;\n","import { Sections } from './Section.styled';\n\nexport const Section = ({ children }) => {\n  return <Sections>{children}</Sections>;\n};\n","import styled from 'styled-components';\n\n\nexport const WrapperColorPickerSection = styled.div`\nmax-width: 960px;\nbackground-color: #333333;\npadding-bottom: 53px;\npadding-left:87px;\npadding-right:110px;\npadding-top: 38px;\n@media (max-width: 500px) {\n   padding:28px 20px 47px 24px;\n  }\n`\n\n\nexport const WrapperColorPicker = styled.div`\ndisplay:flex;\npadding-bottom:55px;\n`\n\nexport const WrapperHue = styled.div`\nmargin-left:77px;\n`\nexport const ColorDisplay = styled.div`\nmin-width:103px;\nwidth:225px;\nheight:225px;\n\n`\nexport const WrappeSaturation = styled.div`\nmax-width:100%;\nmargin-left:12px;\n`\n","import styled from \"styled-components\";\n\nexport const ListNameColor = styled.ul`\nposition: absolute;\npadding-top:21px;\npadding-left:30px;\npadding-right:61px;\n\ndisplay:flex;\nflex-direction: column;\nflex-wrap: wrap;\nheight: 225px;\nwidth: 435px;\n&:not(:last-child) {\n    gap-right:46px;;\n  }\n\n`\n\nexport const ItemtColorMenu = styled.li`\nposition: relative;\nwidth : auto;\nheight:35px;\nlist-style-type: none;\nfont-family: 'Roboto';\nfont-style: normal;\nfont-weight: 300;\nfont-size: 16px;\nline-height: 35px;\n`","const colorPalette = [\n    'RGB',\n    'RGBA',\n    'HEX',\n    'CMYK',\n    'Name',\n    'HSL',\n    'HSLA',\n    'HSIA',\n    'HLSA',\n    'HSI',\n    'HLS',\n    'HSV',\n    'HSB',\n    'Safe',\n    'CMY',\n    'XYZ',\n    'Yxy',\n    'Lab',\n    'LCH',\n    'HunterLab',\n    'Luv'\n];\n\nexport default colorPalette\n    ;","import { ItemtColorMenu, ListNameColor } from './listColorsMenu.styled';\nimport colorPalette from '../../util/colorPalette';\n// import { useEffect, useState } from 'react';\n\nconst ListColorMenu = ({ target }) => {\n  return (\n    <ListNameColor>\n      {colorPalette.map(palette => (\n        <ItemtColorMenu key={palette} onClick={target}>\n          {palette}\n        </ItemtColorMenu>\n      ))}\n    </ListNameColor>\n  );\n};\n\nexport default ListColorMenu;\n","import styled from \"styled-components\";\n\nexport const WrraperConverter = styled.div`\ndisplay: flex;\n@media (max-width: 500px) {\n   display: block;\n  }\n`\n\nexport const WrraperListColum = styled.div`\nheight: 245px;\nwidth: 435px;\nmax-width:100%;\nbackground-color: #D9D9D9;\nposition: absolute;\nz-index: 2\n`\n\nexport const BtnPicker = styled.button`\nbackground-color: ${(props) => props.backgroundColor};\ncolor: ${(props) => props.color};\nwidth: 100px;\nmax-width:100%;\nheight: 40px;\nborder-top-left-radius:10px;\nborder-top-right-radius:10px;\n&:not(:first-child) {\n    margin-left:10px;\n    width: 90px;\n    @media (max-width: 500px) {\n    width: 70px;\n    height: 35px;\n    margin-left:5px;}\n  }\n  @media (max-width: 500px) {\n    width: 70px;\n    height: 35px;}\n    `\n\nexport const Btn = styled.button`\nbackground-color:#D9D9D9;\nwidth: 27px;\nheight: 40px;\npadding: 0;\nborder-top-left-radius:5px;\nborder-top-right-radius:5px;\nmargin-left:10px;\n`\nexport const BtnCopy = styled.button`\nposition: absolute;\nmargin-left:10px;\ncursor: pointer;\nborder: none;\ncolor: #fff;\nbackground-color: #333333;\n`\n\nexport const InputColor = styled.input`\ndisplay:block;\nwidth: 390px;\nmax-width:100%;\nheight: 45px;\n  `\n\nexport const WrraperArrows = styled.div`\nmargin-left:5px;\ndisplay:flex;\njustify-content: center;\nalign-items: center;\nwidth: 27px;\nheight: 40px;\ncolor: #fff;\n@media (max-width: 500px) {\n  margin-left:auto;\n  margin-right:auto;\n  }\n`\n\nexport const WrraperInput = styled.div`\nmax-width:100%;\ndisplay: flex;\n`\n\nexport const WrraperRightsBtnGroup = styled.div`\nmax-width:100%;\nmargin-left:20px;\n@media (max-width: 500px) {\n  margin-left:0;}`\n\nexport const WrraperCopy = styled.div`\nmargin-left:10px;\n  display:flex;\n  justify-content:center;\n  align-items:center;\nposition:relative;`","import styled from \"styled-components\";\n\nexport const WrapperInput = styled.div`\nmax-width:100%;\ndisplay: flex `\n\nexport const WrapperNameColor = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #D9D9D9;\n  width:25px;\n  max-width:100%;\n  height:45px;\n  border:2px;\n  padding-top: 5px;\n  &:not(:first-child) {\n    margin-left:10px;\n    @media (max-width: 500px) {\n      margin-left:5px;\n  }\n  };\n`\n\nexport const Input = styled.input`\nwidth:55px;\nmax-width:100%;\nheight:45px;\n`\n\nexport const LastInput = styled.input`\nmargin-left:10px;\nwidth:36px;\nmax-width:100%;\nheight:45px;\n`\n\nexport const InputHexOrName = styled.input`\nwidth:380px;\nmax-width:100%;\nheight:45px;`\n\nexport const Tekst = styled.p`\ncolor:#2B2B2B;\n`\n\nexport const WrapperColorPicker = styled.div`\nmax-width:100%;\n `","import { useEffect, useState } from 'react';\nimport {\n  Input,\n  InputHexOrName,\n  LastInput,\n  Tekst,\n  WrapperColorPicker,\n  WrapperInput,\n  WrapperNameColor,\n} from './colorsInputPicker.styled';\n\nexport const ColorsInputPicker = ({\n  activFlower,\n  activSetNameOrHEX,\n  activNameOrHEX,\n  setInput,\n  setInputSecond,\n  setInputThird,\n  setInputFourth,\n  input,\n  inputSecond,\n  inputThird,\n  inputFourth,\n}) => {\n  const [nameOrHex, setNameOrHex] = useState(false);\n  const namePallete = activFlower.split('');\n\n  useEffect(() => {\n    if (activFlower === 'HEX' || activFlower === 'Name') {\n      setNameOrHex(true);\n    } else {\n      setNameOrHex(false);\n    }\n  }, [activFlower]);\n\n  return (\n    <WrapperColorPicker>\n      {nameOrHex ? (\n        <WrapperInput>\n          <WrapperNameColor>\n            <Tekst>#</Tekst>\n          </WrapperNameColor>\n          <InputHexOrName\n            onChange={event => activSetNameOrHEX(event.target.value)}\n            value={activNameOrHEX}\n          />\n        </WrapperInput>\n      ) : (\n        <WrapperInput>\n          <WrapperNameColor>\n            <Tekst>{namePallete[0] || ''}</Tekst>\n          </WrapperNameColor>\n          <Input\n            onChange={event =>\n              setInput(event.target.value.replace(/[^0-9 .]/g, ''))\n            }\n            value={input}\n          />\n          <WrapperNameColor>\n            <Tekst>{namePallete[1] || ''}</Tekst>\n          </WrapperNameColor>\n          <Input\n            onChange={event =>\n              setInputSecond(event.target.value.replace(/[^0-9 .]/g, ''))\n            }\n            value={inputSecond}\n          />\n          <WrapperNameColor>\n            <Tekst>{namePallete[2] || ''}</Tekst>\n          </WrapperNameColor>\n          <Input\n            onChange={event =>\n              setInputThird(event.target.value.replace(/[^0-9 .]/g, ''))\n            }\n            value={inputThird}\n          />\n          {namePallete[3] ? (\n            <>\n              <WrapperNameColor>\n                <Tekst>{namePallete[3] || ''}</Tekst>\n              </WrapperNameColor>\n              <Input\n                onChange={event =>\n                  setInputFourth(event.target.value.replace(/[^0-9 .]/g, ''))\n                }\n                value={inputFourth}\n              />\n            </>\n          ) : null}\n          <LastInput readOnly value=\"100%\" />\n        </WrapperInput>\n      )}\n    </WrapperColorPicker>\n  );\n};\n","export function getColor(color, options) {\n    let result = {};\n    switch (options) {\n        case 'RGB':\n            result = color.getRGB()\n            break;\n        case 'RGBA':\n            result = color.getRGBA()\n            break;\n        case 'HEX':\n            result = color.getHEX()\n            break;\n        case 'CMYK':\n            result = color.getCMYK()\n            break;\n        case 'Name':\n            result = color.getName()\n            break;\n        case 'HSL':\n            result = color.getHSL()\n            break;\n        case 'HSLA':\n            result = color.getHSLA()\n            break;\n        case 'HSIA':\n            result = color.getHSIA()\n            break;\n        case 'HLSA':\n            result = color.getHLSA()\n            break;\n        case 'HSI':\n            result = color.getHSI()\n            break;\n        case 'HLS':\n            result = color.getHLS()\n            break;\n        case 'HSV':\n            result = color.getHSV()\n            break;\n        case 'HSB':\n            result = color.getHSB()\n            break;\n        case 'Safe':\n            result = color.getSafe()\n            break;\n        case 'CMY':\n            result = color.getCMY()\n            break;\n        case 'XYZ':\n            result = color.getXYZ()\n            break;\n        case 'Yxy':\n            result = color.getYxy()\n            break;\n        case 'Lab':\n            result = color.getLab()\n            break;\n        case 'LCH':\n            result = color.getLCH()\n            break;\n        case 'HunterLab':\n            result = color.getHunterLab()\n            break;\n        case 'Luv':\n            result = color.getLuv()\n            break;\n        default:\n            result = '';\n    }\n    return result\n}","/* eslint-disable react-hooks/exhaustive-deps */\nimport ListColorMenu from 'components/listColorsMenu/listColorsMenu';\nimport { useState, useEffect } from 'react';\nimport {\n  Btn,\n  BtnPicker,\n  InputColor,\n  WrraperInput,\n  WrraperListColum,\n  WrraperConverter,\n  WrraperRightsBtnGroup,\n  BtnCopy,\n  WrraperArrows,\n  WrraperCopy,\n} from './ConverterColor.styled';\nimport { ColorsInputPicker } from '../colorsInputPicker/colorsInputPicker';\nimport { columnConvert } from 'util/ColumnConvert';\nimport { nameActivMenu } from 'util/ActivElement/nameActivMenu';\nimport { activColorInputValue } from 'util/ActivElement/activColorInputValue';\nimport { activFlowerSystemt } from 'util/ActivElement/activFlowerSystemt';\nimport { saturationToInput } from 'util/saturationToInput';\nimport { activColorInput } from 'util/ActivElement/activColorInput';\nimport { activInputs } from 'util/ActivElement/actinInput';\nimport { activInputsSecond } from 'util/ActivElement/activInputSecond';\nimport { activInputsThird } from 'util/ActivElement/activInputThird';\nimport { activInputsFourth } from 'util/ActivElement/activInputFourth';\nimport { activSetInputs } from 'util/ActivElement/activSetInputs';\nimport { activSetInputsSecond } from 'util/ActivElement/activSetInputsSecond';\nimport { activSetInputsThird } from 'util/ActivElement/activSetInputsThird';\nimport { activSetInputsFourth } from 'util/ActivElement/activSetInputsFourth';\nimport { ActivInputNameOrHEX } from 'util/ActivElement/activInputNameOrHEX';\nimport { activSetInputNameOrHEX } from 'util/ActivElement/ActivSetInputNameOrHEX';\n\nconst ConverterColor = ({ color, bgColor, saturation }) => {\n  //////input set\n  const [colorInput, setColorInput] = useState('');\n  const [colorInputSecond, setColorInputSecond] = useState('');\n  const [colorInputThird, setColorInputThird] = useState('');\n  const [colorInputFourth, setColorInputFourth] = useState('');\n  const [rightsInput, setRightsInput] = useState('');\n\n  //////////////input state in colorsInputPicker\n  //Neme or HEX\n  const [inputNameOrHEX, setInputNameOrHEX] = useState('');\n  const [inputNameOrHEXSecond, setInputNameOrHEXSecond] = useState('');\n  const [inputNameOrHEXThird, setInputNameOrHEXThird] = useState('');\n  const [inputNameOrHEXFourth, setInputNameOrHEXFourth] = useState('');\n  //1\n  const [input, setInput] = useState('');\n  const [inputSecond, setInputSecond] = useState('');\n  const [inputThird, setInputThird] = useState('');\n  const [inputFourth, setInputFourth] = useState('');\n  //2\n  const [input2, setInput2] = useState('');\n  const [inputSecond2, setInputSecond2] = useState('');\n  const [inputThird2, setInputThird2] = useState('');\n  const [inputFourth2, setInputFourth2] = useState('');\n  //3\n  const [input3, setInput3] = useState('');\n  const [inputSecond3, setInputSecond3] = useState('');\n  const [inputThird3, setInputThird3] = useState('');\n  const [inputFourth3, setInputFourth3] = useState('');\n  //4\n  const [input4, setInput4] = useState('');\n  const [inputSecond4, setInputSecond4] = useState('');\n  const [inputThird4, setInputThird4] = useState('');\n  const [inputFourth4, setInputFourth4] = useState('');\n\n  ///////activ set\n  const [isVisible, setIsVisible] = useState(false);\n  const [isVisibleRights, setIsVisibleRights] = useState(false);\n  const [activMenu, setActivMenu] = useState('flowerSystem');\n  const [rightsActivMenu, setRightsActivMenu] = useState('rightsFlowerSystem');\n\n  //////color menu set\n  const [flowerSystem, setFlowerSystem] = useState('RGB');\n  const [flowerSystemSecond, setFlowerSystemSecond] = useState('HLS');\n  const [flowerSystemThird, setFlowerSystemThird] = useState('CMYK');\n  const [flowerSystemFourth, setFlowerSystemFourth] = useState('HSL');\n  const [rightsFlowerSystem, setRightsFlowerSystem] = useState('RGB');\n  const [rightsFlowerSystemSecond, setRightsFlowerSystemSecond] =\n    useState('HLS');\n  const [rightsFlowerSystemThird, setRightsFlowerSystemThird] =\n    useState('CMYK');\n  const [rightsFlowerSystemFourth, setRightsFlowerSystemFourth] =\n    useState('HSL');\n\n  const activNameOrHEX = ActivInputNameOrHEX(\n    activMenu,\n    inputNameOrHEX,\n    inputNameOrHEXSecond,\n    inputNameOrHEXThird,\n    inputNameOrHEXFourth\n  );\n\n  const activSetNameOrHEX = activSetInputNameOrHEX(\n    activMenu,\n    setInputNameOrHEX,\n    setInputNameOrHEXSecond,\n    setInputNameOrHEXThird,\n    setInputNameOrHEXFourth\n  );\n\n  const activSetInput = activColorInput(\n    activMenu,\n    setColorInput,\n    setColorInputSecond,\n    setColorInputThird,\n    setColorInputFourth\n  );\n\n  const activInputRights = nameActivMenu(\n    rightsActivMenu,\n    rightsFlowerSystem,\n    rightsFlowerSystemSecond,\n    rightsFlowerSystemThird,\n    rightsFlowerSystemFourth\n  );\n\n  const colorInputValue = activColorInputValue(\n    colorInput,\n    colorInputSecond,\n    colorInputThird,\n    colorInputFourth,\n    activMenu\n  );\n\n  const activFlower = activFlowerSystemt(\n    activMenu,\n    flowerSystem,\n    flowerSystemSecond,\n    flowerSystemThird,\n    flowerSystemFourth\n  );\n\n  const activInput = activInputs(activMenu, input, input2, input3, input4);\n  const activInputSecond = activInputsSecond(\n    activMenu,\n    inputSecond,\n    inputSecond2,\n    inputSecond3,\n    inputSecond4\n  );\n\n  const activInputThird = activInputsThird(\n    activMenu,\n    inputThird,\n    inputThird2,\n    inputThird3,\n    inputThird4\n  );\n\n  const activInputFourth = activInputsFourth(\n    activMenu,\n    inputFourth,\n    inputFourth2,\n    inputFourth3,\n    inputFourth4\n  );\n\n  const setInputActiv = activSetInputs(\n    activMenu,\n    setInput,\n    setInput2,\n    setInput3,\n    setInput4\n  );\n\n  const setInputActivSecond = activSetInputsSecond(\n    activMenu,\n    setInputSecond,\n    setInputSecond2,\n    setInputSecond3,\n    setInputSecond4\n  );\n\n  const setInputActivThird = activSetInputsThird(\n    activMenu,\n    setInputThird,\n    setInputThird2,\n    setInputThird3,\n    setInputThird4\n  );\n\n  const setInputActivFourth = activSetInputsFourth(\n    activMenu,\n    setInputFourth,\n    setInputFourth2,\n    setInputFourth3,\n    setInputFourth4\n  );\n\n  useEffect(() => {\n    const colorConverter = saturationToInput(color, saturation, activFlower);\n    if (activFlower === 'HEX' || activFlower === 'Name') {\n      activSetNameOrHEX(colorConverter);\n      return;\n    }\n    console.log(colorConverter);\n    const result = Object.values({ colorConverter }).map(i =>\n      Object.values(i)\n    )[0];\n    if (result.length === 4) {\n      setInputActiv(result[0]);\n      setInputActivSecond(result[1]);\n      setInputActivThird(result[2]);\n      setInputActivFourth(result[3]);\n      return;\n    }\n    if (result.length === 3) {\n      setInputActiv(result[0]);\n      setInputActivSecond(result[1]);\n      setInputActivThird(result[2]);\n    }\n  }, [saturation.s, saturation.h, saturation.v]);\n\n  useEffect(() => {\n    if (colorInputValue !== '') {\n      const colorConverter = columnConvert(\n        activFlower,\n        activInputRights,\n        colorInputValue,\n        color\n      );\n\n      const bg = color.getRGB();\n      bgColor(bg);\n      if (activInputRights === 'HEX' || activInputRights === 'Name') {\n        setRightsInput(colorConverter);\n        return;\n      }\n      const result = Object.values({ colorConverter }).map(i =>\n        Object.values(i)\n      );\n      setRightsInput(result);\n    }\n  }, [activMenu, activFlower, activInputRights, colorInputValue]);\n\n  function targetLi(e) {\n    if (activMenu === 'flowerSystem') {\n      setFlowerSystem(e.target.innerText);\n    }\n    if (activMenu === 'flowerSystemSecond') {\n      setFlowerSystemSecond(e.target.innerText);\n    }\n    if (activMenu === 'flowerSystemThird') {\n      setFlowerSystemThird(e.target.innerText);\n    }\n    if (activMenu === 'flowerSystemFourth') {\n      setFlowerSystemFourth(e.target.innerText);\n    }\n    visibli();\n  }\n\n  function rightsTargetLi(e) {\n    if (rightsActivMenu === 'rightsFlowerSystem') {\n      setRightsFlowerSystem(e.target.innerText);\n    }\n    if (rightsActivMenu === 'rightsFlowerSystemSecond') {\n      setRightsFlowerSystemSecond(e.target.innerText);\n    }\n    if (rightsActivMenu === 'rightsFlowerSystemThird') {\n      setRightsFlowerSystemThird(e.target.innerText);\n    }\n    if (rightsActivMenu === 'rightsFlowerSystemFourth') {\n      setRightsFlowerSystemFourth(e.target.innerText);\n    }\n    rightsVisibli();\n  }\n\n  function visibli() {\n    setIsVisible(!isVisible);\n  }\n\n  function rightsVisibli() {\n    setIsVisibleRights(!isVisibleRights);\n  }\n\n  function activ(event) {\n    if (event.currentTarget.id === 'flowerSystem') {\n      return setActivMenu('flowerSystem');\n    }\n    if (event.currentTarget.id === 'flowerSystemSecond') {\n      return setActivMenu('flowerSystemSecond');\n    }\n    if (event.currentTarget.id === 'flowerSystemThird') {\n      return setActivMenu('flowerSystemThird');\n    }\n    if (event.currentTarget.id === 'flowerSystemFourth') {\n      return setActivMenu('flowerSystemFourth');\n    }\n  }\n\n  function rightsActiv(event) {\n    if (event.currentTarget.id === 'rightsFlowerSystem') {\n      return setRightsActivMenu('rightsFlowerSystem');\n    }\n    if (event.currentTarget.id === 'rightsFlowerSystemSecond') {\n      return setRightsActivMenu('rightsFlowerSystemSecond');\n    }\n    if (event.currentTarget.id === 'rightsFlowerSystemThird') {\n      return setRightsActivMenu('rightsFlowerSystemThird');\n    }\n    if (event.currentTarget.id === 'rightsFlowerSystemFourth') {\n      return setRightsActivMenu('rightsFlowerSystemFourth');\n    }\n  }\n\n  function activListColum() {\n    visibli();\n    activSetInput('');\n    activSetNameOrHEX('');\n    setInputActiv('');\n    setInputActivSecond('');\n    setInputActivThird('');\n    setInputActivFourth('');\n  }\n\n  function rightsActivListColum() {\n    rightsVisibli();\n  }\n\n  function inputToSetValue(\n    activInput,\n    activInputSecond,\n    activInputThird,\n    activInputFourth,\n    activNameOrHEX\n  ) {\n    if (activFlower === 'HEX' || activFlower === 'Name') {\n      activSetInput(activNameOrHEX);\n      return;\n    }\n    activSetInput(\n      `${activInput},${activInputSecond},${activInputThird},${activInputFourth}`\n    );\n  }\n\n  function copyInput() {\n    navigator.clipboard\n      .writeText(colorInputValue)\n      .then(() => {\n        console.log('Переменная скопирована в буфер обмена');\n      })\n      .catch(error => {\n        console.error('Ошибка копирования переменной: ', error);\n      });\n  }\n\n  function rightsCopyInput() {\n    navigator.clipboard\n      .writeText(rightsInput)\n      .then(() => {\n        console.log('Переменная скопирована в буфер обмена');\n      })\n      .catch(error => {\n        console.error('Ошибка копирования переменной: ', error);\n      });\n  }\n\n  useEffect(() => {\n    inputToSetValue(\n      activInput,\n      activInputSecond,\n      activInputThird,\n      activInputFourth,\n      activNameOrHEX\n    );\n  }, [\n    activInput,\n    activInputSecond,\n    activInputThird,\n    activInputFourth,\n    activNameOrHEX,\n  ]);\n\n  return (\n    <WrraperConverter>\n      <div>\n        <BtnPicker\n          backgroundColor={activMenu === 'flowerSystem' ? '#D9D9D9' : '#3F3F40'}\n          color={activMenu === 'flowerSystem' ? '#333333' : '#D9D9D9'}\n          id=\"flowerSystem\"\n          onClick={activ}\n        >\n          {flowerSystem}\n        </BtnPicker>\n        <BtnPicker\n          backgroundColor={\n            activMenu === 'flowerSystemSecond' ? '#D9D9D9' : '#3F3F40'\n          }\n          color={activMenu === 'flowerSystemSecond' ? '#333333' : '#D9D9D9'}\n          id=\"flowerSystemSecond\"\n          onClick={activ}\n        >\n          {flowerSystemSecond}\n        </BtnPicker>\n        <BtnPicker\n          backgroundColor={\n            activMenu === 'flowerSystemThird' ? '#D9D9D9' : '#3F3F40'\n          }\n          color={activMenu === 'flowerSystemThird' ? '#333333' : '#D9D9D9'}\n          id=\"flowerSystemThird\"\n          onClick={activ}\n        >\n          {flowerSystemThird}\n        </BtnPicker>\n        <BtnPicker\n          backgroundColor={\n            activMenu === 'flowerSystemFourth' ? '#D9D9D9' : '#3F3F40'\n          }\n          color={activMenu === 'flowerSystemFourth' ? '#333333' : '#D9D9D9'}\n          id=\"flowerSystemFourth\"\n          onClick={activ}\n        >\n          {flowerSystemFourth}\n        </BtnPicker>\n        <Btn onClick={activListColum}>\n          {isVisible ? <span>&#9650;</span> : <span>&#9660;</span>}\n        </Btn>\n        <WrraperInput>\n          {isVisible ? (\n            <WrraperListColum>\n              <ListColorMenu target={targetLi} />\n            </WrraperListColum>\n          ) : null}\n          <ColorsInputPicker\n            activFlower={activFlower}\n            activSetNameOrHEX={activSetNameOrHEX}\n            activNameOrHEX={activNameOrHEX}\n            setInput={setInputActiv}\n            setInputSecond={setInputActivSecond}\n            setInputThird={setInputActivThird}\n            setInputFourth={setInputActivFourth}\n            input={activInput}\n            inputSecond={activInputSecond}\n            inputThird={activInputThird}\n            inputFourth={activInputFourth}\n          />\n          <WrraperCopy>\n            <BtnCopy onClick={copyInput}>&#10066;</BtnCopy>\n          </WrraperCopy>\n        </WrraperInput>\n      </div>\n      <WrraperArrows>&#8646;</WrraperArrows>\n      <WrraperRightsBtnGroup>\n        <BtnPicker\n          backgroundColor={\n            rightsActivMenu === 'rightsFlowerSystem' ? '#D9D9D9' : '#3F3F40'\n          }\n          color={\n            rightsActivMenu === 'rightsFlowerSystem' ? '#333333' : '#D9D9D9'\n          }\n          id=\"rightsFlowerSystem\"\n          onClick={rightsActiv}\n        >\n          {rightsFlowerSystem}\n        </BtnPicker>\n        <BtnPicker\n          backgroundColor={\n            rightsActivMenu === 'rightsFlowerSystemSecond'\n              ? '#D9D9D9'\n              : '#3F3F40'\n          }\n          color={\n            rightsActivMenu === 'rightsFlowerSystemSecond'\n              ? '#333333'\n              : '#D9D9D9'\n          }\n          id=\"rightsFlowerSystemSecond\"\n          onClick={rightsActiv}\n        >\n          {rightsFlowerSystemSecond}\n        </BtnPicker>\n        <BtnPicker\n          backgroundColor={\n            rightsActivMenu === 'rightsFlowerSystemThird'\n              ? '#D9D9D9'\n              : '#3F3F40'\n          }\n          color={\n            rightsActivMenu === 'rightsFlowerSystemThird'\n              ? '#333333'\n              : '#D9D9D9'\n          }\n          id=\"rightsFlowerSystemThird\"\n          onClick={rightsActiv}\n        >\n          {rightsFlowerSystemThird}\n        </BtnPicker>\n        <BtnPicker\n          backgroundColor={\n            rightsActivMenu === 'rightsFlowerSystemFourth'\n              ? '#D9D9D9'\n              : '#3F3F40'\n          }\n          color={\n            rightsActivMenu === 'rightsFlowerSystemFourth'\n              ? '#333333'\n              : '#D9D9D9'\n          }\n          id=\"rightsFlowerSystemFourth\"\n          onClick={rightsActiv}\n        >\n          {rightsFlowerSystemFourth}\n        </BtnPicker>\n        <Btn onClick={rightsActivListColum}>\n          {isVisibleRights ? <span>&#9650;</span> : <span>&#9660;</span>}\n        </Btn>\n        <WrraperInput>\n          {isVisibleRights ? (\n            <WrraperListColum>\n              <ListColorMenu target={rightsTargetLi} />\n            </WrraperListColum>\n          ) : null}\n          <InputColor\n            type=\"text\"\n            name=\"rightsInput\"\n            readOnly\n            value={rightsInput}\n          />\n          <WrraperCopy>\n            <BtnCopy onClick={rightsCopyInput}>&#10066;</BtnCopy>\n          </WrraperCopy>\n        </WrraperInput>\n      </WrraperRightsBtnGroup>\n    </WrraperConverter>\n  );\n};\n\nexport default ConverterColor;\n","export function ActivInputNameOrHEX(activMenu,\n    inputNameOrHEX,\n    inputNameOrHEXSecond,\n    inputNameOrHEXThird,\n    inputNameOrHEXFourth) {\n    let activInput = inputNameOrHEX;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = inputNameOrHEX;\n            break;\n        case 'flowerSystemSecond':\n            activInput = inputNameOrHEXSecond;\n            break;\n        case 'flowerSystemThird':\n            activInput = inputNameOrHEXThird;\n            break;\n        case 'flowerSystemFourth':\n            activInput = inputNameOrHEXFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activSetInputNameOrHEX(activMenu,\n    setInputNameOrHEX,\n    setInputNameOrHEXSecond,\n    setInputNameOrHEXThird,\n    setInputNameOrHEXFourth) {\n    let activInput = setInputNameOrHEX;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = setInputNameOrHEX;\n            break;\n        case 'flowerSystemSecond':\n            activInput = setInputNameOrHEXSecond;\n            break;\n        case 'flowerSystemThird':\n            activInput = setInputNameOrHEXThird;\n            break;\n        case 'flowerSystemFourth':\n            activInput = setInputNameOrHEXFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activColorInput(activMenu,\n    setColorInput,\n    setColorInputSecond,\n    setColorInputThird,\n    setColorInputFourth) {\n    let activColorInput = activMenu;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activColorInput = setColorInput;\n            break;\n        case 'flowerSystemSecond':\n            activColorInput = setColorInputSecond;\n            break;\n        case 'flowerSystemThird':\n            activColorInput = setColorInputThird;\n            break;\n        case 'flowerSystemFourth':\n            activColorInput = setColorInputFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activColorInput\n}\n","export function nameActivMenu(rightsActivMenu,\n    rightsFlowerSystem,\n    rightsFlowerSystemSecond,\n    rightsFlowerSystemThird,\n    rightsFlowerSystemFourth) {\n    let activInputRights = rightsActivMenu;\n    switch (rightsActivMenu) {\n        case 'rightsFlowerSystem':\n            activInputRights = rightsFlowerSystem;\n            break;\n        case 'rightsFlowerSystemSecond':\n            activInputRights = rightsFlowerSystemSecond;\n            break;\n        case 'rightsFlowerSystemThird':\n            activInputRights = rightsFlowerSystemThird;\n            break;\n        case 'rightsFlowerSystemFourth':\n            activInputRights = rightsFlowerSystemFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInputRights\n}","export function activColorInputValue(colorInput,\n    colorInputSecond,\n    colorInputThird,\n    colorInputFourth,\n    activMenu) {\n    let activColorInputValue = activMenu;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activColorInputValue = colorInput;\n            break;\n        case 'flowerSystemSecond':\n            activColorInputValue = colorInputSecond;\n            break;\n        case 'flowerSystemThird':\n            activColorInputValue = colorInputThird;\n            break;\n        case 'flowerSystemFourth':\n            activColorInputValue = colorInputFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activColorInputValue\n}\n","export function activFlowerSystemt(activMenu,\n    flowerSystem,\n    flowerSystemSecond,\n    flowerSystemThird,\n    flowerSystemFourth) {\n    let activFlowerSystemt = activMenu;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activFlowerSystemt = flowerSystem;\n            break;\n        case 'flowerSystemSecond':\n            activFlowerSystemt = flowerSystemSecond;\n            break;\n        case 'flowerSystemThird':\n            activFlowerSystemt = flowerSystemThird;\n            break;\n        case 'flowerSystemFourth':\n            activFlowerSystemt = flowerSystemFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activFlowerSystemt\n}","export function activInputs(activMenu,\n    input, input2, input3, input4) {\n    let activInput = input;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = input;\n            break;\n        case 'flowerSystemSecond':\n            activInput = input2;\n            break;\n        case 'flowerSystemThird':\n            activInput = input3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = input4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activInputsSecond(activMenu,\n    inputSecond, inputSecond2, inputSecond3, inputSecond4) {\n    let activInput = inputSecond;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = inputSecond;\n            break;\n        case 'flowerSystemSecond':\n            activInput = inputSecond2;\n            break;\n        case 'flowerSystemThird':\n            activInput = inputSecond3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = inputSecond4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activInputsThird(activMenu,\n    inputThird, inputThird2, inputThird3, inputThird4) {\n    let activInput = inputThird;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = inputThird;\n            break;\n        case 'flowerSystemSecond':\n            activInput = inputThird2;\n            break;\n        case 'flowerSystemThird':\n            activInput = inputThird3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = inputThird4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activInputsFourth(activMenu,\n    inputFourth, inputFourth2, inputFourth3, inputFourth4) {\n    let activInput = inputFourth;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = inputFourth;\n            break;\n        case 'flowerSystemSecond':\n            activInput = inputFourth2;\n            break;\n        case 'flowerSystemThird':\n            activInput = inputFourth3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = inputFourth4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activSetInputs(activMenu,\n    setInput,\n    setInput2,\n    setInput3,\n    setInput4) {\n    let activInput = setInput;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = setInput;\n            break;\n        case 'flowerSystemSecond':\n            activInput = setInput2;\n            break;\n        case 'flowerSystemThird':\n            activInput = setInput3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = setInput4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activSetInputsSecond(activMenu,\n    setInputSecond,\n    setInputSecond2,\n    setInputSecond3,\n    setInputSecond4) {\n    let activInput = setInputSecond;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = setInputSecond;\n            break;\n        case 'flowerSystemSecond':\n            activInput = setInputSecond2;\n            break;\n        case 'flowerSystemThird':\n            activInput = setInputSecond3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = setInputSecond4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activSetInputsThird(activMenu,\n    setInputThird,\n    setInputThird2,\n    setInputThird3,\n    setInputThird4) {\n    let activInput = setInputThird;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = setInputThird;\n            break;\n        case 'flowerSystemSecond':\n            activInput = setInputThird2;\n            break;\n        case 'flowerSystemThird':\n            activInput = setInputThird3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = setInputThird4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activSetInputsFourth(activMenu,\n    setInputFourth,\n    setInputFourth2,\n    setInputFourth3,\n    setInputFourth4) {\n    let activInput = setInputFourth;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = setInputFourth;\n            break;\n        case 'flowerSystemSecond':\n            activInput = setInputFourth2;\n            break;\n        case 'flowerSystemThird':\n            activInput = setInputFourth3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = setInputFourth4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function saturationToInput(color, saturation, flowerSystem) {\n    color.setHSV(saturation.h, saturation.s / 100, saturation.v / 100);\n\n    let result = {};\n\n    if (flowerSystem === 'RGB') {\n        result = color.getRGB()\n        return result\n    }\n\n    if (flowerSystem === 'RGBA') {\n        result = color.getRGBA()\n        return result\n    }\n\n    if (flowerSystem === 'HEX') {\n        try {\n            result = color.getHEX()\n            return result\n        } catch (error) {\n            return result\n        }\n    }\n    if (flowerSystem === 'CMYK') {\n        result = color.getCMYK()\n        return result\n    }\n\n    if (flowerSystem === 'Name') {\n        try {\n            result = color.getName()\n            return result\n        } catch (error) {\n            return \"no name\"\n        }\n\n    }\n    if (flowerSystem === 'HSL') {\n        result = color.getHLS()\n        return result\n    }\n\n    if (flowerSystem === 'HSLA') {\n        result = color.getHLSA()\n        return result\n    }\n    if (flowerSystem === 'LCH') {\n        result = color.getLCH()\n        console.log(color.getLCH())\n        return result\n    }\n\n    if (flowerSystem === 'HSIA') {\n        result = color.getHSIA()\n        return result\n    }\n\n    if (flowerSystem === 'HLSA') {\n        result = color.getHLSA()\n        return result\n    }\n\n    if (flowerSystem === 'HSI') {\n        result = color.getHSI()\n        return result\n    }\n\n    if (flowerSystem === 'HLS') {\n        result = color.getHLS()\n        return result\n    }\n\n    if (flowerSystem === 'HSV') {\n        result = color.getHSV()\n        return result\n    }\n\n    if (flowerSystem === 'HSB') {\n        result = color.getHSB()\n        return result\n    }\n    if (flowerSystem === 'Safe') {\n        result = color.getSafe()\n        return result\n    }\n    if (flowerSystem === 'CMY') {\n        result = color.getCMY()\n        return result\n    }\n    if (flowerSystem === 'XYZ') {\n        result = color.getXYZ()\n        return result\n    }\n    if (flowerSystem === 'Yxy') {\n        result = color.getYxy()\n        return result\n    }\n    if (flowerSystem === 'Lab') {\n        result = color.getLab()\n        return result\n    }\n    if (flowerSystem === 'HunterLab') {\n        result = color.getHunterLab()\n        return result\n    }\n    if (flowerSystem === 'Luv') {\n        result = color.getLuv()\n        return result\n    }\n}\n","\nimport { getColor } from \"./getColor\";\n\nexport function columnConvert(flowerSystem, rightsFlowerSystem, inputOne, color) {\n    let result = {}\n\n    if (flowerSystem === 'RGB') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setRGB(colorEl[0],\n                colorEl[1],\n                colorEl[2])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'RGBA') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            color.setRGB(colorEl[0],\n                colorEl[1],\n                colorEl[2])\n            color.setAlpha(colorEl[3])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HEX') {\n        try {\n            color.setHEX(inputOne)\n        } catch (error) {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'CMYK') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            color.setCMYK(colorEl[0],\n                colorEl[1],\n                colorEl[2],\n                colorEl[3])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'Name') {\n        try {\n            color.setName(inputOne.trim())\n        } catch (error) {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSL') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHSL(colorEl[0],\n                colorEl[1],\n                colorEl[2])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSLA') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            color.setHSLA(colorEl[0],\n                colorEl[1],\n                colorEl[2],\n                colorEl[3])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSIA') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            color.setHSIA(colorEl[0],\n                colorEl[1],\n                colorEl[2],\n                colorEl[3])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HLSA') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            color.setHLSA(colorEl[0],\n                colorEl[1],\n                colorEl[2],\n                colorEl[3])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSI') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHSI(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSI') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHSI(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HLS') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHLS(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HLS') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHLS(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSV') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHSV(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSB') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHSB(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'Safe') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setRGB(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'CMY') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setCMY(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'XYZ') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setXYZ(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'Yxy') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setYxy(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'LCH') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setLCH(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'Lab') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setLab(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HunterLab') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHunterLab(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'Luv') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setLuv(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n\n        return result\n    }\n}","import styled from \"styled-components\";\n\nexport const WrapperReference = styled.div`\npadding-top:78px;\npadding-bottom:78px;\n`\n\nexport const WrapperButtonGroup = styled.div`\nmax-width:1170px;\npadding-top:30px;\npadding-bottom:4px;\n`\nexport const WrapperTitleColorModel = styled.div`\n`\n\nexport const TitlColorModel = styled.h2`\ntext-align:center;\nfont-weight: 500;\nfont-size: 30px;\nline-height: 30px;\ncolor: #FFFFFF;\n@media (max-width: 500px) {\n    font-size: 20px;\n  }\n`\nexport const TextColorModel = styled.p`\ntext-align:center;\nfont-weight: 300;\nfont-size: 18px;\nline-height: 25px;\ncolor: #FFFFFF;\npadding-left:75px;\npadding-right:75px;\n@media (max-width: 500px) {\n    font-size: 14px;\n    line-height: 24px;\n  }\n`\n\nexport const Button = styled.button`\nbackground-color: ${(props) => props.backgroundColor};\ncolor: ${(props) => props.color};\nborder-radius: 10px 10px 0px 0px;\nwidth:150px;\nheight:55px;\n@media (max-width: 786px) {\n    width:105px;\n    height:40px;\n  }\n`\n\nexport const ListBtn = styled.ul`\ndisplay:flex;\nflex-wrap: wrap;\nmargin: -5px -10px;\n`\n\nexport const ItemBtn = styled.li`\nlist-style: none;\nmargin: 5px 10px;\n`","import styled from \"styled-components\";\n\nexport const WrapperColorModelDescription = styled.div`\nmax-width:1092px;\npadding: 40px 24px 35px 54px;\nbackground-color: #333333;\n\n  @media (max-width: 500px) {\n    padding: 26px 26px 16px 30px;\n  }\n`\nexport const TextColorModelDescription = styled.p`\ncolor: #FFFFFF;\nfont-weight: 300;\nfont-size: 16px;\nline-height: 25px;\nmargin-bottom:25px;\n@media (max-width: 500px) {\n    font-size: 14px;\n    line-height: 20px;\n  }\n`\nexport const WrapperHTMLlDescription = styled.div`\nmax-height:210px;\nmax-width:675px;\nbackground-color: #424243;\npadding: 36px 23px 41px 44px;\n@media (max-width: 500px) {\n    padding: 27px 13px 19px 15px;\n  }\n`\n\nexport const WrapperListСlue = styled.div`\nmax-height:210px;\nmax-width:675px;\nmargin-top:65px;\n@media (max-width: 500px) {\n   display:none;\n  }\n`\n\nexport const SpanH = styled.span`\ncolor: #E36E02;\n`\nexport const SpanColor = styled.span`\ncolor: #92AAFF;\n`\nexport const SpanRgb = styled.span`\ncolor: #C4E02A;\n`\nexport const TextCode = styled.p`\nfont-weight: 400;\nfont-size: 18px;\nline-height: 35px;\ncolor: #FFFFFF;\n\n@media (max-width: 500px) {\n    font-size: 12px;\n    line-height: 18px;\n  }\n`\nexport const ListСlue = styled.ol`\nfont-weight: 300;\nfont-size: 16px;\nline-height: 25px;\npadding-left:18px;\ncolor: #FFFFFF;\n`\nexport const TextСlue = styled.h3`\nmargin-bottom: 20px;\nfont-weight: 400;\nfont-size: 18px;\nline-height: 35px;\ncolor: #FFFFFF;\n`\n\n\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst RGB = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Цветовое пространство RGB (Red, Green, Blue) состоит из всех возможных\n        цветов, которые могут быть получены путём смешивания красного, зелёного,\n        и синего.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGB задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGB цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default RGB;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst RGBA = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default RGBA;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HEX = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HEX;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst CMYK = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default CMYK;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst Name = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default Name;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HSL = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HSL;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HSLA = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HSLA;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HSIA = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HSIA;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HLSA = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HLSA;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HSI = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HSI;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HLS = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HLS;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HSV = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HSV;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HSB = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HSB;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst Safe = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default Safe;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst CMY = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default CMY;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst XYZ = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default XYZ;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst Yxy = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default Yxy;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst Lab = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default Lab;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst LCH = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default LCH;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HunterLab = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HunterLab;\n","import { useState } from 'react';\nimport {\n  Button,\n  ItemBtn,\n  ListBtn,\n  TextColorModel,\n  TitlColorModel,\n  WrapperButtonGroup,\n  WrapperReference,\n  WrapperTitleColorModel,\n} from './ColorReference.styled';\nimport { activColorModel } from 'util/ActivElement/activColorModel';\n\nconst ColorReference = () => {\n  const [activBTN, setActivBTN] = useState('RGB');\n\n  const ActiveModel = activColorModel(activBTN);\n\n  return (\n    <WrapperReference>\n      <WrapperTitleColorModel>\n        <TitlColorModel>СПРАВКА ПО ЦВЕТОВЫМ МОДЕЛЯМ</TitlColorModel>\n        <TextColorModel>\n          Далее приводится краткое описание цветовых систем с которыми работает\n          конвертер, разъяснение по форматам, а также примеры использования\n          полученных цветов в CSS/HTML.\n        </TextColorModel>\n      </WrapperTitleColorModel>\n      <WrapperButtonGroup>\n        <ListBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'RGB' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'RGB' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('RGB');\n              }}\n            >\n              RGB\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'RGBA' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'RGBA' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('RGBA');\n              }}\n            >\n              RGBA\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'HEX' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'HEX' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('HEX');\n              }}\n            >\n              HEX\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'CMYK' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'CMYK' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('CMYK');\n              }}\n            >\n              CMYK\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'Name' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'RGBA' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('Name');\n              }}\n            >\n              Name\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'HSL' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'HSL' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('HSL');\n              }}\n            >\n              HSL\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'HSLA' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'HSLA' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('HSLA');\n              }}\n            >\n              HSLA\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'HSIA' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'HSIA' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('HSIA');\n              }}\n            >\n              HSIA\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'HLSA' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'HLSA' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('HLSA');\n              }}\n            >\n              HLSA\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'HSI' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'HSI' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('HSI');\n              }}\n            >\n              HSI\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'HLS' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'HLS' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('HLS');\n              }}\n            >\n              HLS\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'HSV' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'HSV' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('HSV');\n              }}\n            >\n              HSV\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'HSB' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'HSB' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('HSB');\n              }}\n            >\n              HSB\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'Safe' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'Safe' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('Safe');\n              }}\n            >\n              Safe\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'CMY' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'CMY' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('CMY');\n              }}\n            >\n              CMY\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'XYZ' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'XYZ' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('XYZ');\n              }}\n            >\n              XYZ\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'Yxy' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'Yxy' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('Yxy');\n              }}\n            >\n              Yxy\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'Lab' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'Lab' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('Lab');\n              }}\n            >\n              Lab\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'LCH' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'LCH' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('LCH');\n              }}\n            >\n              LCH\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              backgroundColor={activBTN === 'HunterLab' ? '#D9D9D9' : '#3F3F40'}\n              color={activBTN === 'HunterLab' ? '#333333' : '#FFFFFF'}\n              onClick={() => {\n                setActivBTN('HunterLab');\n              }}\n            >\n              HunterLab\n            </Button>\n          </ItemBtn>\n        </ListBtn>\n      </WrapperButtonGroup>\n      <ActiveModel />\n    </WrapperReference>\n  );\n};\n\nexport default ColorReference;\n","import {\n    RGB,\n    RGBA,\n    HEX,\n    CMYK,\n    Name,\n    HSL,\n    HSLA,\n    HSIA,\n    HLSA,\n    HSI,\n    HLS,\n    HSV,\n    HSB,\n    Safe,\n    CMY,\n    XYZ,\n    Yxy,\n    Lab,\n    LCH,\n    HunterLab,\n} from '../../components/colorModelDescription/index';\nexport function activColorModel(activBTN) {\n    let activColor = activBTN;\n    switch (activBTN) {\n        case 'RGB':\n            activColor = RGB;\n            break;\n        case 'RGBA':\n            activColor = RGBA;\n            break;\n        case 'HEX':\n            activColor = HEX;\n            break;\n        case 'CMYK':\n            activColor = CMYK;\n            break;\n        case 'Name':\n            activColor = Name;\n            break;\n        case 'HSL':\n            activColor = HSL;\n            break;\n        case 'HSLA':\n            activColor = HSLA;\n            break;\n        case 'HSIA':\n            activColor = HSIA;\n            break;\n        case 'HLSA':\n            activColor = HLSA;\n            break;\n        case 'HSI':\n            activColor = HSI;\n            break;\n        case 'HLS':\n            activColor = HLS;\n            break;\n        case 'HSV':\n            activColor = HSV;\n            break;\n        case 'HSB':\n            activColor = HSB;\n            break;\n        case 'Safe':\n            activColor = Safe;\n            break;\n        case 'CMY':\n            activColor = CMY;\n            break;\n        case 'XYZ':\n            activColor = XYZ;\n            break;\n        case 'Yxy':\n            activColor = Yxy;\n            break;\n        case 'Lab':\n            activColor = Lab;\n            break;\n        case 'LCH':\n            activColor = LCH;\n            break;\n        case 'HunterLab':\n            activColor = HunterLab;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activColor\n}","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from 'react';\nimport Hue from '@uiw/react-color-hue';\nimport Saturation from '@uiw/react-color-saturation';\nimport { Section } from 'components/ui/Section/Section';\nimport {\n  ColorDisplay,\n  WrappeSaturation,\n  WrapperColorPicker,\n  WrapperColorPickerSection,\n  WrapperHue,\n} from './colorPicker.styled';\nimport ConverterColor from 'components/Converter/ConverterColor';\nimport Color from 'js/color';\nimport ColorReference from 'components/colorReference/ColorReference';\n\nconst ColorPicker = () => {\n  const [hsva, setHsva] = useState({ h: 25, s: 25, v: 25, a: 1 });\n  const [bgRGB, setBgRGB] = useState('');\n  const color = new Color();\n\n  function colorClass() {\n    color.setHSV(hsva.h, hsva.s / 100, hsva.v / 100);\n    const result = color.getRGB();\n    color.setBgRGB(result.red, result.green, result.blue);\n    const bgOb = color.getBgRGB();\n    const bgString = `rgb(${bgOb.red}, ${bgOb.green}, ${bgOb.blue})`;\n    setBgRGB(bgString);\n  }\n  function bgColorInInput(bgColor) {\n    const bgString = `rgb(${bgColor.red}, ${bgColor.green}, ${bgColor.blue})`;\n    setBgRGB(bgString);\n  }\n\n  useEffect(() => {\n    colorClass();\n  }, [hsva]);\n\n  return (\n    <Section>\n      <WrapperColorPickerSection>\n        <WrapperColorPicker>\n          <ColorDisplay style={{ backgroundColor: bgRGB }} />\n          <WrapperHue>\n            <Hue\n              hue={hsva.h}\n              direction=\"vertical\"\n              width={18}\n              height={225}\n              onChange={newHue => {\n                setHsva({ ...hsva, ...newHue });\n              }}\n            />\n          </WrapperHue>\n          <WrappeSaturation>\n            <Saturation\n              style={{ maxWidth: '100%', width: '582px', height: '225px' }}\n              hsva={hsva}\n              onChange={newColor => {\n                setHsva({ ...hsva, ...newColor, a: hsva.a });\n              }}\n            />\n          </WrappeSaturation>\n        </WrapperColorPicker>\n        <ConverterColor\n          color={color}\n          bgColor={bgColorInInput}\n          saturation={hsva}\n        />\n      </WrapperColorPickerSection>\n      <ColorReference />\n    </Section>\n  );\n};\n\nexport default ColorPicker;\n","import styled from 'styled-components';\n\n\nexport const MainTeg = styled.main``\n\nexport const WrapperHome = styled.div`\n    padding-left: 147px;\n    padding-right: 147px;\nbackground-color: #424343;\n`\n","import styled from 'styled-components';\n\n\nexport const TextStart = styled.p`\ncolor:#FFFFFF;\nfont-weight: 300;\nfont-size: 18px;\nline-height: 30px;\n`\n\nexport const WraperTextStart = styled.div`\npadding-top: 60px;\ndisplay:flex;\njustify-content: space-between;\nalign-items:center;\n`","import { TextStart, WraperTextStart } from './DescriptionText.styled';\n\nconst TextDescription = () => {\n  return (\n    <WraperTextStart>\n      <TextStart>\n        С помощью универсального конвертер цветов вы можете легко перевести цвет\n        из одной цветовой модели в ряд других.\n        <br />\n        В первую очередь, калькулятор служит для удобной работы с современными\n        форматами CSS3-цветов.\n        <br />\n        Поддерживается конвертация из HEX в RGB/RGBA и HSL/HSLA, RGB в CMYK,\n        XYZ, LAB, и обратно.\n        <br />А также специальный функционал для замещения альфа-канала при\n        переводе цвета из RGBA в RGB (и HSLA в HSL).\n      </TextStart>\n    </WraperTextStart>\n  );\n};\n\nexport default TextDescription;\n","import ColorPicker from 'components/colorPicker/colorPicker';\nimport { MainTeg } from './Main.styled';\nimport TextDescription from 'components/DescriptionText/DescriptionText';\n\nconst Main = () => {\n  return (\n    <MainTeg>\n      <TextDescription />\n      <ColorPicker />\n    </MainTeg>\n  );\n};\n\nexport default Main;\n","import { Wraper } from './Home.styled';\nimport Main from 'components/main/Main';\n\nconst Home = () => {\n  return (\n    <Wraper>\n      <Main />\n    </Wraper>\n  );\n};\n\nexport default Home;\n"],"names":["Wraper","styled","Sections","Section","children","WrapperColorPickerSection","WrapperColorPicker","WrapperHue","ColorDisplay","WrappeSaturation","ListNameColor","ItemtColorMenu","target","colorPalette","palette","onClick","WrraperConverter","WrraperListColum","BtnPicker","props","backgroundColor","color","Btn","BtnCopy","InputColor","WrraperArrows","WrraperInput","WrraperRightsBtnGroup","WrraperCopy","WrapperInput","WrapperNameColor","Input","LastInput","InputHexOrName","Tekst","ColorsInputPicker","activFlower","activSetNameOrHEX","activNameOrHEX","setInput","setInputSecond","setInputThird","setInputFourth","input","inputSecond","inputThird","inputFourth","useState","nameOrHex","setNameOrHex","namePallete","split","useEffect","onChange","event","value","replace","readOnly","getColor","options","result","getRGB","getRGBA","getHEX","getCMYK","getName","getHSL","getHSLA","getHSIA","getHLSA","getHSI","getHLS","getHSV","getHSB","getSafe","getCMY","getXYZ","getYxy","getLab","getLCH","getHunterLab","getLuv","bgColor","saturation","colorInput","setColorInput","colorInputSecond","setColorInputSecond","colorInputThird","setColorInputThird","colorInputFourth","setColorInputFourth","rightsInput","setRightsInput","inputNameOrHEX","setInputNameOrHEX","inputNameOrHEXSecond","setInputNameOrHEXSecond","inputNameOrHEXThird","setInputNameOrHEXThird","inputNameOrHEXFourth","setInputNameOrHEXFourth","input2","setInput2","inputSecond2","setInputSecond2","inputThird2","setInputThird2","inputFourth2","setInputFourth2","input3","setInput3","inputSecond3","setInputSecond3","inputThird3","setInputThird3","inputFourth3","setInputFourth3","input4","setInput4","inputSecond4","setInputSecond4","inputThird4","setInputThird4","inputFourth4","setInputFourth4","isVisible","setIsVisible","isVisibleRights","setIsVisibleRights","activMenu","setActivMenu","rightsActivMenu","setRightsActivMenu","flowerSystem","setFlowerSystem","flowerSystemSecond","setFlowerSystemSecond","flowerSystemThird","setFlowerSystemThird","flowerSystemFourth","setFlowerSystemFourth","rightsFlowerSystem","setRightsFlowerSystem","rightsFlowerSystemSecond","setRightsFlowerSystemSecond","rightsFlowerSystemThird","setRightsFlowerSystemThird","rightsFlowerSystemFourth","setRightsFlowerSystemFourth","activInput","console","log","ActivInputNameOrHEX","activSetInputNameOrHEX","activSetInput","activColorInput","activInputRights","nameActivMenu","colorInputValue","activColorInputValue","activFlowerSystemt","activInputs","activInputSecond","activInputsSecond","activInputThird","activInputsThird","activInputFourth","activInputsFourth","setInputActiv","activSetInputs","setInputActivSecond","activSetInputsSecond","setInputActivThird","activSetInputsThird","setInputActivFourth","activSetInputsFourth","visibli","rightsVisibli","activ","currentTarget","id","rightsActiv","colorConverter","setHSV","h","s","v","error","saturationToInput","Object","values","map","i","length","inputOne","colorEl","setRGB","setAlpha","setHEX","setCMYK","setName","trim","setHSL","setHSLA","setHSIA","setHLSA","setHSI","setHLS","setHSB","setCMY","setXYZ","setYxy","setLCH","setLab","setHunterLab","setLuv","columnConvert","bg","inputToSetValue","e","innerText","navigator","clipboard","writeText","then","catch","type","name","WrapperReference","WrapperButtonGroup","WrapperTitleColorModel","TitlColorModel","TextColorModel","Button","ListBtn","ItemBtn","WrapperColorModelDescription","TextColorModelDescription","WrapperHTMLlDescription","WrapperListСlue","SpanH","SpanColor","SpanRgb","TextCode","ListСlue","TextСlue","activBTN","setActivBTN","ActiveModel","activColor","RGB","RGBA","HEX","CMYK","Name","HSL","HSLA","HSIA","HLSA","HSI","HLS","HSV","HSB","Safe","CMY","XYZ","Yxy","Lab","LCH","HunterLab","activColorModel","a","hsva","setHsva","bgRGB","setBgRGB","Color","red","green","blue","bgOb","getBgRGB","bgString","colorClass","style","hue","direction","width","height","newHue","maxWidth","newColor","MainTeg","TextStart","WraperTextStart"],"sourceRoot":""}