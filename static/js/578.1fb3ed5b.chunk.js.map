{"version":3,"file":"static/js/578.1fb3ed5b.chunk.js","mappings":"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","sources":["pages/Home.styled.js","components/ui/Section/Section.styled.js","components/ui/Section/Section.jsx","components/colorPicker/colorPicker.styled.js","components/listColorsMenu/listColorsMenu.styled.js","util/colorPalette.js","components/listColorsMenu/listColorsMenu.jsx","components/Converter/ConverterColor.styled.js","util/getColor.js","components/Converter/ConverterColor.jsx","util/ActivElement/nameActivMenu.js","util/ActivElement/activColorInputValue.js","util/ActivElement/activFlowerSystemt.js","util/ColumnConvert.js","js/converter.js","js/color.js","components/colorPicker/colorPicker.jsx","main/Main.styled.js","components/DescriptionText/DescriptionText.styled.js","components/DescriptionText/DescriptionText.jsx","main/Main.jsx","pages/Home.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wraper = styled.div`\n  width-max:1440px;\n  height: 100%;\n  background-color: #f5fffa;\n  padding-left: 147px;\n  padding-right: 147px;\n`;\n","import styled from 'styled-components';\n\nexport const Sections = styled.section`\n padding: 30px 0px;\n`;\n","import { Sections } from './Section.styled';\n\nexport const Section = ({ children }) => {\n  return <Sections>{children}</Sections>;\n};\n","import styled from 'styled-components';\n\n\nexport const WrapperColorPickerSection = styled.div`\n/* padding-left: 147px;\npadding-right: 147px; */\n`\n\nexport const WrapperColorPicker = styled.div`\ndisplay:flex;\nbackground-color: #F5F5F5;\npadding-top: 38px;\npadding-left:87px;\npadding-right:110px;\npadding-bottom:53px;\n`\n\nexport const WrapperHue = styled.div`\nmargin-left:77px;\n`\nexport const ColorDisplay = styled.div`\nwidth:225px;\nheight:225px;\n\n`\nexport const WrappeSaturation = styled.div`\nmargin-left:12px;\n\n`\n","import styled from \"styled-components\";\n\nexport const ListNameColor = styled.ul`\nposition: absolute;\npadding-top:21px;\npadding-left:30px;\npadding-right:61px;\n\ndisplay:flex;\nflex-direction: column;\nflex-wrap: wrap;\nheight: 225px;\nwidth: 435px;\n&:not(:last-child) {\n    gap-right:46px;;\n  }\n  /* display:grid; */\n  /* grid-template-columns: 48px 44px 38px 78px;\n  grid-template: repeat(6,48px)/ repeat(6,44px)/ repeat(6,38px)/ repeat(3,78px); */\n  /* grid-template-columns: 48px 44px 38px 78px;\n  grid-gap: 5px 50px;\n  align-items: start; */\n\n`\n\nexport const ItemtColorMenu = styled.li`\nposition: relative;\nwidth : auto;\nheight:35px;\nlist-style-type: none;\nfont-family: 'Roboto';\nfont-style: normal;\nfont-weight: 300;\nfont-size: 16px;\nline-height: 35px;\n`","const colorPalette = [\n    'RGB',\n    'RGBA',\n    'HEX',\n    'CMYK',\n    'Name',\n    'HSL',\n    'HSLA',\n    'HSIA',\n    'HLSA',\n    'HSI',\n    'HLS',\n    'HSV',\n    'HSB',\n    'Safe',\n    'CMY',\n    'XYZ',\n    'Yxy',\n    'Lab',\n    'LCH',\n    'HunterLab',\n    'Luv'\n];\n\nexport default colorPalette\n    ;","import { ItemtColorMenu, ListNameColor } from './listColorsMenu.styled';\nimport colorPalette from '../../util/colorPalette';\n// import { useEffect, useState } from 'react';\n\nconst ListColorMenu = ({ target }) => {\n  return (\n    <ListNameColor>\n      {colorPalette.map(palette => (\n        <ItemtColorMenu key={palette} onClick={target}>\n          {palette}\n        </ItemtColorMenu>\n      ))}\n    </ListNameColor>\n  );\n};\n\nexport default ListColorMenu;\n","import styled from \"styled-components\";\n\nexport const WrraperListColum = styled.div`\nheight: 245px;\nwidth: 435px;\nbackground-color: #D9D9D9;\nposition: absolute;\nz-index: 2\n`\n\nexport const BtnPicker = styled.button`\nwidth: 100px;\nheight: 40px;\nborder-top-left-radius:10px;\nborder-top-right-radius:10px;\n&:not(:first-child) {\n    margin-left:10px;\n  }`\n\nexport const InputColor = styled.input`\ndisplay:block;\nwidth: 435px;\nheight: 25px;\npadding: 20px 30px 15px 30px;\n  `\n\nexport const WrraperOnverter = styled.div`\ndisplay: flex;\n`\n\nexport const WrraperInput = styled.div`\ndisplay: relative;\n`\n\nexport const WrraperRightsBtnGroup = styled.div`\nmargin-left:53px`","export function getColor(color, options) {\n    let result = {};\n    switch (options) {\n        case 'RGB':\n            result = color.getRGB()\n            break;\n        case 'RGBA':\n            result = color.getRGBA()\n            break;\n        case 'HEX':\n            result = color.getHEX()\n            break;\n        case 'CMYK':\n            result = color.getCMYK()\n            break;\n        case 'Name':\n            result = color.getName()\n            break;\n        case 'HSL':\n            result = color.getHSL()\n            break;\n        case 'HSLA':\n            result = color.getHSLA()\n            break;\n        case 'HSIA':\n            result = color.getHSIA()\n            break;\n        case 'HLSA':\n            result = color.getHLSA()\n            break;\n        case 'HSI':\n            result = color.getHSI()\n            break;\n        case 'HLS':\n            result = color.getHLS()\n            break;\n        case 'HSV':\n            result = color.getHSV()\n            break;\n        case 'HSB':\n            result = color.getHSB()\n            break;\n        case 'Safe':\n            result = color.getSafe()\n            break;\n        case 'CMY':\n            result = color.getCMY()\n            break;\n        case 'XYZ':\n            result = color.getXYZ()\n            break;\n        case 'Yxy':\n            result = color.getYxy()\n            break;\n        case 'Lab':\n            result = color.getLab()\n            break;\n        case 'LCH':\n            result = color.getLCH()\n            break;\n        case 'HunterLab':\n            result = color.getHunterLab()\n            break;\n        case 'Luv':\n            result = color.getLuv()\n            break;\n        default:\n            result = '';\n    }\n    return result\n}","/* eslint-disable react-hooks/exhaustive-deps */\nimport ListColorMenu from 'components/listColorsMenu/listColorsMenu';\nimport { useState, useEffect } from 'react';\nimport {\n  BtnPicker,\n  InputColor,\n  WrraperInput,\n  WrraperListColum,\n  WrraperOnverter,\n  WrraperRightsBtnGroup,\n} from './ConverterColor.styled';\nimport { columnConvert } from 'util/ColumnConvert';\nimport { nameActivMenu } from 'util/ActivElement/nameActivMenu';\nimport { activColorInputValue } from 'util/ActivElement/activColorInputValue';\nimport { activFlowerSystemt } from 'util/ActivElement/activFlowerSystemt';\n\nconst ConverterColor = ({ color }) => {\n  //////input set\n  const [colorInput, setColorInput] = useState('');\n  const [colorInputSecond, setColorInputSecond] = useState('');\n  const [colorInputThird, setColorInputThird] = useState('');\n  const [colorInputFourth, setColorInputFourth] = useState('');\n  const [rightsInput, setrRightsInput] = useState('');\n\n  ///////activ set\n  const [isVisible, setIsVisible] = useState(false);\n  const [isVisibleRights, setIsVisibleRights] = useState(false);\n  const [activMenu, setActivMenu] = useState('flowerSystem');\n  const [rightsActivMenu, setRightsActivMenu] = useState('rightsFlowerSystem');\n\n  //////color menu set\n  const [flowerSystem, setFlowerSystem] = useState('RGB');\n  const [flowerSystemSecond, setFlowerSystemSecond] = useState('HLS');\n  const [flowerSystemThird, setFlowerSystemThird] = useState('CMYK');\n  const [flowerSystemFourth, setFlowerSystemFourth] = useState('HSL');\n  const [rightsFlowerSystem, setRightsFlowerSystem] = useState('RGB');\n  const [rightsFlowerSystemSecond, setRightsFlowerSystemSecond] =\n    useState('HLS');\n  const [rightsFlowerSystemThird, setRightsFlowerSystemThird] =\n    useState('CMYK');\n  const [rightsFlowerSystemFourth, setRightsFlowerSystemFourth] =\n    useState('HSL');\n\n  const activInputRights = nameActivMenu(\n    rightsActivMenu,\n    rightsFlowerSystem,\n    rightsFlowerSystemSecond,\n    rightsFlowerSystemThird,\n    rightsFlowerSystemFourth\n  );\n\n  const colorInputValue = activColorInputValue(\n    colorInput,\n    colorInputSecond,\n    colorInputThird,\n    colorInputFourth,\n    activMenu\n  );\n\n  const activFlower = activFlowerSystemt(\n    activMenu,\n    flowerSystem,\n    flowerSystemSecond,\n    flowerSystemThird,\n    flowerSystemFourth\n  );\n\n  useEffect(() => {\n    if (colorInputValue !== '') {\n      const colorConverter = columnConvert(\n        activFlower,\n        activInputRights,\n        colorInputValue,\n        color\n      );\n      if (activInputRights === 'HEX' || activInputRights === 'Name') {\n        setrRightsInput(colorConverter);\n        return;\n      }\n      const result = Object.values({ colorConverter }).map(i =>\n        Object.values(i)\n      );\n      setrRightsInput(result);\n    }\n    console.log('что то не так');\n  }, [activMenu, activFlower, activInputRights, colorInputValue]);\n\n  function targetLi(e) {\n    if (activMenu === 'flowerSystem') {\n      setFlowerSystem(e.target.innerText);\n    }\n    if (activMenu === 'flowerSystemSecond') {\n      setFlowerSystemSecond(e.target.innerText);\n    }\n    if (activMenu === 'flowerSystemThird') {\n      setFlowerSystemThird(e.target.innerText);\n    }\n    if (activMenu === 'flowerSystemFourth') {\n      setFlowerSystemFourth(e.target.innerText);\n    }\n    visibli();\n  }\n\n  function rightsTargetLi(e) {\n    if (rightsActivMenu === 'rightsFlowerSystem') {\n      setRightsFlowerSystem(e.target.innerText);\n    }\n    if (rightsActivMenu === 'rightsFlowerSystemSecond') {\n      setRightsFlowerSystemSecond(e.target.innerText);\n    }\n    if (rightsActivMenu === 'rightsFlowerSystemThird') {\n      setRightsFlowerSystemThird(e.target.innerText);\n    }\n    if (rightsActivMenu === 'rightsFlowerSystemFourth') {\n      setRightsFlowerSystemFourth(e.target.innerText);\n    }\n    rightsVisibli();\n  }\n\n  function visibli() {\n    setIsVisible(!isVisible);\n  }\n\n  function rightsVisibli() {\n    setIsVisibleRights(!isVisibleRights);\n  }\n\n  function activ(event) {\n    visibli();\n    if (event.currentTarget.id === 'flowerSystem') {\n      return setActivMenu('flowerSystem');\n    }\n    if (event.currentTarget.id === 'flowerSystemSecond') {\n      return setActivMenu('flowerSystemSecond');\n    }\n    if (event.currentTarget.id === 'flowerSystemThird') {\n      return setActivMenu('flowerSystemThird');\n    }\n    if (event.currentTarget.id === 'flowerSystemFourth') {\n      return setActivMenu('flowerSystemFourth');\n    }\n  }\n\n  function rightsActiv(event) {\n    rightsVisibli();\n    if (event.currentTarget.id === 'rightsFlowerSystem') {\n      return setRightsActivMenu('rightsFlowerSystem');\n    }\n    if (event.currentTarget.id === 'rightsFlowerSystemSecond') {\n      return setRightsActivMenu('rightsFlowerSystemSecond');\n    }\n    if (event.currentTarget.id === 'rightsFlowerSystemThird') {\n      return setRightsActivMenu('rightsFlowerSystemThird');\n    }\n    if (event.currentTarget.id === 'rightsFlowerSystemFourth') {\n      return setRightsActivMenu('rightsFlowerSystemFourth');\n    }\n  }\n\n  return (\n    <WrraperOnverter>\n      <div>\n        <BtnPicker id=\"flowerSystem\" onClick={activ}>\n          {flowerSystem}\n        </BtnPicker>\n        <BtnPicker id=\"flowerSystemSecond\" onClick={activ}>\n          {flowerSystemSecond}\n        </BtnPicker>\n        <BtnPicker id=\"flowerSystemThird\" onClick={activ}>\n          {flowerSystemThird}\n        </BtnPicker>\n        <BtnPicker id=\"flowerSystemFourth\" onClick={activ}>\n          {flowerSystemFourth}\n        </BtnPicker>\n        <WrraperInput>\n          {isVisible ? (\n            <WrraperListColum>\n              <ListColorMenu target={targetLi} />\n            </WrraperListColum>\n          ) : null}\n          {activMenu === 'flowerSystem' ? (\n            <InputColor\n              type=\"text\"\n              name=\"ColorInput\"\n              value={colorInput}\n              onChange={event => setColorInput(event.target.value)}\n            />\n          ) : null}\n          {activMenu === 'flowerSystemSecond' ? (\n            <InputColor\n              type=\"text\"\n              name=\"ColorInputSecond\"\n              value={colorInputSecond}\n              onChange={event => setColorInputSecond(event.target.value)}\n            />\n          ) : null}\n          {activMenu === 'flowerSystemThird' ? (\n            <InputColor\n              type=\"text\"\n              name=\"ColorInputThird\"\n              value={colorInputThird}\n              onChange={event => setColorInputThird(event.target.value)}\n            />\n          ) : null}\n          {activMenu === 'flowerSystemFourth' ? (\n            <InputColor\n              type=\"text\"\n              name=\"colorInputFourth\"\n              value={colorInputFourth}\n              onChange={event => setColorInputFourth(event.target.value)}\n            />\n          ) : null}\n        </WrraperInput>\n      </div>\n      <WrraperRightsBtnGroup>\n        <BtnPicker id=\"rightsFlowerSystem\" onClick={rightsActiv}>\n          {rightsFlowerSystem}\n        </BtnPicker>\n        <BtnPicker id=\"rightsFlowerSystemSecond\" onClick={rightsActiv}>\n          {rightsFlowerSystemSecond}\n        </BtnPicker>\n        <BtnPicker id=\"rightsFlowerSystemThird\" onClick={rightsActiv}>\n          {rightsFlowerSystemThird}\n        </BtnPicker>\n        <BtnPicker id=\"rightsFlowerSystemFourth\" onClick={rightsActiv}>\n          {rightsFlowerSystemFourth}\n        </BtnPicker>\n        <WrraperInput>\n          {isVisibleRights ? (\n            <WrraperListColum>\n              <ListColorMenu target={rightsTargetLi} />\n            </WrraperListColum>\n          ) : null}\n          <InputColor\n            type=\"text\"\n            name=\"rightsInput\"\n            readOnly\n            value={rightsInput}\n          />\n        </WrraperInput>\n      </WrraperRightsBtnGroup>\n    </WrraperOnverter>\n  );\n};\n\nexport default ConverterColor;\n","export function nameActivMenu(rightsActivMenu,\n    rightsFlowerSystem,\n    rightsFlowerSystemSecond,\n    rightsFlowerSystemThird,\n    rightsFlowerSystemFourth) {\n    let activInputRights = rightsActivMenu;\n    switch (rightsActivMenu) {\n        case 'rightsFlowerSystem':\n            activInputRights = rightsFlowerSystem;\n            break;\n        case 'rightsFlowerSystemSecond':\n            activInputRights = rightsFlowerSystemSecond;\n            break;\n        case 'rightsFlowerSystemThird':\n            activInputRights = rightsFlowerSystemThird;\n            break;\n        case 'rightsFlowerSystemFourth':\n            activInputRights = rightsFlowerSystemFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInputRights\n}","export function activColorInputValue(colorInput,\n    colorInputSecond,\n    colorInputThird,\n    colorInputFourth,\n    activMenu) {\n    let activColorInputValue = activMenu;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activColorInputValue = colorInput;\n            break;\n        case 'flowerSystemSecond':\n            activColorInputValue = colorInputSecond;\n            break;\n        case 'flowerSystemThird':\n            activColorInputValue = colorInputThird;\n            break;\n        case 'flowerSystemFourth':\n            activColorInputValue = colorInputFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activColorInputValue\n}\n","export function activFlowerSystemt(activMenu,\n    flowerSystem,\n    flowerSystemSecond,\n    flowerSystemThird,\n    flowerSystemFourth) {\n    let activFlowerSystemt = activMenu;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activFlowerSystemt = flowerSystem;\n            break;\n        case 'flowerSystemSecond':\n            activFlowerSystemt = flowerSystemSecond;\n            break;\n        case 'flowerSystemThird':\n            activFlowerSystemt = flowerSystemThird;\n            break;\n        case 'flowerSystemFourth':\n            activFlowerSystemt = flowerSystemFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activFlowerSystemt\n}","// import Color from \"js/color\";\nimport { getColor } from \"./getColor\";\n\nexport function columnConvert(flowerSystem, rightsFlowerSystem, inputOne, color) {\n    // const color = new Color();\n    let result = {}\n\n    if (flowerSystem === 'RGB') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setRGB(colorEl[0],\n                colorEl[1],\n                colorEl[2])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'RGBA') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            color.setRGB(colorEl[0],\n                colorEl[1],\n                colorEl[2])\n            color.setAlpha(colorEl[3])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HEX') {\n        try {\n            color.setHEX(inputOne)\n        } catch (error) {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'CMYK') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            color.setCMYK(colorEl[0],\n                colorEl[1],\n                colorEl[2],\n                colorEl[3])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'Name') {\n        try {\n            color.setName(inputOne.trim())\n        } catch (error) {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSL') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHSL(colorEl[0],\n                colorEl[1],\n                colorEl[2])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSLA') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            color.setHSLA(colorEl[0],\n                colorEl[1],\n                colorEl[2],\n                colorEl[3])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSIA') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            color.setHSIA(colorEl[0],\n                colorEl[1],\n                colorEl[2],\n                colorEl[3])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HLSA') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            color.setHLSA(colorEl[0],\n                colorEl[1],\n                colorEl[2],\n                colorEl[3])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSI') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHSI(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSI') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHSI(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HLS') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHLS(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HLS') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHLS(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSV') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHSV(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSB') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHSB(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'Safe') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setRGB(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'CMY') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setCMY(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'XYZ') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setXYZ(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'Yxy') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setYxy(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'Lab') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setLab(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HunterLab') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHunterLab(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'Luv') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setLuv(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n\n        return result\n    }\n}","import nameColors from '../util/colorsName.json'\nimport websafe_colors from '../util/websafe_colors.json'\n\n\n\n\nexport default class Converter {\n    static RGBAToRGB(\n        red,\n        green,\n        blue,\n        alpha,\n        bgRed = 255,\n        bgGreen = 255,\n        bgBlue = 255\n    ) {\n        red = ((1 - alpha) * bgRed) + (alpha * red);\n        green = ((1 - alpha) * bgGreen) + (alpha * green);\n        blue = ((1 - alpha) * bgBlue) + (alpha * blue);\n\n        const result = this._roundRGB(red, green, blue);\n\n        return result;\n    }\n\n    // /**\n    //  * Convert the RGB color to a RGBA color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]\n    //  */\n\n    static RGBToRGBA(red, green, blue) {\n        const rgba = {}\n        rgba.red = red;\n        rgba.green = green;\n        rgba.blue = blue;\n        rgba.alpha = 1;\n        return rgba\n    }\n\n    // /**\n    //  * Convert the HEX color to a RGB color.\n    //  *\n    //  * @param string $hex\n    //  *\n    //  * @return int[]\n    //  */\n\n    static HEXToRGB(hex) {\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        const rgb = [\n            parseInt(result[1], 16),\n            parseInt(result[2], 16),\n            parseInt(result[3], 16)]\n        return this._roundRGB(...rgb);\n    }\n\n    // /**\n    //  * Convert the RGB color to a HEX color\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return string\n    //  */\n\n    static RGBToHEX(red, green, blue) {\n        return ((1 << 24) + (red << 16) + (green << 8) + blue).toString(16).slice(1);\n    }\n\n    // /**\n    //  * Convert the CMYK color to a RGB color.\n    //  *\n    //  * @param float $cyan\n    //  * @param float $magenta\n    //  * @param float $yellow\n    //  * @param float $key\n    //  *\n    //  * @return int[]\n    //  */\n\n\n    static CMYKToRGB(cyan, magenta, yellow, key) {\n        const red = Math.round(255 * (1 - cyan) * (1 - key))\n        const green = Math.round(255 * (1 - magenta) * (1 - key))\n        const blue = Math.round(255 * (1 - yellow) * (1 - key))\n\n        return this._roundRGB(red, green, blue);\n    }\n\n    // /**\n    //  * Convert the RGB color to a CMYK color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return float[]\n    //  */\n\n    static RGBToCMYK(red, green, blue) {\n\n        const calcRed = red / 255;\n        const calcGreen = green / 255;\n        const calcBlue = blue / 255;\n\n        const key = 1 - Math.max(calcRed, calcGreen, calcBlue);\n        const cyan = ((1 - calcRed - key) / (1 - key))\n        const magenta = ((1 - calcGreen - key) / (1 - key));\n        const yellow = ((1 - calcBlue - key) / (1 - key));\n\n        const cmyk = {}\n        cmyk.cyan = (cyan).toFixed(11);\n        cmyk.magenta = (magenta).toFixed(11);\n        cmyk.yellow = (yellow).toFixed(11);\n        cmyk.key = (key).toFixed(11);\n\n\n        return cmyk;\n    }\n\n    // /**\n    //  * Convert the HTML named color to a RGB color.\n    //  *\n    //  * @param string $name\n    //  *\n    //  * @return int[]\n    //  */\n\n\n    static NameToRGB(name) {\n        let color = ''\n        for (let nameColor of nameColors) {\n            if (nameColor.name === name) {\n                color = nameColor.rgb\n            }\n        }\n        if (color === '') {\n            throw new Error('Color name not found!');\n        }\n        const red = color[0];\n        const green = color[1];\n        const blue = color[2];\n\n\n        return this._roundRGB(red, green, blue);\n    }\n\n    // /**\n    //  * Convert the RGB color to a HTML named color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return string\n    //  */\n\n\n    static RGBToName(red, green, blue) {\n        let color = ''\n        for (const nameColor of nameColors) {\n            if (nameColor.rgb[0] === red && nameColor.rgb[1] === green && nameColor.rgb[2] === blue) {\n                color = nameColor.name\n                return color\n            }\n        }\n        throw new Error('Name for color not found!');\n    }\n\n    // /**\n    //  * Convert the HSL color to a RGB color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $saturation\n    //  * @param float $lightness\n    //  *\n    //  * @return int[]\n    //  */\n\n    static HSLToRGB(hue, saturation, lightness) {\n        // saturation /= 100;\n        // lightness /= 100;\n\n        let c = (1 - Math.abs(2 * lightness - 1)) * saturation,\n            x = c * (1 - Math.abs((hue / 60) % 2 - 1)),\n            m = lightness - c / 2,\n            red = 0,\n            green = 0,\n            blue = 0;\n\n        if (0 <= hue && hue < 60) {\n            red = c; green = x; blue = 0;\n        } else if (60 <= hue && hue < 120) {\n            red = x; green = c; blue = 0;\n        } else if (120 <= hue && hue < 180) {\n            red = 0; green = c; blue = x;\n        } else if (180 <= hue && hue < 240) {\n            red = 0; green = x; blue = c;\n        } else if (240 <= hue && hue < 300) {\n            red = x; green = 0; blue = c;\n        } else if (300 <= hue && hue < 360) {\n            red = c; green = 0; blue = x;\n        }\n        red = Math.abs(((red + m) * 255));\n        green = Math.abs(((green + m) * 255));\n        blue = Math.abs(((blue + m) * 255));\n\n        return this._roundRGB(red, green, blue);;\n    }\n\n    // /**\n    //  * Convert the RGB color to a HSL color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n\n    static RGBToHSL(red, green, blue) {\n        red /= 255;\n        green /= 255;\n        blue /= 255;\n\n        // Find greatest and smallest channel values\n        let cmin = Math.min(red, green, blue),\n            cmax = Math.max(red, green, blue),\n            delta = cmax - cmin,\n            hue = 0,\n            saturation = 0,\n            lightness = 0;\n\n        if (delta === 0)\n            hue = 0;\n        else if (cmax === red)\n            hue = ((green - blue) / delta) % 6;\n\n        else if (cmax === green)\n            hue = (blue - red) / delta + 2;\n\n        else\n            hue = (red - green) / delta + 4;\n\n        hue = Math.round(hue * 60);\n\n        if (hue < 0)\n            hue += 360;\n\n        lightness = (cmax + cmin) / 2;\n\n        saturation = delta === 0 ? 0 : delta / (1 - Math.abs(2 * lightness - 1));\n\n        saturation = +(saturation).toFixed(11);\n        lightness = +(lightness).toFixed(11);\n\n        const hls = {}\n        hls.hue = hue;\n        hls.saturation = saturation;\n        hls.lightness = lightness;\n\n        return hls;\n    }\n\n    // /**\n    //  * Convert the HSLA color to a RGBA color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $saturation\n    //  * @param float $lightness\n    //  * @param float $alpha\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n\n    static HSLAToRGBA(hue, saturation, lightness, alpha) {\n        const rgba = this.HSLToRGB(hue, saturation, lightness);\n        rgba.alpha = alpha\n\n        return rgba;\n    }\n\n    // /**\n    //  * Convert the RGBA color to a HSLA color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * @param float $alpha\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n\n    static RGBAToHSLA(red, green, blue, alpha) {\n        const hsla = this.RGBToHSL(red, green, blue);\n        hsla.alpha = alpha;\n        return hsla;\n    }\n\n    // /**\n    //  * Convert the HSIA color to a RGBA color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $saturation\n    //  * @param float $intensity\n    //  * @param float $alpha\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n\n    static HSIAToRGBA(hue, saturation, intensity, alpha) {\n        const rgba = this.HSIToRGB(hue, saturation, intensity);\n        rgba.alpha = alpha;\n\n        return rgba;\n    }\n\n    // /**\n    //  * Convert the RGBA color to a HSIA color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * @param float $alpha\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n\n    static RGBAToHSIA(red, green, blue, alpha) {\n        const hsia = this.RGBToHSI(red, green, blue);\n        hsia.alpha = alpha;\n\n        return hsia;\n    }\n\n    // /**\n    //  * Convert the HLSA color to a RGBA color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $lightness\n    //  * @param float $saturation\n    //  * @param float $alpha\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n\n    static HLSAToRGBA(hue, lightness, saturation, alpha) {\n        const rgba = this.HLSToRGB(hue, lightness, saturation);\n        rgba.alpha = alpha;\n\n        return rgba;\n    }\n\n    // /**\n    //  * Convert the RGBA color to a HLSA color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * @param float $alpha\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n    static RGBAToHLSA(red, green, blue, alpha) {\n        const hlsa = this.RGBToHLS(red, green, blue);\n        hlsa.alpha = alpha;\n\n        return hlsa;\n    }\n\n    // /**\n    //  * Convert the HSI color to a RGB color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $saturation\n    //  * @param float $intensity\n    //  *\n    //  * @return int[]\n    //  */\n\n\n    static HSIToRGB(hue, saturation, intensity) {\n        return this.HSLToRGB(hue, saturation, intensity);\n    }\n\n    // /**\n    //  * Convert the RGB color to a HSI color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n    static RGBToHSI(red, green, blue) {\n        return this.RGBToHSL(red, green, blue);\n    }\n\n    // /**\n    //  * Convert the HLS color to a RGB color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $lightness\n    //  * @param float $saturation\n    //  *\n    //  * @return int[]\n    //  */\n\n    static HLSToRGB(hue, lightness, saturation) {\n        return this.HSLToRGB(hue, saturation, lightness);\n    }\n\n    // /**\n    //  * Convert the RGB color to a HLS color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n    static RGBToHLS(red, green, blue) {\n        const hsl = this.RGBToHSL(red, green, blue);\n        const hls = {}\n        hls.hue = hsl.hue\n        hls.lightness = hsl.lightness\n        hls.saturation = hsl.saturation\n\n        return hls\n    }\n\n    // /**\n    //  * Convert the HSV color to a RGB color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $saturation\n    //  * @param float $value\n    //  *\n    //  * @return int[]\n    //  */\n\n    static HSVToRGB(hue, saturation, value) {\n        let red = Number;\n        let green = Number;\n        let blue = Number;\n        if (saturation === 0) {\n            red = green = blue = value;\n        } else {\n            if (hue === 360) {\n                hue = 0;\n            } else {\n                hue /= 60;\n            }\n\n            const i = Math.floor(hue);\n            const f = hue - i;\n\n            const p = value * (1.0 - saturation);\n            const q = value * (1.0 - (saturation * f));\n            const t = value * (1.0 - (saturation * (1.0 - f)));\n\n            switch (i) {\n                case 0:\n                    red = value;\n                    green = t;\n                    blue = p;\n                    break;\n                case 1:\n                    red = q;\n                    green = value;\n                    blue = p;\n                    break;\n                case 2:\n                    red = p;\n                    green = value;\n                    blue = t;\n                    break;\n                case 3:\n                    red = p;\n                    green = q;\n                    blue = value;\n                    break;\n                case 4:\n                    red = t;\n                    green = p;\n                    blue = value;\n                    break;\n                default:\n                    red = value;\n                    green = p;\n                    blue = q;\n                    break;\n            }\n        }\n\n        return this._roundRGB(red * 255, green * 255, blue * 255);\n    }\n\n    // /**\n    //  * Convert the RGB color to a HSV color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n    static RGBToHSV(red, green, blue) {\n        const circle = this._prepareRGBToCircle(red, green, blue);\n        const value = circle.max.toFixed(11);\n        let saturation = (circle.max === 0) ? 0 : (circle.d / circle.max);\n        saturation = saturation.toFixed(11);\n        const hsv = {}\n        hsv.hue = circle.hue;\n        hsv.saturation = saturation;\n        hsv.value = value;\n\n        return hsv\n    }\n\n    // /**\n    //  * Convert the HSB color to a RGB color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $saturation\n    //  * @param float $brightness\n    //  *\n    //  * @return array\n    //  */\n\n\n    static HSBToRGB(hue, saturation, brightness) {\n        return this.HSVToRGB(hue, saturation, brightness);\n    }\n\n    // /**\n    //  * Convert the RGB color to a HSB color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]|float[]\n    //  */\n    static RGBToHSB(red, green, blue) {\n        return this.RGBToHSV(red, green, blue);\n    }\n\n    // /**\n    //  * Convert the RGB color to a RGB color from the safe color list.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]\n    //  */\n\n    static RGBToSafe(red, green, blue) {\n        const colors = websafe_colors;\n        let nearest = colors.shift();\n        let shortest_distance = this._getRGBDistance(red, green, blue, ...nearest);\n        colors.forEach(color => {\n            let current_distance = this._getRGBDistance(red, green, blue, ...color);\n            if (current_distance < shortest_distance) {\n                shortest_distance = current_distance;\n                nearest = color;\n            }\n        })\n\n        return this._roundRGB(...nearest);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * @return array\n    //  */\n\n    static RGBToCMY(red, green, blue) {\n        const cyan = 1 - (red / 255);\n        const magenta = 1 - (green / 255);\n        const yellow = 1 - (blue / 255);\n        const cmy = {};\n        cmy.cyan = cyan;\n        cmy.magenta = magenta;\n        cmy.yellow = yellow;\n\n        return cmy;\n    }\n\n    // /**\n    //  * @param float $cyan\n    //  * @param float $magenta\n    //  * @param float $yellow\n    //  * @return int[]\n    //  */\n\n\n    static CMYToRGB(cyan, magenta, yellow) {\n        const red = (1 - cyan) * 255;\n        const green = (1 - magenta) * 255;\n        const blue = (1 - yellow) * 255;\n\n        return this._roundRGB(red, green, blue);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * X, Y and Z output refer to a D65/2° standard illuminant.\n    //  * @return array\n    //  */\n\n    static RGBToXYZ(red, green, blue) {\n        const redCulc = this._prepareColorToXYZConversion(red);\n        const greenCulc = this._prepareColorToXYZConversion(green);\n        const blueCulc = this._prepareColorToXYZConversion(blue);\n\n        const X = redCulc * 0.4124 + greenCulc * 0.3576 + blueCulc * 0.1805;\n        const Y = redCulc * 0.2126 + greenCulc * 0.7152 + blueCulc * 0.0722;\n        const Z = redCulc * 0.0193 + greenCulc * 0.1192 + blueCulc * 0.9505;\n\n        const xyz = {};\n        xyz.X = X;\n        xyz.Y = Y;\n        xyz.Z = Z;\n        return xyz;\n    }\n\n    // /**\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $X\n    //  * @param float $Y\n    //  * @param float $Z\n    //  * @return array\n    //  */\n\n    static XYZToRGB(X, Y, Z) {\n        X = X / 100;\n        Y = Y / 100;\n        Z = Z / 100;\n\n        let red = X * 3.2406 + Y * -1.5372 + Z * -0.4986;\n        let green = X * -0.9689 + Y * 1.8758 + Z * 0.0415;\n        let blue = X * 0.0557 + Y * -0.2040 + Z * 1.0570;\n\n        red = this._prepareColorForXYZToRGBOutput(red);\n        green = this._prepareColorForXYZToRGBOutput(green);\n        blue = this._prepareColorForXYZToRGBOutput(blue);\n\n        return this._roundRGB(red, green, blue);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * @return array\n    //  */\n\n\n    static RGBToYxy(red, green, blue) {\n        const { X, Y, Z } = this.RGBToXYZ(red, green, blue);\n        const x = X / (X + Y + Z);\n        const y = Y / (X + Y + Z);\n\n        const yxy = {};\n        yxy.Y = Y;\n        yxy.x = x;\n        yxy.y = y;\n        return yxy;\n    }\n\n    // /**\n    //  * @param float $Y\n    //  * @param float $x\n    //  * @param float $y\n    //  * @return array\n    //  */\n\n    static YxyToRGB(Y, x, y) {\n        const X = x * (Y / y);\n        const Z = (1 - x - y) * (Y / y);\n\n        return this.XYZToRGB(X, Y, Z);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $refX\n    //  * @param float|int $refY\n    //  * @param float $refZ\n    //  * @return array\n    //  */\n\n    static RGBToLab(\n        red,\n        green,\n        blue,\n        refX = 95.047,\n        refY = 100,\n        refZ = 108.883\n    ) {\n        let { X, Y, Z } = this.RGBToXYZ(red, green, blue);\n        X = X / refX;\n        Y = Y / refY;\n        Z = Z / refZ;\n\n        X = X > 0.008856 ? Math.pow(X, 1 / 3) : (7.787 * X) + (16 / 116);\n        Y = Y > 0.008856 ? Math.pow(Y, 1 / 3) : (7.787 * Y) + (16 / 116);\n        Z = Z > 0.008856 ? Math.pow(Z, 1 / 3) : (7.787 * Z) + (16 / 116);\n\n        const L = (116 * Y) - 16;\n        const a = 500 * (X - Y);\n        const b = 200 * (Y - Z);\n\n        const lab = {};\n        lab.L = L;\n        lab.a = a;\n        lab.b = b;\n\n        return lab;\n    }\n\n    // /**\n    //  * @param float $L\n    //  * @param float $a\n    //  * @param float $b\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $refX\n    //  * @param float|int $refY\n    //  * @param float $refZ\n    //  * @return int[]\n    //  */\n\n    static LabToRGB(\n        L,\n        a,\n        b,\n        refX = 95.047,\n        refY = 100,\n        refZ = 108.883\n    ) {\n        let Y = (L + 16) / 116;\n        let X = a / 500 + Y;\n        let Z = Y - b / 200;\n\n        Y = Math.pow(Y, 3) > 0.008856 ? Math.pow(Y, 3) : (Y - 16 / 116) / 7.787;\n        X = Math.pow(X, 3) > 0.008856 ? Math.pow(X, 3) : (X - 16 / 116) / 7.787;\n        Z = Math.pow(Z, 3) > 0.008856 ? Math.pow(Z, 3) : (Z - 16 / 116) / 7.787;\n\n        X = X * refX;\n        Y = Y * refY;\n        Z = Z * refZ;\n\n        return this.XYZToRGB(X, Y, Z);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * @return array\n    //  */\n\n    static RGBToLCH(red, green, blue) {\n        let { L, a, b } = this.RGBToLab(red, green, blue);\n        let H = Math.atan2(b, a);\n        H = H > 0 ? (H / Math.PI) * 180 : 360 - (Math.abs(H) / Math.PI) * 180;\n\n        L = L.toFixed(4);\n        const C = (Math.sqrt((Math.pow(a, 2) + Math.pow(b, 2)))).toFixed(4);\n        H = Math.floor(H % 360);\n        const lch = {};\n        lch.L = L;\n        lch.C = C;\n        lch.H = H;\n\n        return lch;\n    }\n\n    // /**\n    //  * @param float $L\n    //  * @param float $C\n    //  * @param float $H - range = 0 ÷ 360°\n    //  * @return array\n    //  */\n\n    static LCHToRGB(L, C, H) {\n        const radiansH = (Math.PI * H) / 180;\n        const a = Math.cos(radiansH) * C;\n        const b = Math.sin(radiansH) * C;\n\n        return this.LabToRGB(L, a, b);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $refX\n    //  * @param float|int $refY\n    //  * @param float $refZ\n    //  * @return array\n    //  */\n\n    static RGBToHunterLab(\n        red,\n        green,\n        blue,\n        refX = 95.047,\n        refY = 100,\n        refZ = 108.883\n    ) {\n        const { X, Y, Z } = this.RGBToXYZ(red, green, blue);\n        const Ka = (175 / 198.04) * (refY + refX);\n        const Kb = (70 / 218.11) * (refY + refZ);\n\n        const Hunter_L = 100 * Math.sqrt(Y / refY);\n        const Hunter_a = Ka * (((X / refX) - (Y / refY)) / Math.sqrt(Y / refY));\n        const Hunter_b = Kb * (((Y / refY) - (Z / refZ)) / Math.sqrt(Y / refY));\n\n        const hunterLab = {};\n        hunterLab.Hunter_L = Hunter_L;\n        hunterLab.Hunter_a = Hunter_a;\n        hunterLab.Hunter_b = Hunter_b;\n\n        return hunterLab;\n    }\n\n    // /**\n    //  * @param float $Hunter_L\n    //  * @param float $Hunter_a\n    //  * @param float $Hunter_b\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $refX\n    //  * @param float|int $refY\n    //  * @param float $refZ\n    //  * @return array\n    //  */\n\n    static HunterLabToRGB(\n        Hunter_L,\n        Hunter_a,\n        Hunter_b,\n        refX = 95.047,\n        refY = 100,\n        refZ = 108.883\n    ) {\n        const Ka = (175.0 / 198.04) * (refY + refX);\n        const Kb = (70.0 / 218.11) * (refY + refZ);\n\n        const Y = Math.pow((Hunter_L / refY), 2) * 100;\n        const X = (Hunter_a / Ka * Math.sqrt(Y / refY) + (Y / refY)) * refX;\n        const Z = - (Hunter_b / Kb * Math.sqrt(Y / refY) - (Y / refY)) * refZ;\n\n        return this.XYZToRGB(X, Y, Z);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $refX\n    //  * @param float|int $refY\n    //  * @param float $refZ\n    //  * @return array\n    //  */\n\n    static RGBToLuv(\n        red,\n        green,\n        blue,\n        refX = 95.047,\n        refY = 100,\n        refZ = 108.883\n    ) {\n        let { X, Y, Z } = this.RGBToXYZ(red, green, blue);\n\n        const U = (4 * X) / (X + (15 * Y) + (3 * Z));\n        const V = (9 * Y) / (X + (15 * Y) + (3 * Z));\n        Y /= 100;\n        Y = Y > 0.008856 ? Math.pow(Y, 1 / 3) : (7.787 * Y) + (16 / 116);\n\n        const refU = (4 * refX) / (refX + (15 * refY) + (3 * refZ));\n        const refV = (9 * refY) / (refX + (15 * refY) + (3 * refZ));\n\n        const L = (116 * Y) - 16;\n        const u = 13 * L * (U - refU);\n        const v = 13 * L * (V - refV);\n\n        const luv = {};\n        luv.L = L;\n        luv.u = u;\n        luv.v = v;\n\n        return luv;\n    }\n\n    // /**\n    //  * @param float $L\n    //  * @param float $u\n    //  * @param float $v\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $refX\n    //  * @param float|int $refY\n    //  * @param float $refZ\n    //  * @return int[]\n    //  */\n\n    static LuvToRGB(\n        L,\n        u,\n        v,\n        refX = 95.047,\n        refY = 100,\n        refZ = 108.883\n    ) {\n        let Y = (L + 16) / 116;\n        Y = Math.pow(Y, 3) > 0.008856 ? Math.pow(Y, 3) : ((Y - 16 / 116) / 7.787);\n\n        const refU = (4 * refX) / (refX + (15 * refY) + (3 * refZ));\n        const refV = (9 * refY) / (refX + (15 * refY) + (3 * refZ));\n\n        const U = u / (13 * L) + refU;\n        const V = v / (13 * L) + refV;\n\n        Y *= 100;\n        const X = - (9 * Y * U) / ((U - 4) * V - U * V);\n        const Z = (9 * Y - (15 * V * Y) - (V * X)) / (3 * V);\n\n        return this.XYZToRGB(X, Y, Z);\n    }\n\n    // /**\n    //  * @param $color\n    //  * @return float\n    //  */\n\n    static _prepareColorForXYZToRGBOutput(color) {\n        const colors = (color > 0.0031308) ? (1.055 * Math.pow(color, (1 / 2.4)) - 0.055) : (12.92 * color);\n\n        return colors * 255;\n    }\n\n    // /**\n    //  * @param int $color\n    //  * @return float\n    //  */\n\n    static _prepareColorToXYZConversion(color) {\n        let colorCulc = color / 255;\n        colorCulc = colorCulc > 0.04045 ? Math.pow(((colorCulc + 0.055) / 1.055), 2.4) : colorCulc / 12.92;\n        colorCulc *= 100;\n\n        return colorCulc;\n    }\n\n    // /**\n    //  * Rounds the RGB colors to integers.\n    //  *\n    //  * @param int|float $red\n    //  * @param int|float $green\n    //  * @param int|float $blue\n    //  *\n    //  * @return int[]\n    //  */\n\n    static _roundRGB(red, green, blue) {\n        red = Math.round(red);\n        green = Math.round(green);\n        blue = Math.round(blue);\n        const rgb = {};\n        rgb.red = red;\n        rgb.green = green;\n        rgb.blue = blue;\n\n        return rgb\n    }\n\n    // /**\n    //  * Prepares RGB to HLS/HSB conversion.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n    static _prepareRGBToCircle(red, green, blue) {\n        red /= 255;\n        green /= 255;\n        blue /= 255;\n\n        const max = Math.max(red, green, blue);\n        const min = Math.min(red, green, blue);\n        const d = max - min;\n        let hue = d\n\n        if (d !== 0) {\n            if (max === red) {\n                hue = ((green - blue) / d) % 6;\n            } else if (max === green) {\n                hue = 2 + (blue - red) / d;\n            } else {\n                hue = 4 + (red - green) / d;\n            }\n            hue = Math.round(hue * 60);\n            if (hue < 0) {\n                hue = 360 + hue;\n            }\n        } else {\n            hue = 0;\n        }\n\n        const result = {};\n        result.min = min;\n        result.max = max;\n        result.d = d;\n        result.hue = hue;\n\n        return result;\n    }\n\n    // /**\n    //  * Prepare Hue value to RGB conversion.\n    //  *\n    //  * @param $v1\n    //  * @param $v2\n    //  * @param $vH\n    //  *\n    //  * @return float\n    //  */\n\n    static _HueToRGB(v1, v2, vH) {\n        if (vH < 0) {\n            ++vH;\n        }\n\n        if (vH > 1) {\n            --vH;\n        }\n\n        if ((6 * vH) < 1) {\n            return (v1 + (v2 - v1) * 6 * vH);\n        }\n\n        if ((2 * vH) < 1) {\n            return v2;\n        }\n\n        if ((3 * vH) < 2) {\n            return (v1 + (v2 - v1) * ((2.0 / 3) - vH) * 6);\n        }\n\n        return v1;\n    }\n\n    // /**\n    //  * Return distance between two RGB colors.\n    //  *\n    //  * @param int $r0\n    //  * @param int $g0\n    //  * @param int $b0\n    //  * @param int $r1\n    //  * @param int $g1\n    //  * @param int $b1\n    //  *\n    //  * @return int\n    //  */\n\n    static _getRGBDistance(r1, g1, b1, r0, g0, b0,) {\n        const diff = Math.abs(r0 - r1);\n        const diff1 = diff + Math.abs(g0 - g1);\n        const diff2 = diff1 + Math.abs(b0 - b1);\n\n        return diff2;\n    }\n}\n","import Converter from './converter.js'\n\nexport default class Color {\n    constructor() {\n        this.red = 255;\n        this.green = 255;\n        this.blue = 255;\n        this.alpha = 1;\n        this.bgRed = 255;\n        this.bgGreen = 255;\n        this.bgBlue = 255;\n    }\n\n    setRGB(red, green, blue) {\n        this.red = red;\n        this.green = green;\n        this.blue = blue;\n\n        this.resetAlpha();\n\n        return this._checkColor();\n    }\n\n    getRGB(val = '') {\n        let rgb = {};\n        if (this.alpha !== 1.0) {\n            rgb = Converter.RGBAToRGB(\n                this.red,\n                this.green,\n                this.blue,\n                this.alpha,\n                this.bgRed,\n                this.bgGreen,\n                this.bgBlue\n            );\n        } else {\n            rgb = this._compactColor(this.red, this.green, this.blue);\n        }\n\n        return this.getRGBValue(rgb, val);\n    }\n\n    setAlpha(alpha) {\n        this.alpha = alpha;\n\n        return this._checkAlpha();\n    }\n\n    getAlpha() {\n        return this.alpha;\n    }\n\n    setBgRGB(red, green, blue) {\n        this.bgRed = red;\n        this.bgGreen = green;\n        this.bgBlue = blue;\n\n        return this._checkBgColor();\n    }\n\n    getBgRGB(val = '') {\n        const rgb = this._compactColor(this.bgRed, this.bgGreen, this.bgBlue);\n\n        return this.getRGBValue(rgb, val);\n    }\n\n    getRGBValue(rgb, val = '') {\n        switch (val) {\n            case 'r':\n            case 'red':\n                return rgb = rgb['red'];\n            case 'g':\n            case 'green':\n                return rgb = rgb['green'];\n            case 'b':\n            case 'blue':\n                return rgb = rgb['blue'];\n            default:\n                return rgb;\n        }\n    }\n\n    setRGBA(\n        red,\n        green,\n        blue,\n        alpha,\n        bgRed = 255,\n        bgGreen = 255,\n        bgBlue = 255\n    ) {\n        this.setRGB(red, green, blue)\n            .setAlpha(alpha)\n            .setBgRGB(bgRed, bgGreen, bgBlue);\n\n        return this;\n    }\n\n    getRGBA() {\n        return this._compactColor(this.red, this.green, this.blue, this.alpha);\n    }\n\n    setHEX(hex) {\n        hex = hex.toLowerCase().trim();\n        switch (hex.length) {\n            case 1:\n                hex = hex + hex + hex + hex + hex + hex;\n                break;\n            case 2:\n                hex = hex[0] + hex[1] + hex[0] + hex[1] + hex[0] + hex[1];\n                break;\n            case 3:\n                hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n                break;\n            case 6:\n                break;\n            default:\n                throw new Error('Invalid HEX length!');\n        }\n        const rgb = Converter.HEXToRGB(hex);\n\n        this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n\n        return this;\n    }\n\n    getHEX() {\n        const rgb = this.getRGB();\n        return Converter.RGBToHEX(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setCMYK(cyan, magenta, yellow, key) {\n        const rgb = Converter.CMYKToRGB(cyan, magenta, yellow, key);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getCMYK() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToCMYK(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setCMY(cyan, magenta, yellow) {\n        const rgb = Converter.CMYToRGB(cyan, magenta, yellow);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n\n    }\n\n    getCMY() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToCMY(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setHLSA(hue, lightness, saturation, alpha) {\n        const rgba = Converter.HLSAToRGBA(hue, lightness, saturation, alpha);\n\n        return this.setRGBA(rgba['red'], rgba['green'], rgba['blue'], rgba['alpha']);\n    }\n\n    getHLSA() {\n        const rgb = this.getRGBA();\n\n        return Converter.RGBAToHLSA(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setHLS(hue, lightness, saturation) {\n        const rgb = Converter.HLSToRGB(hue, lightness, saturation);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getHLS() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToHLS(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setHSB(hue, saturation, brightness) {\n        const rgb = Converter.HSBToRGB(hue, saturation, brightness);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getHSB() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToHSB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setName(name) {\n        const rgb = Converter.NameToRGB(name);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getName() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToName(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setHSL(hue, saturation, lightness) {\n        const rgb = Converter.HSLToRGB(hue, saturation, lightness);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getHSL() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToHSL(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setHSI(hue, saturation, intensity) {\n        return this.setHSL(hue, saturation, intensity);\n    }\n\n    getHSI() {\n        return this.getHSL();\n    }\n\n    setHSLA(hue, saturation, lightness, alpha) {\n        const rgb = Converter.HSLToRGB(hue, saturation, lightness);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']).setAlpha(alpha);\n    }\n\n    getHSLA() {\n        const rgba = this.getRGBA();\n\n        return Converter.RGBAToHSLA(rgba['red'], rgba['green'], rgba['blue'], rgba['alpha']);\n    }\n\n    setHSIA(hue, saturation, lightness, alpha) {\n        const rgb = Converter.HSIToRGB(hue, saturation, lightness);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']).setAlpha(alpha);\n    }\n\n    getHSIA() {\n        const rgba = this.getRGBA();\n\n        return Converter.RGBAToHSIA(rgba['red'], rgba['green'], rgba['blue'], rgba['alpha']);\n    }\n\n    setSafe() {\n        const rgb = this.getSafe();\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getSafe() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToSafe(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setXYZ(X, Y, Z) {\n        const rgb = Converter.XYZToRGB(X, Y, Z);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getXYZ() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToXYZ(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setLab(L, a, b) {\n        const rgb = Converter.LabToRGB(L, a, b);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getLab() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToLab(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setLCH(L, C, H) {\n        const rgb = Converter.LCHToRGB(L, C, H);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getLCH() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToLCH(rgb['red'], rgb['green'], rgb['blue']);\n    }\n    setYxy(Y, x, y) {\n        const rgb = Converter.YxyToRGB(Y, x, y);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getYxy() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToYxy(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setHunterLab(L, a, b) {\n        const rgb = Converter.HunterLabToRGB(L, a, b);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getHunterLab() {\n        const rgb = this.getRGB()\n\n        return Converter.RGBToHunterLab(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setHSV(H, S, V) {\n        const rgb = Converter.HSVToRGB(H, S, V);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getHSV() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToHSV(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setLuv(L, u, v) {\n        const rgb = Converter.LuvToRGB(L, u, v);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getLuv() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToLuv(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setRandom() {\n        const rgb = this.getRandom();\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getRandom() {\n        return this._compactColor(Math.floor(Math.random() * 255), Math.floor(Math.random() * 255), Math.floor(Math.random() * 255));\n    }\n\n    resetAlpha() {\n        return this.setAlpha(1.0).setBgRGB(255, 255, 255);\n    }\n\n    _checkColor() {\n        if (!this._isRGBValid(this.red, this.green, this.blue)) {\n            throw new Error('Invalid background color value!');\n        }\n\n        return this;\n    }\n\n    _checkAlpha() {\n        if (this.alpha < 0 || this.alpha > 1) {\n            throw new Error('Invalid alpha value!');\n        }\n\n        return this;\n    }\n\n    _checkBgColor() {\n        if (!this._isRGBValid(this.bgRed, this.bgGreen, this.bgBlue)) {\n            throw new Error('Invalid background color value!');\n        }\n\n        return this;\n    }\n\n    _isRGBValid(red, green, blue) {\n        return red >= 0 && red <= 255\n            && green >= 0 && green <= 255\n            && blue >= 0 && blue <= 255;\n    }\n\n    _compactColor(red, green, blue, alpha = null) {\n        const result = {}\n        result.red = red;\n        result.green = green;\n        result.blue = blue;\n\n        if (alpha === null) {\n            return result;\n        }\n        result.alpha = alpha;\n        return result;\n    }\n\n}\n\n\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from 'react';\nimport Hue from '@uiw/react-color-hue';\nimport Saturation from '@uiw/react-color-saturation';\nimport { Section } from 'components/ui/Section/Section';\nimport {\n  ColorDisplay,\n  WrappeSaturation,\n  WrapperColorPicker,\n  WrapperColorPickerSection,\n  WrapperHue,\n} from './colorPicker.styled';\nimport ConverterColor from 'components/Converter/ConverterColor';\nimport Color from 'js/color';\n\nconst ColorPicker = () => {\n  const [hsva, setHsva] = useState({ h: 0, s: 0, v: 0, a: 1 });\n  const [bgRGB, setBgRGB] = useState('');\n  const color = new Color();\n\n  // const bgOb = color.getRGB();\n  // console.log(bgOb);\n\n  // function setColor() {\n  //   const bgString = `rgb(${bgOb.red}, ${bgOb.green}, ${bgOb.blue})`;\n  //   setBgRGB(bgString);\n  // }\n\n  function colorClass() {\n    color.setHSV(hsva.h, hsva.s / 100, hsva.v / 100);\n    const result = color.getRGB();\n    color.setBgRGB(result.red, result.green, result.blue);\n    const bgOb = color.getBgRGB();\n    const bgString = `rgb(${bgOb.red}, ${bgOb.green}, ${bgOb.blue})`;\n    setBgRGB(bgString);\n  }\n\n  // useEffect(() => {\n  //   setColor();\n  // }, [bgOb]);\n\n  useEffect(() => {\n    colorClass();\n  }, [hsva]);\n\n  return (\n    <Section>\n      <WrapperColorPickerSection>\n        <WrapperColorPicker>\n          <ColorDisplay style={{ backgroundColor: bgRGB }} />\n          <WrapperHue>\n            <Hue\n              hue={hsva.h}\n              direction=\"vertical\"\n              width={18}\n              height={225}\n              onChange={newHue => {\n                setHsva({ ...hsva, ...newHue });\n              }}\n            />\n          </WrapperHue>\n          <WrappeSaturation>\n            <Saturation\n              style={{ width: '582px', height: '225px' }}\n              hsva={hsva}\n              onChange={newColor => {\n                setHsva({ ...hsva, ...newColor, a: hsva.a });\n              }}\n            />\n          </WrappeSaturation>\n        </WrapperColorPicker>\n        <ConverterColor color={color} />\n      </WrapperColorPickerSection>\n    </Section>\n  );\n};\n\nexport default ColorPicker;\n","import styled from 'styled-components';\n\n\nexport const MainTeg = styled.main``\n","import styled from 'styled-components';\n\n\nexport const TextStart = styled.p``\n\nexport const WraperTextStart = styled.div`\n\ndisplay:flex;\njustify-content: space-between;\nalign-items:center;\n`","import { Section } from 'components/ui/Section/Section';\nimport { TextStart, WraperTextStart } from './DescriptionText.styled';\n\nconst TextDescription = () => {\n  return (\n    <Section>\n      <WraperTextStart>\n        <TextStart>\n          С помощью универсального конвертер цветов вы можете легко перевести\n          цвет из одной цветовой модели в ряд других.\n          <br />\n          В первую очередь, калькулятор служит для удобной работы с современными\n          форматами CSS3-цветов.\n          <br />\n          Поддерживается конвертация из HEX в RGB/RGBA и HSL/HSLA, RGB в CMYK,\n          XYZ, LAB, и обратно.\n          <br />А также специальный функционал для замещения альфа-канала при\n          переводе цвета из RGBA в RGB (и HSLA в HSL).\n        </TextStart>\n      </WraperTextStart>\n    </Section>\n  );\n};\n\nexport default TextDescription;\n","import ColorPicker from 'components/colorPicker/colorPicker';\nimport { MainTeg } from './Main.styled';\nimport TextDescription from 'components/DescriptionText/DescriptionText';\n\nconst Main = () => {\n  return (\n    <MainTeg>\n      <TextDescription />\n      <ColorPicker />\n    </MainTeg>\n  );\n};\n\nexport default Main;\n","import { Wraper } from './Home.styled';\nimport Main from 'main/Main';\n\nconst Home = () => {\n  return (\n    <Wraper>\n      <Main />\n    </Wraper>\n  );\n};\n\nexport default Home;\n"],"names":["Wraper","styled","Sections","Section","children","WrapperColorPickerSection","WrapperColorPicker","WrapperHue","ColorDisplay","WrappeSaturation","ListNameColor","ItemtColorMenu","target","colorPalette","palette","onClick","WrraperListColum","BtnPicker","InputColor","WrraperOnverter","WrraperInput","WrraperRightsBtnGroup","getColor","color","options","result","getRGB","getRGBA","getHEX","getCMYK","getName","getHSL","getHSLA","getHSIA","getHLSA","getHSI","getHLS","getHSV","getHSB","getSafe","getCMY","getXYZ","getYxy","getLab","getLCH","getHunterLab","getLuv","useState","colorInput","setColorInput","colorInputSecond","setColorInputSecond","colorInputThird","setColorInputThird","colorInputFourth","setColorInputFourth","rightsInput","setrRightsInput","isVisible","setIsVisible","isVisibleRights","setIsVisibleRights","activMenu","setActivMenu","rightsActivMenu","setRightsActivMenu","flowerSystem","setFlowerSystem","flowerSystemSecond","setFlowerSystemSecond","flowerSystemThird","setFlowerSystemThird","flowerSystemFourth","setFlowerSystemFourth","rightsFlowerSystem","setRightsFlowerSystem","rightsFlowerSystemSecond","setRightsFlowerSystemSecond","rightsFlowerSystemThird","setRightsFlowerSystemThird","rightsFlowerSystemFourth","setRightsFlowerSystemFourth","activInputRights","console","log","nameActivMenu","colorInputValue","activColorInputValue","activFlower","activFlowerSystemt","visibli","rightsVisibli","activ","event","currentTarget","id","rightsActiv","useEffect","colorConverter","inputOne","colorEl","split","setRGB","setAlpha","setHEX","error","setCMYK","setName","trim","setHSL","setHSLA","setHSIA","setHLSA","setHSI","setHLS","setHSV","setHSB","setCMY","setXYZ","setYxy","setLab","setHunterLab","setLuv","columnConvert","Object","values","map","i","e","innerText","type","name","value","onChange","readOnly","Converter","red","green","blue","alpha","bgRed","bgGreen","bgBlue","this","_roundRGB","rgba","hex","exec","rgb","parseInt","toString","slice","cyan","magenta","yellow","key","Math","round","calcRed","calcGreen","calcBlue","max","cmyk","toFixed","nameColors","nameColor","Error","hue","saturation","lightness","c","abs","x","m","cmin","min","cmax","delta","hls","HSLToRGB","hsla","RGBToHSL","intensity","HSIToRGB","hsia","RGBToHSI","HLSToRGB","hlsa","RGBToHLS","hsl","Number","floor","f","p","q","t","circle","_prepareRGBToCircle","d","hsv","brightness","HSVToRGB","RGBToHSV","colors","websafe_colors","nearest","shift","shortest_distance","_getRGBDistance","forEach","current_distance","cmy","redCulc","_prepareColorToXYZConversion","greenCulc","blueCulc","X","Y","Z","xyz","_prepareColorForXYZToRGBOutput","RGBToXYZ","y","yxy","XYZToRGB","refX","refY","refZ","pow","L","a","b","lab","RGBToLab","H","atan2","PI","C","sqrt","lch","radiansH","cos","sin","LabToRGB","Ka","Kb","Hunter_L","Hunter_a","Hunter_b","hunterLab","U","V","refU","refV","u","v","luv","colorCulc","v1","v2","vH","r1","g1","b1","r0","g0","b0","Color","resetAlpha","_checkColor","val","RGBAToRGB","_compactColor","getRGBValue","_checkAlpha","_checkBgColor","setBgRGB","toLowerCase","length","HEXToRGB","RGBToHEX","CMYKToRGB","RGBToCMYK","CMYToRGB","RGBToCMY","HLSAToRGBA","setRGBA","RGBAToHLSA","HSBToRGB","RGBToHSB","NameToRGB","RGBToName","RGBAToHSLA","RGBAToHSIA","RGBToSafe","LCHToRGB","RGBToLCH","YxyToRGB","RGBToYxy","HunterLabToRGB","RGBToHunterLab","S","LuvToRGB","RGBToLuv","getRandom","random","_isRGBValid","h","s","hsva","setHsva","bgRGB","bgOb","getBgRGB","bgString","colorClass","style","backgroundColor","direction","width","height","newHue","newColor","MainTeg","TextStart","WraperTextStart"],"sourceRoot":""}