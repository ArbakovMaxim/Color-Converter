{"version":3,"file":"static/js/268.7686fb56.chunk.js","mappings":"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","sources":["pages/Home.styled.js","components/ui/Section/Section.styled.js","components/ui/Section/Section.jsx","components/colorPicker/colorPicker.styled.js","components/listColorsMenu/listColorsMenu.styled.js","util/colorPalette.js","components/listColorsMenu/listColorsMenu.jsx","components/Converter/ConverterColor.styled.js","components/colorsInputPicker/colorsInputPicker.styled.js","components/colorsInputPicker/colorsInputPicker.jsx","util/getColor.js","components/Converter/ConverterColor.jsx","util/ActivElement/activInputNameOrHEX.js","util/ActivElement/ActivSetInputNameOrHEX.js","util/ActivElement/activColorInput.js","util/ActivElement/nameActivMenu.js","util/ActivElement/activColorInputValue.js","util/ActivElement/activFlowerSystemt.js","util/ActivElement/actinInput.js","util/ActivElement/activInputSecond.js","util/ActivElement/activInputThird.js","util/ActivElement/activInputFourth.js","util/ActivElement/activSetInputs.js","util/ActivElement/activSetInputsSecond.js","util/ActivElement/activSetInputsThird.js","util/ActivElement/activSetInputsFourth.js","util/saturationToInput.js","util/ColumnConvert.js","components/colorReference/ColorReference.styled.js","components/colorModelDescription/ColorModel.styled.js","components/colorModelDescription/RGB.jsx","components/colorModelDescription/RGBA.jsx","components/colorModelDescription/HEX.jsx","components/colorModelDescription/CMYK.jsx","components/colorModelDescription/Name.jsx","components/colorModelDescription/HSL.jsx","components/colorModelDescription/HSLA.jsx","components/colorModelDescription/HSIA.jsx","components/colorModelDescription/HLSA.jsx","components/colorModelDescription/HSI.jsx","components/colorModelDescription/HLS.jsx","components/colorModelDescription/HSV.jsx","components/colorModelDescription/HSB.jsx","components/colorModelDescription/Safe.jsx","components/colorModelDescription/CMY.jsx","components/colorModelDescription/XYZ.jsx","components/colorModelDescription/Yxy.jsx","components/colorModelDescription/Lab.jsx","components/colorModelDescription/LCH.jsx","components/colorModelDescription/HunterLab.jsx","components/colorReference/ColorReference.jsx","util/ActivElement/activColorModel.js","components/colorPicker/colorPicker.jsx","hook/useResize.jsx","components/main/Main.styled.js","components/DescriptionText/DescriptionText.styled.js","components/DescriptionText/DescriptionText.jsx","components/main/Main.jsx","pages/Home.jsx","style/useTheme.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wraper = styled.div`\n  width-max:1440px;\n  height-max: 100%;\n  padding-left: 147px;\n    padding-right: 147px;\nbackground-color: ${props => props.theme.backgroundBasic};\n@media (max-width: 1050px) {\n    padding-left: 50px;\n    padding-right: 50px;\n  }\n  @media (max-width: 768px) {\n    padding-left: 25px;\n    padding-right: 25px;\n  }\n  @media (max-width: 500px) {\n    padding-left: 5px;\n    padding-right: 5px;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Sections = styled.section`\n padding: 30px 0px;\n`;\n","import { Sections } from './Section.styled';\n\nexport const Section = ({ children }) => {\n  return <Sections>{children}</Sections>;\n};\n","import styled from 'styled-components';\n\n\nexport const WrapperColorPickerSection = styled.div`\nmax-width: 960px;\nbackground-color: ${props => props.theme.backgroundSecond};\npadding-bottom: 53px;\npadding-left:87px;\npadding-right:110px;\npadding-top: 38px;\n@media (max-width: 500px) {\n   padding:28px 20px 47px 24px;\n  }\n`\n\n\nexport const WrapperColorPicker = styled.div`\ndisplay:flex;\npadding-bottom:55px;\n`\n\nexport const ErrorMessage = styled.div`\ntext-align:center;\nmargin-top:10px;\npadding:10px;\nfont-weight: 300;\nfont-size: 18px;\nline-height: 30px;\ncolor:${props => props.theme.basicText};\nbackground-color:${props => props.theme.backgroundBasic};\n\n\n`\n\nexport const Wrapper = styled.div`\nflex-direction: row-reverse;\ndisplay:flex;\n@media (max-width: 495px) {\n  display:block;\n  }\n`\nexport const WrapperHue = styled.div`\nmargin-left:5vw;\n@media (max-width: 500px) {\n  margin-left:12px;\n  margin-top :6px;\n  }\n`\nexport const ColorDisplay = styled.div`\nmin-width:103px;\nwidth:225px;\nheight:225px;\n@media (max-width: 500px) {\n  width:103px;\n  height:180px;\n  }\n\n`\nexport const WrappeSaturation = styled.div`\nmax-width:100%;\nmargin-left:12px;\n`\n","import styled from \"styled-components\";\n\nexport const ListNameColor = styled.ul`\nposition: absolute;\npadding-top:21px;\npadding-left:30px;\npadding-right:61px;\n\ndisplay:flex;\nflex-direction: column;\nflex-wrap: wrap;\nheight: 225px;\nwidth: 435px;\n&:not(:last-child) {\n    gap-right:46px;;\n  }\n  @media (max-width: 500px) {\n  width: 320px;\n  padding-top:21px;\n  padding-left:10px;\n  padding-right:10px;\n }\n`\n\nexport const ItemtColorMenu = styled.li`\nposition: relative;\nwidth : auto;\nheight:35px;\nlist-style-type: none;\nfont-family: 'Roboto';\nfont-style: normal;\nfont-weight: 300;\nfont-size: 16px;\nline-height: 35px;\n`","const colorPalette = [\n    'RGB',\n    'RGBA',\n    'HEX',\n    'CMYK',\n    'Name',\n    'HSL',\n    'HSLA',\n    'HSIA',\n    'HLSA',\n    'HSI',\n    'HLS',\n    'HSV',\n    'HSB',\n    'Safe',\n    'CMY',\n    'XYZ',\n    'Yxy',\n    'Lab',\n    'LCH',\n    'HunterLab',\n    'Luv'\n];\n\nexport default colorPalette\n    ;","import { ItemtColorMenu, ListNameColor } from './listColorsMenu.styled';\nimport colorPalette from '../../util/colorPalette';\n// import { useEffect, useState } from 'react';\n\nconst ListColorMenu = ({ target }) => {\n  return (\n    <ListNameColor>\n      {colorPalette.map(palette => (\n        <ItemtColorMenu key={palette} onClick={target}>\n          {palette}\n        </ItemtColorMenu>\n      ))}\n    </ListNameColor>\n  );\n};\n\nexport default ListColorMenu;\n","import styled from \"styled-components\";\n\nexport const WrraperConverter = styled.div`\ndisplay: flex;\n@media (max-width: 1419px) {\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  }\n`\n\nexport const WrraperListColum = styled.div`\nheight: 245px;\nwidth: 437px;\nmax-width:100%;\nbackground-color: #D9D9D9;\nposition: absolute;\nz-index: 2;\n@media (max-width: 500px) {\n  width: 332px;\n }\n`\n\nexport const BtnPicker = styled.button`\nbackground-color: ${(props) => props.backgroundColor};\ncolor: ${(props) => props.color};\nborder: ${(props) => props.border};\nwidth: 100px;\nmax-width:100%;\nheight: 40px;\nborder-top-left-radius:10px;\nborder-top-right-radius:10px;\n&:not(:first-child) {\n    margin-left:10px;\n    width: 90px;\n    @media (max-width: 500px) {\n    width: 70px;\n    height: 35px;\n    margin-left:5px;}\n  }\n  @media (max-width: 500px) {\n    width: 70px;\n    height: 35px;}\n    `\n\nexport const Btn = styled.button`\nbackground-color: ${(props) => props.backgroundColor};\ncolor: ${(props) => props.color};\nborder: ${(props) => props.border};\nwidth: 27px;\nheight: 40px;\npadding: 0;\nborder-top-left-radius:5px;\nborder-top-right-radius:5px;\nmargin-left:10px;\n`\nexport const BtnCopy = styled.button`\nposition: absolute;\nmargin-left:10px;\ncursor: pointer;\nborder:${props => props.theme.border};\ncolor:${props => props.theme.basicText};\nbackground-color:${props => props.theme.backgroundBasic};\n`\n\nexport const InputColor = styled.input`\nborder:${props => props.theme.border};\ncolor:${props => props.theme.basicText};\nbackground-color:${props => props.theme.backgroundBasic};\npadding-left:10px;\ndisplay:block;\nwidth: 388px;\nmax-width:100%;\nheight: 45px;\n@media (max-width: 500px) {\n  width:290px;\n  }\n  `\n\nexport const WrraperArrows = styled.div`\nmargin-left:5px;\ndisplay:flex;\njustify-content: center;\nalign-items: center;\nwidth: 27px;\nheight: 40px;\ncolor:${props => props.theme.basicText};\n@media (max-width: 500px) {\n  margin-left:auto;\n  margin-right:auto;\n  }\n`\n\nexport const WrraperInput = styled.div`\nmax-width:100%;\ndisplay: flex;\n\n`\n\nexport const WrraperRightsBtnGroup = styled.div`\nmax-width:100%;\nmargin-left:20px;\n@media (max-width: 500px) {\n  margin-left:0;}\n  @media (max-width: 1419px) {\n    margin-left:0;\n  }`\n\nexport const WrraperCopy = styled.div`\nmargin-left:10px;\n  display:flex;\n  justify-content:center;\n  align-items:center;\nposition:relative;`","import styled from \"styled-components\";\n\nexport const WrapperInput = styled.div`\nmax-width:100%;\ndisplay: flex `\n\nexport const WrapperNameColor = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color:${props => props.theme.backgroundSecond};\n  width:25px;\n  max-width:100%;\n  height:45px;\n  border:${props => props.theme.border};\n  margin-top:1px;\n  &:not(:first-child) {\n    margin-left:10px;\n    @media (max-width: 500px) {\n      margin-left:5px;\n  }\n  };\n`\n\nexport const Input = styled.input`\nborder:${props => props.theme.border};\ncolor:${props => props.theme.basicText};\nbackground-color:${props => props.theme.backgroundBasic};\npadding-left:10px;\nwidth:45px;\nmax-width:100%;\nheight:45px;\n@media (max-width: 500px) {\n  width:25px;\n  padding-left:3px;\n  }\n`\n\nexport const LastInput = styled.input`\nborder:${props => props.theme.border};\ncolor:${props => props.theme.basicText};\nbackground-color:${props => props.theme.backgroundBasic};\nmargin-left:10px;\nwidth:36px;\nmax-width:100%;\nheight:45px;\n`\n\nexport const InputHexOrName = styled.input`\nborder:${props => props.theme.border};\ncolor:${props => props.theme.basicText};\nbackground-color:${props => props.theme.backgroundBasic};\npadding-left:10px;\nwidth:363px;\nmax-width:100%;\nheight:45px;\n@media (max-width: 500px) {\n  width:263px;\n  }`\n\nexport const Tekst = styled.p`\ncolor: ${props => props.theme.secondText};\n`\n\nexport const WrapperColorPicker = styled.div`\nmax-width:100%;\n `","import { useEffect, useState } from 'react';\nimport {\n  Input,\n  InputHexOrName,\n  LastInput,\n  Tekst,\n  WrapperColorPicker,\n  WrapperInput,\n  WrapperNameColor,\n} from './colorsInputPicker.styled';\n\nexport const ColorsInputPicker = ({\n  activFlower,\n  activSetNameOrHEX,\n  activNameOrHEX,\n  setInput,\n  setInputSecond,\n  setInputThird,\n  setInputFourth,\n  input,\n  inputSecond,\n  inputThird,\n  inputFourth,\n}) => {\n  const [nameOrHex, setNameOrHex] = useState(false);\n  const namePallete = activFlower.split('');\n\n  useEffect(() => {\n    if (activFlower === 'HEX' || activFlower === 'Name') {\n      setNameOrHex(true);\n    } else {\n      setNameOrHex(false);\n    }\n  }, [activFlower]);\n\n  return (\n    <WrapperColorPicker>\n      {nameOrHex ? (\n        <WrapperInput>\n          <WrapperNameColor>\n            <Tekst>#</Tekst>\n          </WrapperNameColor>\n          <InputHexOrName\n            onChange={event => activSetNameOrHEX(event.target.value)}\n            value={activNameOrHEX}\n          />\n        </WrapperInput>\n      ) : (\n        <WrapperInput>\n          <WrapperNameColor>\n            <Tekst>{namePallete[0] || ''}</Tekst>\n          </WrapperNameColor>\n          <Input\n            onChange={event =>\n              setInput(event.target.value.replace(/[^0-9 .]/g, ''))\n            }\n            value={input}\n          />\n          <WrapperNameColor>\n            <Tekst>{namePallete[1] || ''}</Tekst>\n          </WrapperNameColor>\n          <Input\n            onChange={event =>\n              setInputSecond(event.target.value.replace(/[^0-9 .]/g, ''))\n            }\n            value={inputSecond}\n          />\n          <WrapperNameColor>\n            <Tekst>{namePallete[2] || ''}</Tekst>\n          </WrapperNameColor>\n          <Input\n            onChange={event =>\n              setInputThird(event.target.value.replace(/[^0-9 .]/g, ''))\n            }\n            value={inputThird}\n          />\n          {namePallete[3] ? (\n            <>\n              <WrapperNameColor>\n                <Tekst>{namePallete[3] || ''}</Tekst>\n              </WrapperNameColor>\n              <Input\n                onChange={event =>\n                  setInputFourth(event.target.value.replace(/[^0-9 .]/g, ''))\n                }\n                value={inputFourth}\n              />\n            </>\n          ) : null}\n          <LastInput readOnly value=\"100%\" />\n        </WrapperInput>\n      )}\n    </WrapperColorPicker>\n  );\n};\n","export function getColor(color, options, setErrorMassege) {\n    let result = {};\n    switch (options) {\n        case 'RGB':\n            try {\n                result = color.getRGB()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'RGBA':\n            try {\n                result = color.getRGBA()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'HEX':\n            try {\n                result = color.getHEX()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'CMYK':\n            try {\n                result = color.getCMYK()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'Name':\n            try {\n                result = color.getName()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'HSL':\n            try {\n                result = color.getHSL()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'HSLA':\n            try {\n                result = color.getHSLA()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'HSIA':\n            try {\n                result = color.getHSIA()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'HLSA':\n            try {\n                result = color.getHLSA()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'HSI':\n            try {\n                result = color.getHSI()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'HLS':\n            try {\n                result = color.getHLS()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'HSV':\n            try {\n                result = color.getHSV()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'HSB':\n            try {\n                result = color.getHSB()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'Safe':\n            try {\n                result = color.getSafe()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'CMY':\n            try {\n                result = color.getCMY()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'XYZ':\n            try {\n                result = color.getXYZ()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'Yxy':\n            try {\n                result = color.getYxy()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'Lab':\n            try {\n                result = color.getLab()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'LCH':\n            try {\n                result = color.getLCH()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'HunterLab':\n            try {\n                result = color.getHunterLab()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        case 'Luv':\n            try {\n                result = color.getLuv()\n            } catch (error) {\n                setErrorMassege(`${error}`)\n                result = \"\"\n            }\n            break;\n        default:\n            result = '';\n    }\n    return result\n}","/* eslint-disable react-hooks/exhaustive-deps */\nimport ListColorMenu from 'components/listColorsMenu/listColorsMenu';\nimport { useState, useEffect } from 'react';\nimport {\n  Btn,\n  BtnPicker,\n  InputColor,\n  WrraperInput,\n  WrraperListColum,\n  WrraperConverter,\n  WrraperRightsBtnGroup,\n  BtnCopy,\n  WrraperArrows,\n  WrraperCopy,\n} from './ConverterColor.styled';\nimport { ColorsInputPicker } from '../colorsInputPicker/colorsInputPicker';\nimport { columnConvert } from 'util/ColumnConvert';\nimport { nameActivMenu } from 'util/ActivElement/nameActivMenu';\nimport { activColorInputValue } from 'util/ActivElement/activColorInputValue';\nimport { activFlowerSystemt } from 'util/ActivElement/activFlowerSystemt';\nimport { saturationToInput } from 'util/saturationToInput';\nimport { activColorInput } from 'util/ActivElement/activColorInput';\nimport { activInputs } from 'util/ActivElement/actinInput';\nimport { activInputsSecond } from 'util/ActivElement/activInputSecond';\nimport { activInputsThird } from 'util/ActivElement/activInputThird';\nimport { activInputsFourth } from 'util/ActivElement/activInputFourth';\nimport { activSetInputs } from 'util/ActivElement/activSetInputs';\nimport { activSetInputsSecond } from 'util/ActivElement/activSetInputsSecond';\nimport { activSetInputsThird } from 'util/ActivElement/activSetInputsThird';\nimport { activSetInputsFourth } from 'util/ActivElement/activSetInputsFourth';\nimport { ActivInputNameOrHEX } from 'util/ActivElement/activInputNameOrHEX';\nimport { activSetInputNameOrHEX } from 'util/ActivElement/ActivSetInputNameOrHEX';\nimport useTheme from '../../style/useTheme';\n\nconst ConverterColor = ({ color, bgColor, saturation, setErrorMassege }) => {\n  //////input set\n  const [colorInput, setColorInput] = useState('');\n  const [colorInputSecond, setColorInputSecond] = useState('');\n  const [colorInputThird, setColorInputThird] = useState('');\n  const [colorInputFourth, setColorInputFourth] = useState('');\n  const [rightsInput, setRightsInput] = useState('');\n\n  //////////////input state in colorsInputPicker\n  //Neme or HEX\n  const [inputNameOrHEX, setInputNameOrHEX] = useState('');\n  const [inputNameOrHEXSecond, setInputNameOrHEXSecond] = useState('');\n  const [inputNameOrHEXThird, setInputNameOrHEXThird] = useState('');\n  const [inputNameOrHEXFourth, setInputNameOrHEXFourth] = useState('');\n  //1\n  const [input, setInput] = useState('');\n  const [inputSecond, setInputSecond] = useState('');\n  const [inputThird, setInputThird] = useState('');\n  const [inputFourth, setInputFourth] = useState('');\n  //2\n  const [input2, setInput2] = useState('');\n  const [inputSecond2, setInputSecond2] = useState('');\n  const [inputThird2, setInputThird2] = useState('');\n  const [inputFourth2, setInputFourth2] = useState('');\n  //3\n  const [input3, setInput3] = useState('');\n  const [inputSecond3, setInputSecond3] = useState('');\n  const [inputThird3, setInputThird3] = useState('');\n  const [inputFourth3, setInputFourth3] = useState('');\n  //4\n  const [input4, setInput4] = useState('');\n  const [inputSecond4, setInputSecond4] = useState('');\n  const [inputThird4, setInputThird4] = useState('');\n  const [inputFourth4, setInputFourth4] = useState('');\n\n  ///////activ set\n  const [isVisible, setIsVisible] = useState(false);\n  const [isVisibleRights, setIsVisibleRights] = useState(false);\n  const [activMenu, setActivMenu] = useState('flowerSystem');\n  const [rightsActivMenu, setRightsActivMenu] = useState('rightsFlowerSystem');\n\n  //////color menu set\n  const [flowerSystem, setFlowerSystem] = useState('RGB');\n  const [flowerSystemSecond, setFlowerSystemSecond] = useState('HLS');\n  const [flowerSystemThird, setFlowerSystemThird] = useState('CMYK');\n  const [flowerSystemFourth, setFlowerSystemFourth] = useState('HSL');\n  const [rightsFlowerSystem, setRightsFlowerSystem] = useState('RGB');\n  const [rightsFlowerSystemSecond, setRightsFlowerSystemSecond] =\n    useState('HLS');\n  const [rightsFlowerSystemThird, setRightsFlowerSystemThird] =\n    useState('CMYK');\n  const [rightsFlowerSystemFourth, setRightsFlowerSystemFourth] =\n    useState('HSL');\n\n  const { theme } = useTheme();\n\n  const activNameOrHEX = ActivInputNameOrHEX(\n    activMenu,\n    inputNameOrHEX,\n    inputNameOrHEXSecond,\n    inputNameOrHEXThird,\n    inputNameOrHEXFourth\n  );\n\n  const activSetNameOrHEX = activSetInputNameOrHEX(\n    activMenu,\n    setInputNameOrHEX,\n    setInputNameOrHEXSecond,\n    setInputNameOrHEXThird,\n    setInputNameOrHEXFourth\n  );\n\n  const activSetInput = activColorInput(\n    activMenu,\n    setColorInput,\n    setColorInputSecond,\n    setColorInputThird,\n    setColorInputFourth\n  );\n\n  const activInputRights = nameActivMenu(\n    rightsActivMenu,\n    rightsFlowerSystem,\n    rightsFlowerSystemSecond,\n    rightsFlowerSystemThird,\n    rightsFlowerSystemFourth\n  );\n\n  const colorInputValue = activColorInputValue(\n    colorInput,\n    colorInputSecond,\n    colorInputThird,\n    colorInputFourth,\n    activMenu\n  );\n\n  const activFlower = activFlowerSystemt(\n    activMenu,\n    flowerSystem,\n    flowerSystemSecond,\n    flowerSystemThird,\n    flowerSystemFourth\n  );\n\n  const activInput = activInputs(activMenu, input, input2, input3, input4);\n  const activInputSecond = activInputsSecond(\n    activMenu,\n    inputSecond,\n    inputSecond2,\n    inputSecond3,\n    inputSecond4\n  );\n\n  const activInputThird = activInputsThird(\n    activMenu,\n    inputThird,\n    inputThird2,\n    inputThird3,\n    inputThird4\n  );\n\n  const activInputFourth = activInputsFourth(\n    activMenu,\n    inputFourth,\n    inputFourth2,\n    inputFourth3,\n    inputFourth4\n  );\n\n  const setInputActiv = activSetInputs(\n    activMenu,\n    setInput,\n    setInput2,\n    setInput3,\n    setInput4\n  );\n\n  const setInputActivSecond = activSetInputsSecond(\n    activMenu,\n    setInputSecond,\n    setInputSecond2,\n    setInputSecond3,\n    setInputSecond4\n  );\n\n  const setInputActivThird = activSetInputsThird(\n    activMenu,\n    setInputThird,\n    setInputThird2,\n    setInputThird3,\n    setInputThird4\n  );\n\n  const setInputActivFourth = activSetInputsFourth(\n    activMenu,\n    setInputFourth,\n    setInputFourth2,\n    setInputFourth3,\n    setInputFourth4\n  );\n\n  useEffect(() => {\n    const colorConverter = saturationToInput(color, saturation, activFlower);\n    if (activFlower === 'HEX' || activFlower === 'Name') {\n      activSetNameOrHEX(colorConverter);\n      return;\n    }\n    const result = Object.values({ colorConverter }).map(i =>\n      Object.values(i)\n    )[0];\n    if (result.length === 4) {\n      setInputActiv(result[0]);\n      setInputActivSecond(result[1]);\n      setInputActivThird(result[2]);\n      setInputActivFourth(result[3]);\n      return;\n    }\n    if (result.length === 3) {\n      setInputActiv(result[0]);\n      setInputActivSecond(result[1]);\n      setInputActivThird(result[2]);\n    }\n  }, [saturation.s, saturation.h, saturation.v]);\n\n  useEffect(() => {\n    if (colorInputValue !== '') {\n      const colorConverter = columnConvert(\n        activFlower,\n        activInputRights,\n        colorInputValue,\n        color,\n        setErrorMassege\n      );\n\n      const bg = color.getRGB();\n      bgColor(bg);\n      if (activInputRights === 'HEX' || activInputRights === 'Name') {\n        setRightsInput(colorConverter);\n        return;\n      }\n      const result = Object.values({ colorConverter }).map(i =>\n        Object.values(i)\n      );\n      setRightsInput(result);\n    }\n  }, [activMenu, activFlower, activInputRights, colorInputValue]);\n\n  function targetLi(e) {\n    if (activMenu === 'flowerSystem') {\n      setFlowerSystem(e.target.innerText);\n    }\n    if (activMenu === 'flowerSystemSecond') {\n      setFlowerSystemSecond(e.target.innerText);\n    }\n    if (activMenu === 'flowerSystemThird') {\n      setFlowerSystemThird(e.target.innerText);\n    }\n    if (activMenu === 'flowerSystemFourth') {\n      setFlowerSystemFourth(e.target.innerText);\n    }\n    visibli();\n  }\n\n  function rightsTargetLi(e) {\n    if (rightsActivMenu === 'rightsFlowerSystem') {\n      setRightsFlowerSystem(e.target.innerText);\n    }\n    if (rightsActivMenu === 'rightsFlowerSystemSecond') {\n      setRightsFlowerSystemSecond(e.target.innerText);\n    }\n    if (rightsActivMenu === 'rightsFlowerSystemThird') {\n      setRightsFlowerSystemThird(e.target.innerText);\n    }\n    if (rightsActivMenu === 'rightsFlowerSystemFourth') {\n      setRightsFlowerSystemFourth(e.target.innerText);\n    }\n    rightsVisibli();\n  }\n\n  function visibli() {\n    setIsVisible(!isVisible);\n  }\n\n  function rightsVisibli() {\n    setIsVisibleRights(!isVisibleRights);\n  }\n\n  function activ(event) {\n    if (event.currentTarget.id === 'flowerSystem') {\n      return setActivMenu('flowerSystem');\n    }\n    if (event.currentTarget.id === 'flowerSystemSecond') {\n      return setActivMenu('flowerSystemSecond');\n    }\n    if (event.currentTarget.id === 'flowerSystemThird') {\n      return setActivMenu('flowerSystemThird');\n    }\n    if (event.currentTarget.id === 'flowerSystemFourth') {\n      return setActivMenu('flowerSystemFourth');\n    }\n  }\n\n  function rightsActiv(event) {\n    if (event.currentTarget.id === 'rightsFlowerSystem') {\n      return setRightsActivMenu('rightsFlowerSystem');\n    }\n    if (event.currentTarget.id === 'rightsFlowerSystemSecond') {\n      return setRightsActivMenu('rightsFlowerSystemSecond');\n    }\n    if (event.currentTarget.id === 'rightsFlowerSystemThird') {\n      return setRightsActivMenu('rightsFlowerSystemThird');\n    }\n    if (event.currentTarget.id === 'rightsFlowerSystemFourth') {\n      return setRightsActivMenu('rightsFlowerSystemFourth');\n    }\n  }\n\n  function activListColum() {\n    visibli();\n    activSetInput('');\n    activSetNameOrHEX('');\n    setInputActiv('');\n    setInputActivSecond('');\n    setInputActivThird('');\n    setInputActivFourth('');\n  }\n\n  function rightsActivListColum() {\n    rightsVisibli();\n  }\n\n  function inputToSetValue(\n    activInput,\n    activInputSecond,\n    activInputThird,\n    activInputFourth,\n    activNameOrHEX\n  ) {\n    if (activFlower === 'HEX' || activFlower === 'Name') {\n      activSetInput(activNameOrHEX);\n      return;\n    }\n    activSetInput(\n      `${activInput},${activInputSecond},${activInputThird},${activInputFourth}`\n    );\n  }\n\n  function copyInput() {\n    navigator.clipboard\n      .writeText(colorInputValue)\n      .then(() => {\n        console.log('Переменная скопирована в буфер обмена');\n      })\n      .catch(error => {\n        console.error('Ошибка копирования переменной: ', error);\n      });\n  }\n\n  function rightsCopyInput() {\n    navigator.clipboard\n      .writeText(rightsInput)\n      .then(() => {\n        console.log('Переменная скопирована в буфер обмена');\n      })\n      .catch(error => {\n        console.error('Ошибка копирования переменной: ', error);\n      });\n  }\n\n  useEffect(() => {\n    inputToSetValue(\n      activInput,\n      activInputSecond,\n      activInputThird,\n      activInputFourth,\n      activNameOrHEX\n    );\n  }, [\n    activInput,\n    activInputSecond,\n    activInputThird,\n    activInputFourth,\n    activNameOrHEX,\n  ]);\n\n  return (\n    <WrraperConverter>\n      <div>\n        <BtnPicker\n          theme={theme}\n          backgroundColor={\n            activMenu === 'flowerSystem' ? theme.btnActive : theme.btn\n          }\n          color={\n            activMenu === 'flowerSystem' ? theme.btnTextActive : theme.basicText\n          }\n          border={activMenu === 'flowerSystem' ? 'transparent' : theme.border}\n          id=\"flowerSystem\"\n          onClick={activ}\n        >\n          {flowerSystem}\n        </BtnPicker>\n        <BtnPicker\n          theme={theme}\n          backgroundColor={\n            activMenu === 'flowerSystemSecond' ? theme.btnActive : theme.btn\n          }\n          color={\n            activMenu === 'flowerSystemSecond'\n              ? theme.btnTextActive\n              : theme.basicText\n          }\n          border={\n            activMenu === 'flowerSystemSecond' ? 'transparent' : theme.border\n          }\n          id=\"flowerSystemSecond\"\n          onClick={activ}\n        >\n          {flowerSystemSecond}\n        </BtnPicker>\n        <BtnPicker\n          theme={theme}\n          backgroundColor={\n            activMenu === 'flowerSystemThird' ? theme.btnActive : theme.btn\n          }\n          color={\n            activMenu === 'flowerSystemThird'\n              ? theme.btnTextActive\n              : theme.basicText\n          }\n          border={\n            activMenu === 'flowerSystemThird' ? 'transparent' : theme.border\n          }\n          id=\"flowerSystemThird\"\n          onClick={activ}\n        >\n          {flowerSystemThird}\n        </BtnPicker>\n        <BtnPicker\n          theme={theme}\n          backgroundColor={\n            activMenu === 'flowerSystemFourth' ? theme.btnActive : theme.btn\n          }\n          color={\n            activMenu === 'flowerSystemFourth'\n              ? theme.btnTextActive\n              : theme.basicText\n          }\n          border={\n            activMenu === 'flowerSystemFourth' ? 'transparent' : theme.border\n          }\n          id=\"flowerSystemFourth\"\n          onClick={activ}\n        >\n          {flowerSystemFourth}\n        </BtnPicker>\n        <Btn\n          onClick={activListColum}\n          theme={theme}\n          backgroundColor={isVisible ? theme.btnActive : theme.btn}\n          color={isVisible ? theme.btnTextActive : theme.basicText}\n          border={isVisible ? 'transparent' : theme.border}\n        >\n          {isVisible ? <span>&#9650;</span> : <span>&#9660;</span>}\n        </Btn>\n        <WrraperInput>\n          {isVisible ? (\n            <WrraperListColum>\n              <ListColorMenu target={targetLi} />\n            </WrraperListColum>\n          ) : null}\n          <ColorsInputPicker\n            activFlower={activFlower}\n            activSetNameOrHEX={activSetNameOrHEX}\n            activNameOrHEX={activNameOrHEX}\n            setInput={setInputActiv}\n            setInputSecond={setInputActivSecond}\n            setInputThird={setInputActivThird}\n            setInputFourth={setInputActivFourth}\n            input={activInput}\n            inputSecond={activInputSecond}\n            inputThird={activInputThird}\n            inputFourth={activInputFourth}\n          />\n          <WrraperCopy>\n            <BtnCopy onClick={copyInput}>&#10066;</BtnCopy>\n          </WrraperCopy>\n        </WrraperInput>\n      </div>\n      <WrraperArrows>&#8646;</WrraperArrows>\n      <WrraperRightsBtnGroup>\n        <BtnPicker\n          theme={theme}\n          backgroundColor={\n            rightsActivMenu === 'rightsFlowerSystem'\n              ? theme.btnActive\n              : theme.btn\n          }\n          color={\n            rightsActivMenu === 'rightsFlowerSystem'\n              ? theme.btnTextActive\n              : theme.basicText\n          }\n          border={\n            rightsActivMenu === 'rightsFlowerSystem'\n              ? 'transparent'\n              : theme.border\n          }\n          id=\"rightsFlowerSystem\"\n          onClick={rightsActiv}\n        >\n          {rightsFlowerSystem}\n        </BtnPicker>\n        <BtnPicker\n          theme={theme}\n          backgroundColor={\n            rightsActivMenu === 'rightsFlowerSystemSecond'\n              ? theme.btnActive\n              : theme.btn\n          }\n          color={\n            rightsActivMenu === 'rightsFlowerSystemSecond'\n              ? theme.btnTextActive\n              : theme.basicText\n          }\n          border={\n            rightsActivMenu === 'rightsFlowerSystemSecond'\n              ? 'transparent'\n              : theme.border\n          }\n          id=\"rightsFlowerSystemSecond\"\n          onClick={rightsActiv}\n        >\n          {rightsFlowerSystemSecond}\n        </BtnPicker>\n        <BtnPicker\n          theme={theme}\n          backgroundColor={\n            rightsActivMenu === 'rightsFlowerSystemThird'\n              ? theme.btnActive\n              : theme.btn\n          }\n          color={\n            rightsActivMenu === 'rightsFlowerSystemThird'\n              ? theme.btnTextActive\n              : theme.basicText\n          }\n          border={\n            rightsActivMenu === 'rightsFlowerSystemThird'\n              ? 'transparent'\n              : theme.border\n          }\n          id=\"rightsFlowerSystemThird\"\n          onClick={rightsActiv}\n        >\n          {rightsFlowerSystemThird}\n        </BtnPicker>\n        <BtnPicker\n          theme={theme}\n          backgroundColor={\n            rightsActivMenu === 'rightsFlowerSystemFourth'\n              ? theme.btnActive\n              : theme.btn\n          }\n          color={\n            rightsActivMenu === 'rightsFlowerSystemFourth'\n              ? theme.btnTextActive\n              : theme.basicText\n          }\n          border={\n            rightsActivMenu === 'rightsFlowerSystemFourth'\n              ? 'transparent'\n              : theme.border\n          }\n          id=\"rightsFlowerSystemFourth\"\n          onClick={rightsActiv}\n        >\n          {rightsFlowerSystemFourth}\n        </BtnPicker>\n        <Btn\n          onClick={rightsActivListColum}\n          theme={theme}\n          backgroundColor={isVisibleRights ? theme.btnActive : theme.btn}\n          color={isVisibleRights ? theme.btnTextActive : theme.basicText}\n          border={isVisibleRights ? 'transparent' : theme.border}\n        >\n          {isVisibleRights ? <span>&#9650;</span> : <span>&#9660;</span>}\n        </Btn>\n        <WrraperInput>\n          {isVisibleRights ? (\n            <WrraperListColum>\n              <ListColorMenu target={rightsTargetLi} />\n            </WrraperListColum>\n          ) : null}\n          <InputColor\n            type=\"text\"\n            name=\"rightsInput\"\n            readOnly\n            value={rightsInput}\n          />\n          <WrraperCopy>\n            <BtnCopy onClick={rightsCopyInput}>&#10066;</BtnCopy>\n          </WrraperCopy>\n        </WrraperInput>\n      </WrraperRightsBtnGroup>\n    </WrraperConverter>\n  );\n};\n\nexport default ConverterColor;\n","export function ActivInputNameOrHEX(activMenu,\n    inputNameOrHEX,\n    inputNameOrHEXSecond,\n    inputNameOrHEXThird,\n    inputNameOrHEXFourth) {\n    let activInput = inputNameOrHEX;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = inputNameOrHEX;\n            break;\n        case 'flowerSystemSecond':\n            activInput = inputNameOrHEXSecond;\n            break;\n        case 'flowerSystemThird':\n            activInput = inputNameOrHEXThird;\n            break;\n        case 'flowerSystemFourth':\n            activInput = inputNameOrHEXFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activSetInputNameOrHEX(activMenu,\n    setInputNameOrHEX,\n    setInputNameOrHEXSecond,\n    setInputNameOrHEXThird,\n    setInputNameOrHEXFourth) {\n    let activInput = setInputNameOrHEX;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = setInputNameOrHEX;\n            break;\n        case 'flowerSystemSecond':\n            activInput = setInputNameOrHEXSecond;\n            break;\n        case 'flowerSystemThird':\n            activInput = setInputNameOrHEXThird;\n            break;\n        case 'flowerSystemFourth':\n            activInput = setInputNameOrHEXFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activColorInput(activMenu,\n    setColorInput,\n    setColorInputSecond,\n    setColorInputThird,\n    setColorInputFourth) {\n    let activColorInput = activMenu;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activColorInput = setColorInput;\n            break;\n        case 'flowerSystemSecond':\n            activColorInput = setColorInputSecond;\n            break;\n        case 'flowerSystemThird':\n            activColorInput = setColorInputThird;\n            break;\n        case 'flowerSystemFourth':\n            activColorInput = setColorInputFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activColorInput\n}\n","export function nameActivMenu(rightsActivMenu,\n    rightsFlowerSystem,\n    rightsFlowerSystemSecond,\n    rightsFlowerSystemThird,\n    rightsFlowerSystemFourth) {\n    let activInputRights = rightsActivMenu;\n    switch (rightsActivMenu) {\n        case 'rightsFlowerSystem':\n            activInputRights = rightsFlowerSystem;\n            break;\n        case 'rightsFlowerSystemSecond':\n            activInputRights = rightsFlowerSystemSecond;\n            break;\n        case 'rightsFlowerSystemThird':\n            activInputRights = rightsFlowerSystemThird;\n            break;\n        case 'rightsFlowerSystemFourth':\n            activInputRights = rightsFlowerSystemFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInputRights\n}","export function activColorInputValue(colorInput,\n    colorInputSecond,\n    colorInputThird,\n    colorInputFourth,\n    activMenu) {\n    let activColorInputValue = activMenu;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activColorInputValue = colorInput;\n            break;\n        case 'flowerSystemSecond':\n            activColorInputValue = colorInputSecond;\n            break;\n        case 'flowerSystemThird':\n            activColorInputValue = colorInputThird;\n            break;\n        case 'flowerSystemFourth':\n            activColorInputValue = colorInputFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activColorInputValue\n}\n","export function activFlowerSystemt(activMenu,\n    flowerSystem,\n    flowerSystemSecond,\n    flowerSystemThird,\n    flowerSystemFourth) {\n    let activFlowerSystemt = activMenu;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activFlowerSystemt = flowerSystem;\n            break;\n        case 'flowerSystemSecond':\n            activFlowerSystemt = flowerSystemSecond;\n            break;\n        case 'flowerSystemThird':\n            activFlowerSystemt = flowerSystemThird;\n            break;\n        case 'flowerSystemFourth':\n            activFlowerSystemt = flowerSystemFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activFlowerSystemt\n}","export function activInputs(activMenu,\n    input, input2, input3, input4) {\n    let activInput = input;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = input;\n            break;\n        case 'flowerSystemSecond':\n            activInput = input2;\n            break;\n        case 'flowerSystemThird':\n            activInput = input3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = input4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activInputsSecond(activMenu,\n    inputSecond, inputSecond2, inputSecond3, inputSecond4) {\n    let activInput = inputSecond;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = inputSecond;\n            break;\n        case 'flowerSystemSecond':\n            activInput = inputSecond2;\n            break;\n        case 'flowerSystemThird':\n            activInput = inputSecond3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = inputSecond4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activInputsThird(activMenu,\n    inputThird, inputThird2, inputThird3, inputThird4) {\n    let activInput = inputThird;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = inputThird;\n            break;\n        case 'flowerSystemSecond':\n            activInput = inputThird2;\n            break;\n        case 'flowerSystemThird':\n            activInput = inputThird3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = inputThird4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activInputsFourth(activMenu,\n    inputFourth, inputFourth2, inputFourth3, inputFourth4) {\n    let activInput = inputFourth;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = inputFourth;\n            break;\n        case 'flowerSystemSecond':\n            activInput = inputFourth2;\n            break;\n        case 'flowerSystemThird':\n            activInput = inputFourth3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = inputFourth4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activSetInputs(activMenu,\n    setInput,\n    setInput2,\n    setInput3,\n    setInput4) {\n    let activInput = setInput;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = setInput;\n            break;\n        case 'flowerSystemSecond':\n            activInput = setInput2;\n            break;\n        case 'flowerSystemThird':\n            activInput = setInput3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = setInput4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activSetInputsSecond(activMenu,\n    setInputSecond,\n    setInputSecond2,\n    setInputSecond3,\n    setInputSecond4) {\n    let activInput = setInputSecond;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = setInputSecond;\n            break;\n        case 'flowerSystemSecond':\n            activInput = setInputSecond2;\n            break;\n        case 'flowerSystemThird':\n            activInput = setInputSecond3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = setInputSecond4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activSetInputsThird(activMenu,\n    setInputThird,\n    setInputThird2,\n    setInputThird3,\n    setInputThird4) {\n    let activInput = setInputThird;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = setInputThird;\n            break;\n        case 'flowerSystemSecond':\n            activInput = setInputThird2;\n            break;\n        case 'flowerSystemThird':\n            activInput = setInputThird3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = setInputThird4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activSetInputsFourth(activMenu,\n    setInputFourth,\n    setInputFourth2,\n    setInputFourth3,\n    setInputFourth4) {\n    let activInput = setInputFourth;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = setInputFourth;\n            break;\n        case 'flowerSystemSecond':\n            activInput = setInputFourth2;\n            break;\n        case 'flowerSystemThird':\n            activInput = setInputFourth3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = setInputFourth4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function saturationToInput(color, saturation, flowerSystem) {\n    color.setHSV(saturation.h, saturation.s / 100, saturation.v / 100);\n\n    let result = {};\n\n    if (flowerSystem === 'RGB') {\n        result = color.getRGB()\n        return result\n    }\n\n    if (flowerSystem === 'RGBA') {\n        result = color.getRGBA()\n        return result\n    }\n\n    if (flowerSystem === 'HEX') {\n        try {\n            result = color.getHEX()\n            return result\n        } catch (error) {\n            return result\n        }\n    }\n    if (flowerSystem === 'CMYK') {\n        result = color.getCMYK()\n        return result\n    }\n\n    if (flowerSystem === 'Name') {\n        try {\n            result = color.getName()\n            return result\n        } catch (error) {\n            return \"no name\"\n        }\n\n    }\n    if (flowerSystem === 'HSL') {\n        result = color.getHLS()\n        return result\n    }\n\n    if (flowerSystem === 'HSLA') {\n        result = color.getHLSA()\n        return result\n    }\n    if (flowerSystem === 'LCH') {\n        result = color.getLCH()\n        return result\n    }\n\n    if (flowerSystem === 'HSIA') {\n        result = color.getHSIA()\n        return result\n    }\n\n    if (flowerSystem === 'HLSA') {\n        result = color.getHLSA()\n        return result\n    }\n\n    if (flowerSystem === 'HSI') {\n        result = color.getHSI()\n        return result\n    }\n\n    if (flowerSystem === 'HLS') {\n        result = color.getHLS()\n        return result\n    }\n\n    if (flowerSystem === 'HSV') {\n        result = color.getHSV()\n        return result\n    }\n\n    if (flowerSystem === 'HSB') {\n        result = color.getHSB()\n        return result\n    }\n    if (flowerSystem === 'Safe') {\n        result = color.getSafe()\n        return result\n    }\n    if (flowerSystem === 'CMY') {\n        result = color.getCMY()\n        return result\n    }\n    if (flowerSystem === 'XYZ') {\n        result = color.getXYZ()\n        return result\n    }\n    if (flowerSystem === 'Yxy') {\n        result = color.getYxy()\n        return result\n    }\n    if (flowerSystem === 'Lab') {\n        result = color.getLab()\n        return result\n    }\n    if (flowerSystem === 'HunterLab') {\n        result = color.getHunterLab()\n        return result\n    }\n    if (flowerSystem === 'Luv') {\n        result = color.getLuv()\n        return result\n    }\n}\n","\nimport { getColor } from \"./getColor\";\n\nexport function columnConvert(flowerSystem, rightsFlowerSystem, inputOne, color, setErrorMassege) {\n    let result = {}\n\n    if (flowerSystem === 'RGB') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            try {\n                color.setRGB(colorEl[0],\n                    colorEl[1],\n                    colorEl[2])\n                setErrorMassege(``)\n            } catch (error) {\n                setErrorMassege(`${error}`)\n            }\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n\n        return result\n    }\n    if (flowerSystem === 'RGBA') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            try {\n                color.setRGB(colorEl[0],\n                    colorEl[1],\n                    colorEl[2])\n                color.setAlpha(colorEl[3])\n                setErrorMassege(``)\n            } catch (error) {\n                setErrorMassege(`${error}`)\n            }\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n    if (flowerSystem === 'HEX') {\n        try {\n            color.setHEX(inputOne)\n            setErrorMassege(``)\n        } catch (error) {\n            setErrorMassege(`${error}`)\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n    if (flowerSystem === 'CMYK') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            try {\n                color.setCMYK(colorEl[0],\n                    colorEl[1],\n                    colorEl[2],\n                    colorEl[3])\n                setErrorMassege(``)\n            } catch (error) {\n                setErrorMassege(`${error}`)\n            }\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n    if (flowerSystem === 'Name') {\n        try {\n            color.setName(inputOne.trim())\n            setErrorMassege(``)\n        } catch (error) {\n            setErrorMassege(`${error}`)\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n    if (flowerSystem === 'HSL') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            try {\n                color.setHSL(colorEl[0],\n                    colorEl[1],\n                    colorEl[2])\n                setErrorMassege(``)\n            } catch (error) {\n                setErrorMassege(`${error}`)\n            }\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n    if (flowerSystem === 'HSLA') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            try {\n                color.setHSLA(colorEl[0],\n                    colorEl[1],\n                    colorEl[2],\n                    colorEl[3])\n                setErrorMassege(``)\n            } catch (error) {\n                setErrorMassege(`${error}`)\n            }\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n    if (flowerSystem === 'HSIA') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            try {\n                color.setHSIA(colorEl[0],\n                    colorEl[1],\n                    colorEl[2],\n                    colorEl[3])\n                setErrorMassege(``)\n            } catch (error) {\n                setErrorMassege(`${error}`)\n            }\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n    if (flowerSystem === 'HLSA') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            try {\n                color.setHLSA(colorEl[0],\n                    colorEl[1],\n                    colorEl[2],\n                    colorEl[3])\n                setErrorMassege(``)\n            } catch (error) {\n                setErrorMassege(`${error}`)\n            }\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n    if (flowerSystem === 'HSI') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            try {\n                color.setHSI(colorEl[0],\n                    colorEl[1],\n                    colorEl[2],)\n                setErrorMassege(``)\n            } catch (error) {\n                setErrorMassege(`${error}`)\n            }\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n    if (flowerSystem === 'HLS') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            try {\n                color.setHLS(colorEl[0],\n                    colorEl[1],\n                    colorEl[2],)\n                setErrorMassege(``)\n            } catch (error) {\n                setErrorMassege(`${error}`)\n            }\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n    if (flowerSystem === 'HSV') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            try {\n                color.setHSV(colorEl[0],\n                    colorEl[1],\n                    colorEl[2],)\n                setErrorMassege(``)\n            } catch (error) {\n                setErrorMassege(`${error}`)\n            }\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n    if (flowerSystem === 'HSB') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            try {\n                color.setHSB(colorEl[0],\n                    colorEl[1],\n                    colorEl[2],)\n                setErrorMassege(``)\n            } catch (error) {\n                setErrorMassege(`${error}`)\n            }\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n    if (flowerSystem === 'Safe') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            try {\n                color.setRGB(colorEl[0],\n                    colorEl[1],\n                    colorEl[2],)\n                setErrorMassege(``)\n            } catch (error) {\n                setErrorMassege(`${error}`)\n            }\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n    if (flowerSystem === 'CMY') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            try {\n                color.setCMY(colorEl[0],\n                    colorEl[1],\n                    colorEl[2],)\n                setErrorMassege(``)\n            } catch (error) {\n                setErrorMassege(`${error}`)\n            }\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n    if (flowerSystem === 'XYZ') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            try {\n                color.setXYZ(colorEl[0],\n                    colorEl[1],\n                    colorEl[2],)\n                setErrorMassege(``)\n            } catch (error) {\n                setErrorMassege(`${error}`)\n            }\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n    if (flowerSystem === 'Yxy') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            try {\n                color.setYxy(colorEl[0],\n                    colorEl[1],\n                    colorEl[2],)\n                setErrorMassege(``)\n            } catch (error) {\n                setErrorMassege(`${error}`)\n            }\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n    if (flowerSystem === 'LCH') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            try {\n                color.setLCH(colorEl[0],\n                    colorEl[1],\n                    colorEl[2],)\n                setErrorMassege(``)\n            } catch (error) {\n                setErrorMassege(`${error}`)\n            }\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n    if (flowerSystem === 'Lab') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            try {\n                color.setLab(colorEl[0],\n                    colorEl[1],\n                    colorEl[2],)\n                setErrorMassege(``)\n            } catch (error) {\n                setErrorMassege(`${error}`)\n            }\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n    if (flowerSystem === 'HunterLab') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            try {\n                color.setHunterLab(colorEl[0],\n                    colorEl[1],\n                    colorEl[2],)\n                setErrorMassege(``)\n            } catch (error) {\n                setErrorMassege(`${error}`)\n            }\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n    if (flowerSystem === 'Luv') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            try {\n                color.setLuv(colorEl[0],\n                    colorEl[1],\n                    colorEl[2],)\n                setErrorMassege(``)\n            } catch (error) {\n                setErrorMassege(`${error}`)\n            }\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem, setErrorMassege)\n        return result\n    }\n}","import styled from \"styled-components\";\n\nexport const WrapperReference = styled.div`\npadding-top:78px;\npadding-bottom:78px;\n`\n\nexport const WrapperButtonGroup = styled.div`\nmax-width:1170px;\npadding-top:30px;\npadding-bottom:4px;\n`\nexport const WrapperTitleColorModel = styled.div`\n`\n\nexport const TitlColorModel = styled.h2`\ntext-align:center;\nfont-weight: 500;\nfont-size: 30px;\nline-height: 30px;\ncolor: ${props => props.theme.basicText};\n@media (max-width: 500px) {\n    font-size: 20px;\n  }\n`\nexport const TextColorModel = styled.p`\ntext-align:center;\nfont-weight: 300;\nfont-size: 18px;\nline-height: 25px;\nmargin-top:23px;\ncolor: ${props => props.theme.secondText};\npadding-left:75px;\npadding-right:75px;\n@media (max-width: 500px) {\n    font-size: 14px;\n    line-height: 24px;\n  }\n`\n\nexport const Button = styled.button`\nfont-weight: 500;\nfont-size: 20px;\nline-height: 30px;\nbackground-color: ${(props) => props.backgroundColor};\ncolor: ${(props) => props.color};\nborder: ${(props) => props.border};\nborder-radius: 10px 10px 0px 0px;\nwidth:150px;\nheight:55px;\n@media (max-width: 786px) {\n    width:105px;\n    height:40px;\n  }\n`\n\nexport const ListBtn = styled.ul`\ndisplay:flex;\nflex-wrap: wrap;\nmargin: -5px -10px;\n`\n\nexport const ItemBtn = styled.li`\nborder:none;\nlist-style: none;\nmargin: 5px 10px;\n`","import styled from \"styled-components\";\n\nexport const WrapperColorModelDescription = styled.div`\nmax-width:1092px;\npadding: 40px 24px 35px 54px;\nbackground-color:${props => props.theme.backgroundSecond};\nborder:${props => props.theme.border};\n\n  @media (max-width: 500px) {\n    padding: 26px 26px 16px 30px;\n  }\n`\nexport const TextColorModelDescription = styled.p`\ncolor: ${props => props.theme.secondText};\nfont-weight: 300;\nfont-size: 16px;\nline-height: 25px;\nmargin-bottom:25px;\n@media (max-width: 500px) {\n    font-size: 14px;\n    line-height: 20px;\n  }\n`\nexport const WrapperHTMLlDescription = styled.div`\nmax-height:210px;\nmax-width:675px;\nbackground-color: #424243;\npadding: 36px 23px 41px 44px;\n@media (max-width: 500px) {\n    padding: 27px 13px 19px 15px;\n  }\n`\n\nexport const WrapperListСlue = styled.div`\nmax-height:210px;\nmax-width:675px;\nmargin-top:65px;\n@media (max-width: 500px) {\n   display:none;\n  }\n`\n\nexport const SpanH = styled.span`\ncolor: #E36E02;\n`\nexport const SpanColor = styled.span`\ncolor: #92AAFF;\n`\nexport const SpanRgb = styled.span`\ncolor: #C4E02A;\n`\nexport const TextCode = styled.p`\nfont-weight: 400;\nfont-size: 18px;\nline-height: 35px;\ncolor: #FFFFFF;\n\n@media (max-width: 500px) {\n    font-size: 12px;\n    line-height: 18px;\n  }\n`\nexport const ListСlue = styled.ol`\nfont-weight: 300;\nfont-size: 16px;\nline-height: 25px;\npadding-left:18px;\ncolor: ${props => props.theme.secondText};\n`\nexport const TextСlue = styled.h3`\nmargin-bottom: 20px;\nfont-weight: 400;\nfont-size: 18px;\nline-height: 35px;\ncolor: ${props => props.theme.secondText};\n`\n\n\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst RGB = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Цветовое пространство RGB (Red, Green, Blue) состоит из всех возможных\n        цветов, которые могут быть получены путём смешивания красного, зелёного,\n        и синего.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGB задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGB цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default RGB;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst RGBA = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default RGBA;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HEX = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HEX;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst CMYK = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default CMYK;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst Name = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default Name;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HSL = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HSL;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HSLA = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HSLA;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HSIA = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HSIA;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HLSA = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HLSA;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HSI = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HSI;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HLS = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HLS;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HSV = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HSV;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HSB = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HSB;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst Safe = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default Safe;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst CMY = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default CMY;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst XYZ = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default XYZ;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst Yxy = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default Yxy;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst Lab = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default Lab;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst LCH = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default LCH;\n","import {\n  SpanColor,\n  SpanH,\n  SpanRgb,\n  TextCode,\n  TextColorModelDescription,\n  WrapperColorModelDescription,\n  WrapperHTMLlDescription,\n  ListСlue,\n  WrapperListСlue,\n  TextСlue,\n} from './ColorModel.styled';\n\nconst HunterLab = () => {\n  return (\n    <WrapperColorModelDescription>\n      <TextColorModelDescription>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Cumque, ipsa!\n        Molestias impedit dolores facilis id, ullam distinctio neque eum,\n        reiciendis dolore quos officia aperiam odit delectus amet exercitationem\n        sapiente! Et.\n        <br />\n        Эта модель популярна в фотографии, телевидении, и компьютерной графике.\n        <br />\n        <br />\n        Значения RGBA задаются целым числом от 0 до 255.\n        <br />\n        Например, rgb(0,0,255).\n        <br />\n        отображается как синий, так как синий параметр установлен в его самое\n        высокое значение (255), а остальные установлены в 0.\n        <br />\n        Некоторые приложения (в частности веб-браузеры) поддерживают процентную\n        запись значений RGB (от 0% до 100%).\n      </TextColorModelDescription>\n      <WrapperHTMLlDescription>\n        <TextCode>\n          <SpanH>h1 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(255, 0, 0); </SpanRgb>\n          {`     }`}\n          {` /*  красный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h2 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0, 255, 0); </SpanRgb>\n          {`     }`}\n          {` /*  зелёный  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h3 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb> color: rgb(0, 0, 255); </SpanRgb>\n          {`     }`}\n          {` /*  синий  */`}\n        </TextCode>\n        <TextCode>\n          <SpanH>h4 </SpanH>\n          {`{`}\n          <SpanColor> color:</SpanColor>\n          <SpanRgb>rgb(0%, 0%, 100%); </SpanRgb>\n          {`     }`}\n          {` /*  тот же синий, процентная запись  */`}\n        </TextCode>\n      </WrapperHTMLlDescription>\n      <WrapperListСlue>\n        <TextСlue>Как преобразовать цветовой код RGB</TextСlue>\n        <ListСlue>\n          <li>\n            Выберите в палитре, введите или вставьте из буфера обмена RGBA цвет.\n          </li>\n          <li>\n            Вы сразу же получите значение цвета в нужном цветовом формате.\n          </li>\n          <li>Нажмите кнопку «Copy», чтобы скопировать результат.</li>\n        </ListСlue>\n      </WrapperListСlue>\n    </WrapperColorModelDescription>\n  );\n};\n\nexport default HunterLab;\n","import { useState } from 'react';\nimport {\n  Button,\n  ItemBtn,\n  ListBtn,\n  TextColorModel,\n  TitlColorModel,\n  WrapperButtonGroup,\n  WrapperReference,\n  WrapperTitleColorModel,\n} from './ColorReference.styled';\nimport { activColorModel } from 'util/ActivElement/activColorModel';\nimport useTheme from '../../style/useTheme';\n\nconst ColorReference = () => {\n  const [activBTN, setActivBTN] = useState('RGB');\n  const { theme } = useTheme();\n  const ActiveModel = activColorModel(activBTN);\n\n  return (\n    <WrapperReference>\n      <WrapperTitleColorModel>\n        <TitlColorModel>СПРАВКА ПО ЦВЕТОВЫМ МОДЕЛЯМ</TitlColorModel>\n        <TextColorModel>\n          Далее приводится краткое описание цветовых систем с которыми работает\n          конвертер, разъяснение по форматам, а также примеры использования\n          полученных цветов в CSS/HTML.\n        </TextColorModel>\n      </WrapperTitleColorModel>\n      <WrapperButtonGroup>\n        <ListBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={activBTN === 'RGB' ? theme.btnActive : theme.btn}\n              color={activBTN === 'RGB' ? theme.btnTextActive : theme.basicText}\n              border={activBTN === 'RGB' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('RGB');\n              }}\n            >\n              RGB\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={\n                activBTN === 'RGBA' ? theme.btnActive : theme.btn\n              }\n              color={\n                activBTN === 'RGBA' ? theme.btnTextActive : theme.basicText\n              }\n              border={activBTN === 'RGBA' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('RGBA');\n              }}\n            >\n              RGBA\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={activBTN === 'HEX' ? theme.btnActive : theme.btn}\n              color={activBTN === 'HEX' ? theme.btnTextActive : theme.basicText}\n              border={activBTN === 'HEX' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('HEX');\n              }}\n            >\n              HEX\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={\n                activBTN === 'CMYK' ? theme.btnActive : theme.btn\n              }\n              color={\n                activBTN === 'CMYK' ? theme.btnTextActive : theme.basicText\n              }\n              border={activBTN === 'CMYK' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('CMYK');\n              }}\n            >\n              CMYK\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={\n                activBTN === 'Name' ? theme.btnActive : theme.btn\n              }\n              color={\n                activBTN === 'Name' ? theme.btnTextActive : theme.basicText\n              }\n              border={activBTN === 'Name' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('Name');\n              }}\n            >\n              Name\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={activBTN === 'HSL' ? theme.btnActive : theme.btn}\n              color={activBTN === 'HSL' ? theme.btnTextActive : theme.basicText}\n              border={activBTN === 'HSL' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('HSL');\n              }}\n            >\n              HSL\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={\n                activBTN === 'HSLA' ? theme.btnActive : theme.btn\n              }\n              color={\n                activBTN === 'HSLA' ? theme.btnTextActive : theme.basicText\n              }\n              border={activBTN === 'HSLA' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('HSLA');\n              }}\n            >\n              HSLA\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={\n                activBTN === 'HSIA' ? theme.btnActive : theme.btn\n              }\n              color={\n                activBTN === 'HSIA' ? theme.btnTextActive : theme.basicText\n              }\n              border={activBTN === 'HSIA' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('HSIA');\n              }}\n            >\n              HSIA\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={\n                activBTN === 'HLSA' ? theme.btnActive : theme.btn\n              }\n              color={\n                activBTN === 'HLSA' ? theme.btnTextActive : theme.basicText\n              }\n              border={activBTN === 'HLSA' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('HLSA');\n              }}\n            >\n              HLSA\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={activBTN === 'HSI' ? theme.btnActive : theme.btn}\n              color={activBTN === 'HSI' ? theme.btnTextActive : theme.basicText}\n              border={activBTN === 'HSI' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('HSI');\n              }}\n            >\n              HSI\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={activBTN === 'HLS' ? theme.btnActive : theme.btn}\n              color={activBTN === 'HLS' ? theme.btnTextActive : theme.basicText}\n              border={activBTN === 'HLS' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('HLS');\n              }}\n            >\n              HLS\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={activBTN === 'HSV' ? theme.btnActive : theme.btn}\n              color={activBTN === 'HSV' ? theme.btnTextActive : theme.basicText}\n              border={activBTN === 'HSV' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('HSV');\n              }}\n            >\n              HSV\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={activBTN === 'HSB' ? theme.btnActive : theme.btn}\n              color={activBTN === 'HSB' ? theme.btnTextActive : theme.basicText}\n              border={activBTN === 'HSB' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('HSB');\n              }}\n            >\n              HSB\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={\n                activBTN === 'Safe' ? theme.btnActive : theme.btn\n              }\n              color={\n                activBTN === 'Safe' ? theme.btnTextActive : theme.basicText\n              }\n              border={activBTN === 'Safe' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('Safe');\n              }}\n            >\n              Safe\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={activBTN === 'CMY' ? theme.btnActive : theme.btn}\n              color={activBTN === 'CMY' ? theme.btnTextActive : theme.basicText}\n              border={activBTN === 'CMY' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('CMY');\n              }}\n            >\n              CMY\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={activBTN === 'XYZ' ? theme.btnActive : theme.btn}\n              color={activBTN === 'XYZ' ? theme.btnTextActive : theme.basicText}\n              border={activBTN === 'XYZ' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('XYZ');\n              }}\n            >\n              XYZ\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={activBTN === 'Yxy' ? theme.btnActive : theme.btn}\n              color={activBTN === 'Yxy' ? theme.btnTextActive : theme.basicText}\n              border={activBTN === 'Yxy' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('Yxy');\n              }}\n            >\n              Yxy\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={activBTN === 'Lab' ? theme.btnActive : theme.btn}\n              color={activBTN === 'Lab' ? theme.btnTextActive : theme.basicText}\n              border={activBTN === 'Lab' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('Lab');\n              }}\n            >\n              Lab\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={activBTN === 'LCH' ? theme.btnActive : theme.btn}\n              color={activBTN === 'LCH' ? theme.btnTextActive : theme.basicText}\n              border={activBTN === 'LCH' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('LCH');\n              }}\n            >\n              LCH\n            </Button>\n          </ItemBtn>\n          <ItemBtn>\n            <Button\n              theme={theme}\n              backgroundColor={\n                activBTN === 'HunterLab' ? theme.btnActive : theme.btn\n              }\n              color={\n                activBTN === 'HunterLab' ? theme.btnTextActive : theme.basicText\n              }\n              border={activBTN === 'HunterLab' ? 'transparent' : theme.border}\n              onClick={() => {\n                setActivBTN('HunterLab');\n              }}\n            >\n              HunterLab\n            </Button>\n          </ItemBtn>\n        </ListBtn>\n      </WrapperButtonGroup>\n      <ActiveModel />\n    </WrapperReference>\n  );\n};\n\nexport default ColorReference;\n","import {\n    RGB,\n    RGBA,\n    HEX,\n    CMYK,\n    Name,\n    HSL,\n    HSLA,\n    HSIA,\n    HLSA,\n    HSI,\n    HLS,\n    HSV,\n    HSB,\n    Safe,\n    CMY,\n    XYZ,\n    Yxy,\n    Lab,\n    LCH,\n    HunterLab,\n} from '../../components/colorModelDescription/index';\nexport function activColorModel(activBTN) {\n    let activColor = activBTN;\n    switch (activBTN) {\n        case 'RGB':\n            activColor = RGB;\n            break;\n        case 'RGBA':\n            activColor = RGBA;\n            break;\n        case 'HEX':\n            activColor = HEX;\n            break;\n        case 'CMYK':\n            activColor = CMYK;\n            break;\n        case 'Name':\n            activColor = Name;\n            break;\n        case 'HSL':\n            activColor = HSL;\n            break;\n        case 'HSLA':\n            activColor = HSLA;\n            break;\n        case 'HSIA':\n            activColor = HSIA;\n            break;\n        case 'HLSA':\n            activColor = HLSA;\n            break;\n        case 'HSI':\n            activColor = HSI;\n            break;\n        case 'HLS':\n            activColor = HLS;\n            break;\n        case 'HSV':\n            activColor = HSV;\n            break;\n        case 'HSB':\n            activColor = HSB;\n            break;\n        case 'Safe':\n            activColor = Safe;\n            break;\n        case 'CMY':\n            activColor = CMY;\n            break;\n        case 'XYZ':\n            activColor = XYZ;\n            break;\n        case 'Yxy':\n            activColor = Yxy;\n            break;\n        case 'Lab':\n            activColor = Lab;\n            break;\n        case 'LCH':\n            activColor = LCH;\n            break;\n        case 'HunterLab':\n            activColor = HunterLab;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activColor\n}","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from 'react';\nimport Hue from '@uiw/react-color-hue';\nimport Saturation from '@uiw/react-color-saturation';\nimport { Section } from 'components/ui/Section/Section';\nimport {\n  ColorDisplay,\n  ErrorMessage,\n  WrappeSaturation,\n  Wrapper,\n  WrapperColorPicker,\n  WrapperColorPickerSection,\n  WrapperHue,\n} from './colorPicker.styled';\nimport ConverterColor from 'components/Converter/ConverterColor';\nimport Color from 'js/color';\nimport ColorReference from 'components/colorReference/ColorReference';\nimport { useResize } from 'hook/useResize';\n\nconst ColorPicker = () => {\n  const [hsva, setHsva] = useState({ h: 25, s: 25, v: 25, a: 1 });\n  const [bgRGB, setBgRGB] = useState('');\n  const [errorMassege, setErrorMassege] = useState('');\n  const color = new Color();\n\n  const { isScreenSm } = useResize();\n  const direction = isScreenSm ? 'vertical' : 'horizontal';\n  const widthHue = isScreenSm ? 18 : 231;\n  const heightHue = isScreenSm ? 225 : 18;\n  const widthSaturation = isScreenSm ? '38vw' : '231px';\n  const heightSaturation = isScreenSm ? '225px' : '155px';\n\n  function colorClass() {\n    color.setHSV(hsva.h, hsva.s / 100, hsva.v / 100);\n    const result = color.getRGB();\n    color.setBgRGB(result.red, result.green, result.blue);\n    const bgOb = color.getBgRGB();\n    const bgString = `rgb(${bgOb.red}, ${bgOb.green}, ${bgOb.blue})`;\n    setBgRGB(bgString);\n  }\n  function bgColorInInput(bgColor) {\n    const bgString = `rgb(${bgColor.red}, ${bgColor.green}, ${bgColor.blue})`;\n    setBgRGB(bgString);\n  }\n\n  useEffect(() => {\n    colorClass();\n  }, [hsva]);\n\n  return (\n    <Section>\n      <WrapperColorPickerSection>\n        <WrapperColorPicker>\n          <ColorDisplay style={{ backgroundColor: bgRGB }} />\n          <Wrapper>\n            <WrappeSaturation>\n              <Saturation\n                style={{\n                  maxWidth: '100%',\n                  width: widthSaturation,\n                  height: heightSaturation,\n                }}\n                hsva={hsva}\n                onChange={newColor => {\n                  setHsva({ ...hsva, ...newColor, a: hsva.a });\n                }}\n              />\n            </WrappeSaturation>\n            <WrapperHue>\n              <Hue\n                hue={hsva.h}\n                direction={direction}\n                width={widthHue}\n                height={heightHue}\n                onChange={newHue => {\n                  setHsva({ ...hsva, ...newHue });\n                }}\n              />\n            </WrapperHue>\n          </Wrapper>\n        </WrapperColorPicker>\n        <ConverterColor\n          color={color}\n          bgColor={bgColorInInput}\n          saturation={hsva}\n          setErrorMassege={setErrorMassege}\n        />\n        {errorMassege !== '' ? (\n          <ErrorMessage>{errorMassege}</ErrorMessage>\n        ) : null}\n      </WrapperColorPickerSection>\n      <ColorReference />\n    </Section>\n  );\n};\n\nexport default ColorPicker;\n","import { useState, useEffect } from 'react';\n\nexport const useResize = () => {\n  const SCREEN_SM = 501;\n  const SCREEN_MD = 768;\n  const SCREEN_LG = 992;\n  const SCREEN_XL = 1200;\n  const SCREEN_XXL = 1400;\n\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = event => {\n      setWidth(event.target.innerWidth);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return {\n    width,\n    isScreenSm: width >= SCREEN_SM,\n    isScreenMd: width >= SCREEN_MD,\n    isScreenLg: width >= SCREEN_LG,\n    isScreenXl: width >= SCREEN_XL,\n    isScreenXxl: width >= SCREEN_XXL,\n  };\n};\n","import styled from 'styled-components';\n\n\nexport const MainTeg = styled.main``\n\nexport const WrapperHome = styled.div`\n    padding-left: 147px;\n    padding-right: 147px;\nbackground-color: #424343;\n`\n","import styled from 'styled-components';\n\n\nexport const TextStart = styled.p`\ncolor:${props => props.theme.basicText};\nfont-weight: 300;\nfont-size: 18px;\nline-height: 30px;\n`\n\nexport const WraperTextStart = styled.div`\npadding-top: 60px;\ndisplay:flex;\njustify-content: space-between;\nalign-items:center;\n`","import { TextStart, WraperTextStart } from './DescriptionText.styled';\n\nconst TextDescription = () => {\n  return (\n    <WraperTextStart>\n      <TextStart>\n        С помощью универсального конвертер цветов вы можете легко перевести цвет\n        из одной цветовой модели в ряд других.\n        <br />\n        В первую очередь, калькулятор служит для удобной работы с современными\n        форматами CSS3-цветов.\n        <br />\n        Поддерживается конвертация из HEX в RGB/RGBA и HSL/HSLA, RGB в CMYK,\n        XYZ, LAB, и обратно.\n        <br />А также специальный функционал для замещения альфа-канала при\n        переводе цвета из RGBA в RGB (и HSLA в HSL).\n      </TextStart>\n    </WraperTextStart>\n  );\n};\n\nexport default TextDescription;\n","import ColorPicker from 'components/colorPicker/colorPicker';\nimport { MainTeg } from './Main.styled';\nimport TextDescription from 'components/DescriptionText/DescriptionText';\n\nconst Main = () => {\n  return (\n    <MainTeg>\n      <TextDescription />\n      <ColorPicker />\n    </MainTeg>\n  );\n};\n\nexport default Main;\n","import { Wraper } from './Home.styled';\nimport Main from 'components/main/Main';\n\nconst Home = () => {\n  return (\n    <Wraper>\n      <Main />\n    </Wraper>\n  );\n};\n\nexport default Home;\n","import { useContext } from 'react';\nimport { ThemeContext } from './theme';\n\nfunction useTheme() {\n    return useContext(ThemeContext);\n}\n\nexport default useTheme;"],"names":["Wraper","styled","props","theme","backgroundBasic","Sections","Section","children","WrapperColorPickerSection","backgroundSecond","WrapperColorPicker","ErrorMessage","basicText","Wrapper","WrapperHue","ColorDisplay","WrappeSaturation","ListNameColor","ItemtColorMenu","target","colorPalette","palette","onClick","WrraperConverter","WrraperListColum","BtnPicker","backgroundColor","color","border","Btn","BtnCopy","InputColor","WrraperArrows","WrraperInput","WrraperRightsBtnGroup","WrraperCopy","WrapperInput","WrapperNameColor","Input","LastInput","InputHexOrName","Tekst","secondText","ColorsInputPicker","activFlower","activSetNameOrHEX","activNameOrHEX","setInput","setInputSecond","setInputThird","setInputFourth","input","inputSecond","inputThird","inputFourth","useState","nameOrHex","setNameOrHex","namePallete","split","useEffect","onChange","event","value","replace","readOnly","getColor","options","setErrorMassege","result","getRGB","error","getRGBA","getHEX","getCMYK","getName","getHSL","getHSLA","getHSIA","getHLSA","getHSI","getHLS","getHSV","getHSB","getSafe","getCMY","getXYZ","getYxy","getLab","getLCH","getHunterLab","getLuv","bgColor","saturation","colorInput","setColorInput","colorInputSecond","setColorInputSecond","colorInputThird","setColorInputThird","colorInputFourth","setColorInputFourth","rightsInput","setRightsInput","inputNameOrHEX","setInputNameOrHEX","inputNameOrHEXSecond","setInputNameOrHEXSecond","inputNameOrHEXThird","setInputNameOrHEXThird","inputNameOrHEXFourth","setInputNameOrHEXFourth","input2","setInput2","inputSecond2","setInputSecond2","inputThird2","setInputThird2","inputFourth2","setInputFourth2","input3","setInput3","inputSecond3","setInputSecond3","inputThird3","setInputThird3","inputFourth3","setInputFourth3","input4","setInput4","inputSecond4","setInputSecond4","inputThird4","setInputThird4","inputFourth4","setInputFourth4","isVisible","setIsVisible","isVisibleRights","setIsVisibleRights","activMenu","setActivMenu","rightsActivMenu","setRightsActivMenu","flowerSystem","setFlowerSystem","flowerSystemSecond","setFlowerSystemSecond","flowerSystemThird","setFlowerSystemThird","flowerSystemFourth","setFlowerSystemFourth","rightsFlowerSystem","setRightsFlowerSystem","rightsFlowerSystemSecond","setRightsFlowerSystemSecond","rightsFlowerSystemThird","setRightsFlowerSystemThird","rightsFlowerSystemFourth","setRightsFlowerSystemFourth","useTheme","activInput","console","log","ActivInputNameOrHEX","activSetInputNameOrHEX","activSetInput","activColorInput","activInputRights","nameActivMenu","colorInputValue","activColorInputValue","activFlowerSystemt","activInputs","activInputSecond","activInputsSecond","activInputThird","activInputsThird","activInputFourth","activInputsFourth","setInputActiv","activSetInputs","setInputActivSecond","activSetInputsSecond","setInputActivThird","activSetInputsThird","setInputActivFourth","activSetInputsFourth","visibli","rightsVisibli","activ","currentTarget","id","rightsActiv","colorConverter","setHSV","h","s","v","saturationToInput","Object","values","map","i","length","inputOne","colorEl","setRGB","setAlpha","setHEX","setCMYK","setName","trim","setHSL","setHSLA","setHSIA","setHLSA","setHSI","setHLS","setHSB","setCMY","setXYZ","setYxy","setLCH","setLab","setHunterLab","setLuv","columnConvert","bg","inputToSetValue","btnActive","btn","btnTextActive","e","innerText","navigator","clipboard","writeText","then","catch","type","name","WrapperReference","WrapperButtonGroup","WrapperTitleColorModel","TitlColorModel","TextColorModel","Button","ListBtn","ItemBtn","WrapperColorModelDescription","TextColorModelDescription","WrapperHTMLlDescription","WrapperListСlue","SpanH","SpanColor","SpanRgb","TextCode","ListСlue","TextСlue","activBTN","setActivBTN","ActiveModel","activColor","RGB","RGBA","HEX","CMYK","Name","HSL","HSLA","HSIA","HLSA","HSI","HLS","HSV","HSB","Safe","CMY","XYZ","Yxy","Lab","LCH","HunterLab","activColorModel","a","hsva","setHsva","bgRGB","setBgRGB","errorMassege","Color","window","innerWidth","width","setWidth","handleResize","addEventListener","removeEventListener","isScreenSm","isScreenMd","isScreenLg","isScreenXl","isScreenXxl","useResize","direction","widthHue","heightHue","widthSaturation","heightSaturation","red","green","blue","bgOb","getBgRGB","bgString","colorClass","style","maxWidth","height","newColor","hue","newHue","MainTeg","TextStart","WraperTextStart","useContext","ThemeContext"],"sourceRoot":""}