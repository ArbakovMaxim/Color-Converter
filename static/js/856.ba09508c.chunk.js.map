{"version":3,"file":"static/js/856.ba09508c.chunk.js","mappings":"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","sources":["js/converter.js","js/color.js"],"sourcesContent":["import nameColors from '../util/colorsName.json'\nimport websafe_colors from '../util/websafe_colors.json'\n\n\n\n\nexport default class Converter {\n    static RGBAToRGB(\n        red,\n        green,\n        blue,\n        alpha,\n        bgRed = 255,\n        bgGreen = 255,\n        bgBlue = 255\n    ) {\n        red = ((1 - alpha) * bgRed) + (alpha * red);\n        green = ((1 - alpha) * bgGreen) + (alpha * green);\n        blue = ((1 - alpha) * bgBlue) + (alpha * blue);\n\n        const result = this._roundRGB(red, green, blue);\n\n        return result;\n    }\n\n    // /**\n    //  * Convert the RGB color to a RGBA color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]\n    //  */\n\n    static RGBToRGBA(red, green, blue) {\n        const rgba = {}\n        rgba.red = red;\n        rgba.green = green;\n        rgba.blue = blue;\n        rgba.alpha = 1;\n        return rgba\n    }\n\n    // /**\n    //  * Convert the HEX color to a RGB color.\n    //  *\n    //  * @param string $hex\n    //  *\n    //  * @return int[]\n    //  */\n\n    static HEXToRGB(hex) {\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        const rgb = [\n            parseInt(result[1], 16),\n            parseInt(result[2], 16),\n            parseInt(result[3], 16)]\n        return this._roundRGB(...rgb);\n    }\n\n    // /**\n    //  * Convert the RGB color to a HEX color\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return string\n    //  */\n\n    static RGBToHEX(red, green, blue) {\n        red = Number(red);\n        green = Number(green);\n        blue = Number(blue);\n        return ((1 << 24) + (red << 16) + (green << 8) + blue).toString(16).slice(1);\n    }\n\n    // /**\n    //  * Convert the CMYK color to a RGB color.\n    //  *\n    //  * @param float $cyan\n    //  * @param float $magenta\n    //  * @param float $yellow\n    //  * @param float $key\n    //  *\n    //  * @return int[]\n    //  */\n\n\n    static CMYKToRGB(cyan, magenta, yellow, key) {\n        cyan = cyan / 100\n        magenta = magenta / 100\n        yellow = yellow / 100\n        key = key / 100\n        const red = Math.round(255 * (1 - cyan) * (1 - key))\n        const green = Math.round(255 * (1 - magenta) * (1 - key))\n        const blue = Math.round(255 * (1 - yellow) * (1 - key))\n        return this._roundRGB(red, green, blue);\n    }\n\n    // /**\n    //  * Convert the RGB color to a CMYK color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return float[]\n    //  */\n\n    static RGBToCMYK(red, green, blue) {\n\n        const calcRed = red / 255;\n        const calcGreen = green / 255;\n        const calcBlue = blue / 255;\n\n        const key = 1 - Math.max(calcRed, calcGreen, calcBlue);\n        const cyan = ((1 - calcRed - key) / (1 - key))\n        const magenta = ((1 - calcGreen - key) / (1 - key));\n        const yellow = ((1 - calcBlue - key) / (1 - key));\n\n        const cmyk = {}\n        cmyk.cyan = ((cyan).toFixed(2)) * 100;\n        cmyk.magenta = ((magenta).toFixed(2)) * 100;\n        cmyk.yellow = ((yellow).toFixed(2)) * 100;\n        cmyk.key = ((key).toFixed(2)) * 100;\n        // console.log(cmyk);\n\n\n        return cmyk;\n    }\n\n    // /**\n    //  * Convert the HTML named color to a RGB color.\n    //  *\n    //  * @param string $name\n    //  *\n    //  * @return int[]\n    //  */\n\n\n    static NameToRGB(name) {\n        let color = ''\n        for (let nameColor of nameColors) {\n            if (nameColor.name === name) {\n                color = nameColor.rgb\n            }\n        }\n        if (color === '') {\n            throw new Error('Color name not found!');\n        }\n        const red = color[0];\n        const green = color[1];\n        const blue = color[2];\n\n\n        return this._roundRGB(red, green, blue);\n    }\n\n    // /**\n    //  * Convert the RGB color to a HTML named color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return string\n    //  */\n\n\n    static RGBToName(red, green, blue) {\n        let color = ''\n        for (const nameColor of nameColors) {\n            if (nameColor.rgb[0] === red && nameColor.rgb[1] === green && nameColor.rgb[2] === blue) {\n                color = nameColor.name\n                return color\n            }\n        }\n        throw new Error('Name for color not found!');\n    }\n\n    // /**\n    //  * Convert the HSL color to a RGB color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $saturation\n    //  * @param float $lightness\n    //  *\n    //  * @return int[]\n    //  */\n\n    static HSLToRGB(hue, saturation, lightness) {\n        saturation = saturation / 100;\n        lightness = lightness / 100;\n\n        let c = (1 - Math.abs(2 * lightness - 1)) * saturation,\n            x = c * (1 - Math.abs((hue / 60) % 2 - 1)),\n            m = lightness - c / 2,\n            red = 0,\n            green = 0,\n            blue = 0;\n\n        if (0 <= hue && hue < 60) {\n            red = c; green = x; blue = 0;\n        } else if (60 <= hue && hue < 120) {\n            red = x; green = c; blue = 0;\n        } else if (120 <= hue && hue < 180) {\n            red = 0; green = c; blue = x;\n        } else if (180 <= hue && hue < 240) {\n            red = 0; green = x; blue = c;\n        } else if (240 <= hue && hue < 300) {\n            red = x; green = 0; blue = c;\n        } else if (300 <= hue && hue < 360) {\n            red = c; green = 0; blue = x;\n        }\n        red = Math.abs(((red + m) * 255));\n        green = Math.abs(((green + m) * 255));\n        blue = Math.abs(((blue + m) * 255));\n\n        return this._roundRGB(red, green, blue);;\n    }\n\n    // /**\n    //  * Convert the RGB color to a HSL color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n\n    static RGBToHSL(red, green, blue) {\n        red /= 255;\n        green /= 255;\n        blue /= 255;\n\n        // Find greatest and smallest channel values\n        let cmin = Math.min(red, green, blue),\n            cmax = Math.max(red, green, blue),\n            delta = cmax - cmin,\n            hue = 0,\n            saturation = 0,\n            lightness = 0;\n\n        if (delta === 0)\n            hue = 0;\n        else if (cmax === red)\n            hue = ((green - blue) / delta) % 6;\n\n        else if (cmax === green)\n            hue = (blue - red) / delta + 2;\n\n        else\n            hue = (red - green) / delta + 4;\n\n        hue = Math.round(hue * 60);\n\n        if (hue < 0)\n            hue += 360;\n\n        lightness = (cmax + cmin) / 2;\n\n        saturation = delta === 0 ? 0 : delta / (1 - Math.abs(2 * lightness - 1));\n\n        saturation = +(saturation).toFixed(11);\n        lightness = +(lightness).toFixed(11);\n\n        const hsl = {}\n        hsl.hue = hue;\n        hsl.saturation = saturation.toFixed(2) * 100;\n        hsl.lightness = lightness.toFixed(2) * 100;\n\n        return hsl;\n    }\n\n    // /**\n    //  * Convert the HSLA color to a RGBA color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $saturation\n    //  * @param float $lightness\n    //  * @param float $alpha\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n\n    static HSLAToRGBA(hue, saturation, lightness, alpha) {\n        const rgba = this.HSLToRGB(hue, saturation, lightness);\n        rgba.alpha = alpha\n\n        return rgba;\n    }\n\n    // /**\n    //  * Convert the RGBA color to a HSLA color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * @param float $alpha\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n\n    static RGBAToHSLA(red, green, blue, alpha) {\n        const hsla = this.RGBToHSL(red, green, blue);\n        hsla.alpha = alpha;\n        return hsla;\n    }\n\n    // /**\n    //  * Convert the HSIA color to a RGBA color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $saturation\n    //  * @param float $intensity\n    //  * @param float $alpha\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n\n    static HSIAToRGBA(hue, saturation, intensity, alpha) {\n        const rgba = this.HSIToRGB(hue, saturation, intensity);\n        rgba.alpha = alpha;\n\n        return rgba;\n    }\n\n    // /**\n    //  * Convert the RGBA color to a HSIA color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * @param float $alpha\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n\n    static RGBAToHSIA(red, green, blue, alpha) {\n        const hsia = this.RGBToHSI(red, green, blue);\n        hsia.alpha = alpha;\n\n        return hsia;\n    }\n\n    // /**\n    //  * Convert the HLSA color to a RGBA color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $lightness\n    //  * @param float $saturation\n    //  * @param float $alpha\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n\n    static HLSAToRGBA(hue, lightness, saturation, alpha) {\n        const rgba = this.HLSToRGB(hue, lightness, saturation);\n        rgba.alpha = alpha;\n\n        return rgba;\n    }\n\n    // /**\n    //  * Convert the RGBA color to a HLSA color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * @param float $alpha\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n    static RGBAToHLSA(red, green, blue, alpha) {\n        const hlsa = this.RGBToHLS(red, green, blue);\n        hlsa.alpha = alpha;\n\n        return hlsa;\n    }\n\n    // /**\n    //  * Convert the HSI color to a RGB color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $saturation\n    //  * @param float $intensity\n    //  *\n    //  * @return int[]\n    //  */\n\n\n    static HSIToRGB(hue, saturation, intensity) {\n        return this.HSLToRGB(hue, saturation, intensity);\n    }\n\n    // /**\n    //  * Convert the RGB color to a HSI color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n    static RGBToHSI(red, green, blue) {\n        return this.RGBToHSL(red, green, blue);\n    }\n\n    // /**\n    //  * Convert the HLS color to a RGB color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $lightness\n    //  * @param float $saturation\n    //  *\n    //  * @return int[]\n    //  */\n\n    static HLSToRGB(hue, lightness, saturation) {\n        return this.HSLToRGB(hue, saturation, lightness);\n    }\n\n    // /**\n    //  * Convert the RGB color to a HLS color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n    static RGBToHLS(red, green, blue) {\n        const hsl = this.RGBToHSL(red, green, blue);\n        const hls = {}\n        hls.hue = hsl.hue\n        hls.lightness = hsl.lightness\n        hls.saturation = hsl.saturation\n\n        return hls\n    }\n\n    // /**\n    //  * Convert the HSV color to a RGB color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $saturation\n    //  * @param float $value\n    //  *\n    //  * @return int[]\n    //  */\n\n    static HSVToRGB(hue, saturation, value) {\n        // saturation = saturation / 100\n        // value = value / 100\n        let red = Number;\n        let green = Number;\n        let blue = Number;\n        if (saturation === 0) {\n            red = green = blue = value;\n        } else {\n            if (hue === 360) {\n                hue = 0;\n            } else {\n                hue /= 60;\n            }\n\n            const i = Math.floor(hue);\n            const f = hue - i;\n\n            const p = value * (1.0 - saturation);\n            const q = value * (1.0 - (saturation * f));\n            const t = value * (1.0 - (saturation * (1.0 - f)));\n\n            switch (i) {\n                case 0:\n                    red = value;\n                    green = t;\n                    blue = p;\n                    break;\n                case 1:\n                    red = q;\n                    green = value;\n                    blue = p;\n                    break;\n                case 2:\n                    red = p;\n                    green = value;\n                    blue = t;\n                    break;\n                case 3:\n                    red = p;\n                    green = q;\n                    blue = value;\n                    break;\n                case 4:\n                    red = t;\n                    green = p;\n                    blue = value;\n                    break;\n                default:\n                    red = value;\n                    green = p;\n                    blue = q;\n                    break;\n            }\n        }\n\n        return this._roundRGB(red * 255, green * 255, blue * 255);\n    }\n\n    // /**\n    //  * Convert the RGB color to a HSV color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n    static RGBToHSV(red, green, blue) {\n        const circle = this._prepareRGBToCircle(red, green, blue);\n        const value = circle.max.toFixed(11);\n        let saturation = (circle.max === 0) ? 0 : (circle.d / circle.max);\n        saturation = saturation.toFixed(11);\n        const hsv = {}\n        hsv.hue = circle.hue;\n        hsv.saturation = saturation\n        hsv.value = value\n\n        return hsv\n    }\n\n    // /**\n    //  * Convert the HSB color to a RGB color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $saturation\n    //  * @param float $brightness\n    //  *\n    //  * @return array\n    //  */\n\n\n    static HSBToRGB(hue, saturation, brightness) {\n        return this.HSVToRGB(hue, saturation, brightness);\n    }\n\n    // /**\n    //  * Convert the RGB color to a HSB color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]|float[]\n    //  */\n    static RGBToHSB(red, green, blue) {\n        return this.RGBToHSV(red, green, blue);\n    }\n\n    // /**\n    //  * Convert the RGB color to a RGB color from the safe color list.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]\n    //  */\n\n    static RGBToSafe(red, green, blue) {\n        const colors = websafe_colors;\n        let nearest = colors.shift();\n        let shortest_distance = this._getRGBDistance(red, green, blue, ...nearest);\n        colors.forEach(color => {\n            let current_distance = this._getRGBDistance(red, green, blue, ...color);\n            if (current_distance < shortest_distance) {\n                shortest_distance = current_distance;\n                nearest = color;\n            }\n        })\n\n        return this._roundRGB(...nearest);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * @return array\n    //  */\n\n    static RGBToCMY(red, green, blue) {\n        const cyan = 1 - (red / 255);\n        const magenta = 1 - (green / 255);\n        const yellow = 1 - (blue / 255);\n        const cmy = {};\n        cmy.cyan = cyan.toFixed(2) * 100;\n        cmy.magenta = magenta.toFixed(2) * 100;\n        cmy.yellow = yellow.toFixed(2) * 100;\n\n        return cmy;\n    }\n\n    // /**\n    //  * @param float $cyan\n    //  * @param float $magenta\n    //  * @param float $yellow\n    //  * @return int[]\n    //  */\n\n\n    static CMYToRGB(cyan, magenta, yellow) {\n        cyan = cyan / 100\n        magenta = magenta / 100\n        yellow = yellow / 100\n        const red = (1 - cyan) * 255;\n        const green = (1 - magenta) * 255;\n        const blue = (1 - yellow) * 255;\n\n        return this._roundRGB(red, green, blue);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * X, Y and Z output refer to a D65/2° standard illuminant.\n    //  * @return array\n    //  */\n\n    static RGBToXYZ(red, green, blue) {\n        const redCulc = this._prepareColorToXYZConversion(red);\n        const greenCulc = this._prepareColorToXYZConversion(green);\n        const blueCulc = this._prepareColorToXYZConversion(blue);\n\n        const X = redCulc * 0.4124 + greenCulc * 0.3576 + blueCulc * 0.1805;\n        const Y = redCulc * 0.2126 + greenCulc * 0.7152 + blueCulc * 0.0722;\n        const Z = redCulc * 0.0193 + greenCulc * 0.1192 + blueCulc * 0.9505;\n\n        const xyz = {};\n        xyz.X = X.toFixed(2);\n        xyz.Y = Y.toFixed(2);\n        xyz.Z = Z.toFixed(2);\n        return xyz;\n    }\n\n    // /**\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $X\n    //  * @param float $Y\n    //  * @param float $Z\n    //  * @return array\n    //  */\n\n    static XYZToRGB(X, Y, Z) {\n        X = Number(X) / 100;\n        Y = Number(Y) / 100;\n        Z = Number(Z) / 100;\n        console.log(X, Y, Z);\n        let red = X * 3.2406 + Y * -1.5372 + Z * -0.4986;\n        let green = X * -0.9689 + Y * 1.8758 + Z * 0.0415;\n        let blue = X * 0.0557 + Y * -0.2040 + Z * 1.0570;\n\n        red = this._prepareColorForXYZToRGBOutput(red);\n        green = this._prepareColorForXYZToRGBOutput(green);\n        blue = this._prepareColorForXYZToRGBOutput(blue);\n        console.log(red, green, blue);\n\n        return this._roundRGB(red, green, blue);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * @return array\n    //  */\n\n\n    static RGBToYxy(red, green, blue) {\n        console.log(this.RGBToXYZ(red, green, blue))\n        const XYZ = this.RGBToXYZ(red, green, blue);\n        const X = Number(XYZ.X);\n        const Y = Number(XYZ.Y);\n        const Z = Number(XYZ.Z);\n        const x = X / (X + Y + Z);\n        const y = Y / (X + Y + Z);\n\n        const yxy = {};\n        yxy.Y = Math.round(Y);\n        yxy.x = x.toFixed(2) * 100;\n        yxy.y = y.toFixed(2) * 100;\n        return yxy;\n    }\n\n    // /**\n    //  * @param float $Y\n    //  * @param float $x\n    //  * @param float $y\n    //  * @return array\n    //  */\n\n    static YxyToRGB(Y, x, y) {\n        x = x / 100\n        y = y / 100\n        const X = x * (Y / y);\n        const Z = (1 - x - y) * (Y / y);\n\n        return this.XYZToRGB(X, Y, Z);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $refX\n    //  * @param float|int $refY\n    //  * @param float $refZ\n    //  * @return array\n    //  */\n\n    static RGBToLab(\n        red,\n        green,\n        blue,\n        refX = 95.047,\n        refY = 100,\n        refZ = 108.883\n    ) {\n        let { X, Y, Z } = this.RGBToXYZ(red, green, blue);\n        X = X / refX;\n        Y = Y / refY;\n        Z = Z / refZ;\n\n        X = X > 0.008856 ? Math.pow(X, 1 / 3) : (7.787 * X) + (16 / 116);\n        Y = Y > 0.008856 ? Math.pow(Y, 1 / 3) : (7.787 * Y) + (16 / 116);\n        Z = Z > 0.008856 ? Math.pow(Z, 1 / 3) : (7.787 * Z) + (16 / 116);\n\n        const L = (116 * Y) - 16;\n        const a = 500 * (X - Y);\n        const b = 200 * (Y - Z);\n\n        const lab = {};\n        lab.L = L;\n        lab.a = a;\n        lab.b = b;\n\n        return lab;\n    }\n\n    // /**\n    //  * @param float $L\n    //  * @param float $a\n    //  * @param float $b\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $refX\n    //  * @param float|int $refY\n    //  * @param float $refZ\n    //  * @return int[]\n    //  */\n\n    static LabToRGB(\n        L,\n        a,\n        b,\n        refX = 95.047,\n        refY = 100,\n        refZ = 108.883\n    ) {\n        let Y = (L + 16) / 116;\n        let X = a / 500 + Y;\n        let Z = Y - b / 200;\n\n        Y = Math.pow(Y, 3) > 0.008856 ? Math.pow(Y, 3) : (Y - 16 / 116) / 7.787;\n        X = Math.pow(X, 3) > 0.008856 ? Math.pow(X, 3) : (X - 16 / 116) / 7.787;\n        Z = Math.pow(Z, 3) > 0.008856 ? Math.pow(Z, 3) : (Z - 16 / 116) / 7.787;\n\n        X = X * refX;\n        Y = Y * refY;\n        Z = Z * refZ;\n\n        return this.XYZToRGB(X, Y, Z);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * @return array\n    //  */\n\n    static RGBToLCH(red, green, blue) {\n        let { L, a, b } = this.RGBToLab(red, green, blue);\n        let H = Math.atan2(b, a);\n        H = H > 0 ? (H / Math.PI) * 180 : 360 - (Math.abs(H) / Math.PI) * 180;\n\n        L = L.toFixed(4);\n        const C = (Math.sqrt((Math.pow(a, 2) + Math.pow(b, 2)))).toFixed(4);\n        H = Math.floor(H % 360);\n        const lch = {};\n        lch.L = Number(L);\n        lch.C = Number(C);\n        lch.H = H;\n\n        return lch;\n    }\n\n    // /**\n    //  * @param float $L\n    //  * @param float $C\n    //  * @param float $H - range = 0 ÷ 360°\n    //  * @return array\n    //  */\n\n    static LCHToRGB(L, C, H) {\n        const radiansH = (Math.PI * H) / 180;\n        const a = Math.cos(radiansH) * C;\n        const b = Math.sin(radiansH) * C;\n\n        return this.LabToRGB(L, a, b);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $refX\n    //  * @param float|int $refY\n    //  * @param float $refZ\n    //  * @return array\n    //  */\n\n    static RGBToHunterLab(\n        red,\n        green,\n        blue,\n        refX = 95.047,\n        refY = 100,\n        refZ = 108.883\n    ) {\n        const { X, Y, Z } = this.RGBToXYZ(red, green, blue);\n        const Ka = (175 / 198.04) * (refY + refX);\n        const Kb = (70 / 218.11) * (refY + refZ);\n\n        const Hunter_L = 100 * Math.sqrt(Y / refY);\n        const Hunter_a = Ka * (((X / refX) - (Y / refY)) / Math.sqrt(Y / refY));\n        const Hunter_b = Kb * (((Y / refY) - (Z / refZ)) / Math.sqrt(Y / refY));\n\n        const hunterLab = {};\n        hunterLab.Hunter_L = Hunter_L;\n        hunterLab.Hunter_a = Hunter_a;\n        hunterLab.Hunter_b = Hunter_b;\n\n        return hunterLab;\n    }\n\n    // /**\n    //  * @param float $Hunter_L\n    //  * @param float $Hunter_a\n    //  * @param float $Hunter_b\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $refX\n    //  * @param float|int $refY\n    //  * @param float $refZ\n    //  * @return array\n    //  */\n\n    static HunterLabToRGB(\n        Hunter_L,\n        Hunter_a,\n        Hunter_b,\n        refX = 95.047,\n        refY = 100,\n        refZ = 108.883\n    ) {\n        const Ka = (175.0 / 198.04) * (refY + refX);\n        const Kb = (70.0 / 218.11) * (refY + refZ);\n\n        const Y = Math.pow((Hunter_L / refY), 2) * 100;\n        const X = (Hunter_a / Ka * Math.sqrt(Y / refY) + (Y / refY)) * refX;\n        const Z = - (Hunter_b / Kb * Math.sqrt(Y / refY) - (Y / refY)) * refZ;\n\n        return this.XYZToRGB(X, Y, Z);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $refX\n    //  * @param float|int $refY\n    //  * @param float $refZ\n    //  * @return array\n    //  */\n\n    static RGBToLuv(\n        red,\n        green,\n        blue,\n        refX = 95.047,\n        refY = 100,\n        refZ = 108.883\n    ) {\n        let { X, Y, Z } = this.RGBToXYZ(red, green, blue);\n\n        const U = (4 * X) / (X + (15 * Y) + (3 * Z));\n        const V = (9 * Y) / (X + (15 * Y) + (3 * Z));\n        Y /= 100;\n        Y = Y > 0.008856 ? Math.pow(Y, 1 / 3) : (7.787 * Y) + (16 / 116);\n\n        const refU = (4 * refX) / (refX + (15 * refY) + (3 * refZ));\n        const refV = (9 * refY) / (refX + (15 * refY) + (3 * refZ));\n\n        const L = (116 * Y) - 16;\n        const u = 13 * L * (U - refU);\n        const v = 13 * L * (V - refV);\n\n        const luv = {};\n        luv.L = L;\n        luv.u = u;\n        luv.v = v;\n\n        return luv;\n    }\n\n    // /**\n    //  * @param float $L\n    //  * @param float $u\n    //  * @param float $v\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $refX\n    //  * @param float|int $refY\n    //  * @param float $refZ\n    //  * @return int[]\n    //  */\n\n    static LuvToRGB(\n        L,\n        u,\n        v,\n        refX = 95.047,\n        refY = 100,\n        refZ = 108.883\n    ) {\n        let Y = (L + 16) / 116;\n        Y = Math.pow(Y, 3) > 0.008856 ? Math.pow(Y, 3) : ((Y - 16 / 116) / 7.787);\n\n        const refU = (4 * refX) / (refX + (15 * refY) + (3 * refZ));\n        const refV = (9 * refY) / (refX + (15 * refY) + (3 * refZ));\n\n        const U = u / (13 * L) + refU;\n        const V = v / (13 * L) + refV;\n\n        Y *= 100;\n        const X = - (9 * Y * U) / ((U - 4) * V - U * V);\n        const Z = (9 * Y - (15 * V * Y) - (V * X)) / (3 * V);\n\n        return this.XYZToRGB(X, Y, Z);\n    }\n\n    // /**\n    //  * @param $color\n    //  * @return float\n    //  */\n\n    static _prepareColorForXYZToRGBOutput(color) {\n        const colors = (color > 0.0031308) ? (1.055 * Math.pow(color, (1 / 2.4)) - 0.055) : (12.92 * color);\n\n        return colors * 255;\n    }\n\n    // /**\n    //  * @param int $color\n    //  * @return float\n    //  */\n\n    static _prepareColorToXYZConversion(color) {\n        let colorCulc = color / 255;\n        colorCulc = colorCulc > 0.04045 ? Math.pow(((colorCulc + 0.055) / 1.055), 2.4) : colorCulc / 12.92;\n        colorCulc *= 100;\n\n        return colorCulc;\n    }\n\n    // /**\n    //  * Rounds the RGB colors to integers.\n    //  *\n    //  * @param int|float $red\n    //  * @param int|float $green\n    //  * @param int|float $blue\n    //  *\n    //  * @return int[]\n    //  */\n\n    static _roundRGB(red, green, blue) {\n        red = Math.round(red);\n        green = Math.round(green);\n        blue = Math.round(blue);\n        const rgb = {};\n        rgb.red = red;\n        rgb.green = green;\n        rgb.blue = blue;\n\n        return rgb\n    }\n\n    // /**\n    //  * Prepares RGB to HLS/HSB conversion.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n    static _prepareRGBToCircle(red, green, blue) {\n        red /= 255;\n        green /= 255;\n        blue /= 255;\n\n        const max = Math.max(red, green, blue);\n        const min = Math.min(red, green, blue);\n        const d = max - min;\n        let hue = d\n\n        if (d !== 0) {\n            if (max === red) {\n                hue = ((green - blue) / d) % 6;\n            } else if (max === green) {\n                hue = 2 + (blue - red) / d;\n            } else {\n                hue = 4 + (red - green) / d;\n            }\n            hue = Math.round(hue * 60);\n            if (hue < 0) {\n                hue = 360 + hue;\n            }\n        } else {\n            hue = 0;\n        }\n\n        const result = {};\n        result.min = min;\n        result.max = max;\n        result.d = d;\n        result.hue = hue;\n\n        return result;\n    }\n\n    // /**\n    //  * Prepare Hue value to RGB conversion.\n    //  *\n    //  * @param $v1\n    //  * @param $v2\n    //  * @param $vH\n    //  *\n    //  * @return float\n    //  */\n\n    static _HueToRGB(v1, v2, vH) {\n        if (vH < 0) {\n            ++vH;\n        }\n\n        if (vH > 1) {\n            --vH;\n        }\n\n        if ((6 * vH) < 1) {\n            return (v1 + (v2 - v1) * 6 * vH);\n        }\n\n        if ((2 * vH) < 1) {\n            return v2;\n        }\n\n        if ((3 * vH) < 2) {\n            return (v1 + (v2 - v1) * ((2.0 / 3) - vH) * 6);\n        }\n\n        return v1;\n    }\n\n    // /**\n    //  * Return distance between two RGB colors.\n    //  *\n    //  * @param int $r0\n    //  * @param int $g0\n    //  * @param int $b0\n    //  * @param int $r1\n    //  * @param int $g1\n    //  * @param int $b1\n    //  *\n    //  * @return int\n    //  */\n\n    static _getRGBDistance(r1, g1, b1, r0, g0, b0,) {\n        const diff = Math.abs(r0 - r1);\n        const diff1 = diff + Math.abs(g0 - g1);\n        const diff2 = diff1 + Math.abs(b0 - b1);\n\n        return diff2;\n    }\n}\n","import Converter from './converter.js'\n\nexport default class Color {\n    constructor() {\n        this.red = 255;\n        this.green = 255;\n        this.blue = 255;\n        this.alpha = 1;\n        this.bgRed = 255;\n        this.bgGreen = 255;\n        this.bgBlue = 255;\n    }\n\n    setRGB(red, green, blue) {\n        this.red = red;\n        this.green = green;\n        this.blue = blue;\n\n        this.resetAlpha();\n\n        return this._checkColor();\n    }\n\n    getRGB(val = '') {\n        let rgb = {};\n        if (this.alpha !== 1.0) {\n            rgb = Converter.RGBAToRGB(\n                this.red,\n                this.green,\n                this.blue,\n                this.alpha,\n                this.bgRed,\n                this.bgGreen,\n                this.bgBlue\n            );\n        } else {\n            rgb = this._compactColor(this.red, this.green, this.blue);\n        }\n\n        return this.getRGBValue(rgb, val);\n    }\n\n    setAlpha(alpha) {\n        this.alpha = alpha;\n\n        return this._checkAlpha();\n    }\n\n    getAlpha() {\n        return this.alpha;\n    }\n\n    setBgRGB(red, green, blue) {\n        this.bgRed = red;\n        this.bgGreen = green;\n        this.bgBlue = blue;\n\n        return this._checkBgColor();\n    }\n\n    getBgRGB(val = '') {\n        const rgb = this._compactColor(this.bgRed, this.bgGreen, this.bgBlue);\n\n        return this.getRGBValue(rgb, val);\n    }\n\n    getRGBValue(rgb, val = '') {\n        switch (val) {\n            case 'r':\n            case 'red':\n                return rgb = rgb['red'];\n            case 'g':\n            case 'green':\n                return rgb = rgb['green'];\n            case 'b':\n            case 'blue':\n                return rgb = rgb['blue'];\n            default:\n                return rgb;\n        }\n    }\n\n    setRGBA(\n        red,\n        green,\n        blue,\n        alpha,\n        bgRed = 255,\n        bgGreen = 255,\n        bgBlue = 255\n    ) {\n        this.setRGB(red, green, blue)\n            .setAlpha(alpha)\n            .setBgRGB(bgRed, bgGreen, bgBlue);\n\n        return this;\n    }\n\n    getRGBA() {\n        return this._compactColor(this.red, this.green, this.blue, this.alpha);\n    }\n\n    setHEX(hex) {\n        hex = hex.toLowerCase().trim();\n        switch (hex.length) {\n            case 1:\n                hex = hex + hex + hex + hex + hex + hex;\n                break;\n            case 2:\n                hex = hex[0] + hex[1] + hex[0] + hex[1] + hex[0] + hex[1];\n                break;\n            case 3:\n                hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n                break;\n            case 6:\n                break;\n            default:\n                throw new Error('Invalid HEX length!');\n        }\n        const rgb = Converter.HEXToRGB(hex);\n\n        this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n\n        return this;\n    }\n\n    getHEX() {\n        const rgb = this.getRGB();\n        return Converter.RGBToHEX(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setCMYK(cyan, magenta, yellow, key) {\n        const rgb = Converter.CMYKToRGB(cyan, magenta, yellow, key);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getCMYK() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToCMYK(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setCMY(cyan, magenta, yellow) {\n        const rgb = Converter.CMYToRGB(cyan, magenta, yellow);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n\n    }\n\n    getCMY() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToCMY(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setHLSA(hue, lightness, saturation, alpha) {\n        const rgba = Converter.HLSAToRGBA(hue, lightness, saturation, alpha);\n\n        return this.setRGBA(rgba['red'], rgba['green'], rgba['blue'], rgba['alpha']);\n    }\n\n    getHLSA() {\n        const rgb = this.getRGBA();\n\n        return Converter.RGBAToHLSA(rgb['red'], rgb['green'], rgb['blue'], rgb['alpha']);\n    }\n\n    setHLS(hue, lightness, saturation) {\n        const rgb = Converter.HLSToRGB(hue, lightness, saturation);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getHLS() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToHLS(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setHSB(hue, saturation, brightness) {\n        const rgb = Converter.HSBToRGB(hue, saturation, brightness);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getHSB() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToHSB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setName(name) {\n        const rgb = Converter.NameToRGB(name);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getName() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToName(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setHSL(hue, saturation, lightness) {\n        const rgb = Converter.HSLToRGB(hue, saturation, lightness);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getHSL() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToHSL(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setHSI(hue, saturation, intensity) {\n        return this.setHSL(hue, saturation, intensity);\n    }\n\n    getHSI() {\n        return this.getHSL();\n    }\n\n    setHSLA(hue, saturation, lightness, alpha) {\n        const rgb = Converter.HSLToRGB(hue, saturation, lightness);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']).setAlpha(alpha);\n    }\n\n    getHSLA() {\n        const rgba = this.getRGBA();\n\n        return Converter.RGBAToHSLA(rgba['red'], rgba['green'], rgba['blue'], rgba['alpha']);\n    }\n\n    setHSIA(hue, saturation, lightness, alpha) {\n        const rgb = Converter.HSIToRGB(hue, saturation, lightness);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']).setAlpha(alpha);\n    }\n\n    getHSIA() {\n        const rgba = this.getRGBA();\n\n        return Converter.RGBAToHSIA(rgba['red'], rgba['green'], rgba['blue'], rgba['alpha']);\n    }\n\n    setSafe() {\n        const rgb = this.getSafe();\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getSafe() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToSafe(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setXYZ(X, Y, Z) {\n        const rgb = Converter.XYZToRGB(X, Y, Z);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getXYZ() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToXYZ(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setLab(L, a, b) {\n        const rgb = Converter.LabToRGB(L, a, b);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getLab() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToLab(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setLCH(L, C, H) {\n        const rgb = Converter.LCHToRGB(L, C, H);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getLCH() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToLCH(rgb['red'], rgb['green'], rgb['blue']);\n    }\n    setYxy(Y, x, y) {\n        const rgb = Converter.YxyToRGB(Y, x, y);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getYxy() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToYxy(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setHunterLab(L, a, b) {\n        const rgb = Converter.HunterLabToRGB(L, a, b);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getHunterLab() {\n        const rgb = this.getRGB()\n\n        return Converter.RGBToHunterLab(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setHSV(H, S, V) {\n        const rgb = Converter.HSVToRGB(H, S, V);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getHSV() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToHSV(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setLuv(L, u, v) {\n        const rgb = Converter.LuvToRGB(L, u, v);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getLuv() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToLuv(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setRandom() {\n        const rgb = this.getRandom();\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getRandom() {\n        return this._compactColor(Math.floor(Math.random() * 255), Math.floor(Math.random() * 255), Math.floor(Math.random() * 255));\n    }\n\n    resetAlpha() {\n        return this.setAlpha(1.0).setBgRGB(255, 255, 255);\n    }\n\n    _checkColor() {\n        if (!this._isRGBValid(this.red, this.green, this.blue)) {\n            throw new Error('Invalid background color value!');\n        }\n\n        return this;\n    }\n\n    _checkAlpha() {\n        if (this.alpha < 0 || this.alpha > 1) {\n            throw new Error('Invalid alpha value!');\n        }\n\n        return this;\n    }\n\n    _checkBgColor() {\n        if (!this._isRGBValid(this.bgRed, this.bgGreen, this.bgBlue)) {\n            throw new Error('Invalid background color value!');\n        }\n\n        return this;\n    }\n\n    _isRGBValid(red, green, blue) {\n        return red >= 0 && red <= 255\n            && green >= 0 && green <= 255\n            && blue >= 0 && blue <= 255;\n    }\n\n    _compactColor(red, green, blue, alpha = null) {\n        const result = {}\n        result.red = red;\n        result.green = green;\n        result.blue = blue;\n\n        if (alpha === null) {\n            return result;\n        }\n        result.alpha = alpha;\n        return result;\n    }\n\n}\n\n\n"],"names":["Converter","red","green","blue","alpha","bgRed","bgGreen","bgBlue","result","this","_roundRGB","rgba","hex","exec","rgb","parseInt","Number","toString","slice","cyan","magenta","yellow","key","Math","round","calcRed","calcGreen","calcBlue","max","cmyk","toFixed","name","color","nameColors","nameColor","Error","hue","saturation","lightness","c","abs","x","m","cmin","min","cmax","delta","hsl","HSLToRGB","hsla","RGBToHSL","intensity","HSIToRGB","hsia","RGBToHSI","HLSToRGB","hlsa","RGBToHLS","hls","value","i","floor","f","p","q","t","circle","_prepareRGBToCircle","d","hsv","brightness","HSVToRGB","RGBToHSV","colors","websafe_colors","nearest","shift","shortest_distance","_getRGBDistance","forEach","current_distance","cmy","redCulc","_prepareColorToXYZConversion","greenCulc","blueCulc","X","Y","Z","xyz","console","log","_prepareColorForXYZToRGBOutput","RGBToXYZ","XYZ","y","yxy","XYZToRGB","refX","refY","refZ","pow","L","a","b","lab","RGBToLab","H","atan2","PI","C","sqrt","lch","radiansH","cos","sin","LabToRGB","Ka","Kb","Hunter_L","Hunter_a","Hunter_b","hunterLab","U","V","refU","refV","u","v","luv","colorCulc","v1","v2","vH","r1","g1","b1","r0","g0","b0","Color","resetAlpha","_checkColor","val","RGBAToRGB","_compactColor","getRGBValue","_checkAlpha","_checkBgColor","setRGB","setAlpha","setBgRGB","toLowerCase","trim","length","HEXToRGB","getRGB","RGBToHEX","CMYKToRGB","RGBToCMYK","CMYToRGB","RGBToCMY","HLSAToRGBA","setRGBA","getRGBA","RGBAToHLSA","HSBToRGB","RGBToHSB","NameToRGB","RGBToName","setHSL","getHSL","RGBAToHSLA","RGBAToHSIA","getSafe","RGBToSafe","LCHToRGB","RGBToLCH","YxyToRGB","RGBToYxy","HunterLabToRGB","RGBToHunterLab","S","LuvToRGB","RGBToLuv","getRandom","random","_isRGBValid"],"sourceRoot":""}