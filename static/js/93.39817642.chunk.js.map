{"version":3,"file":"static/js/93.39817642.chunk.js","mappings":"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","sources":["pages/Home.styled.js","components/ui/Section/Section.styled.js","components/ui/Section/Section.jsx","components/colorPicker/colorPicker.styled.js","components/listColorsMenu/listColorsMenu.styled.js","util/colorPalette.js","components/listColorsMenu/listColorsMenu.jsx","components/Converter/ConverterColor.styled.js","components/colorsInputPicker/colorsInputPicker.styled.js","components/colorsInputPicker/colorsInputPicker.jsx","util/getColor.js","components/Converter/ConverterColor.jsx","util/ActivElement/activInputNameOrHEX.js","util/ActivElement/ActivSetInputNameOrHEX.js","util/ActivElement/activColorInput.js","util/ActivElement/nameActivMenu.js","util/ActivElement/activColorInputValue.js","util/ActivElement/activFlowerSystemt.js","util/ActivElement/actinInput.js","util/ActivElement/activInputSecond.js","util/ActivElement/activInputThird.js","util/ActivElement/activInputFourth.js","util/ActivElement/activSetInputs.js","util/ActivElement/activSetInputsSecond.js","util/ActivElement/activSetInputsThird.js","util/ActivElement/activSetInputsFourth.js","util/saturationToInput.js","util/ColumnConvert.js","js/converter.js","js/color.js","components/colorPicker/colorPicker.jsx","main/Main.styled.js","components/DescriptionText/DescriptionText.styled.js","components/DescriptionText/DescriptionText.jsx","main/Main.jsx","pages/Home.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wraper = styled.div`\n  width-max:1440px;\n  height: 100%;\n  background-color: #f5fffa;\n  padding-left: 147px;\n  padding-right: 147px;\n`;\n","import styled from 'styled-components';\n\nexport const Sections = styled.section`\n padding: 30px 0px;\n`;\n","import { Sections } from './Section.styled';\n\nexport const Section = ({ children }) => {\n  return <Sections>{children}</Sections>;\n};\n","import styled from 'styled-components';\n\n\nexport const WrapperColorPickerSection = styled.div`\n/* padding-left: 147px;\npadding-right: 147px; */\n`\n\nexport const WrapperColorPicker = styled.div`\ndisplay:flex;\nbackground-color: #F5F5F5;\npadding-top: 38px;\npadding-left:87px;\npadding-right:110px;\npadding-bottom:53px;\n`\n\nexport const WrapperHue = styled.div`\nmargin-left:77px;\n`\nexport const ColorDisplay = styled.div`\nwidth:225px;\nheight:225px;\n\n`\nexport const WrappeSaturation = styled.div`\nmargin-left:12px;\n\n`\n","import styled from \"styled-components\";\n\nexport const ListNameColor = styled.ul`\nposition: absolute;\npadding-top:21px;\npadding-left:30px;\npadding-right:61px;\n\ndisplay:flex;\nflex-direction: column;\nflex-wrap: wrap;\nheight: 225px;\nwidth: 435px;\n&:not(:last-child) {\n    gap-right:46px;;\n  }\n  /* display:grid; */\n  /* grid-template-columns: 48px 44px 38px 78px;\n  grid-template: repeat(6,48px)/ repeat(6,44px)/ repeat(6,38px)/ repeat(3,78px); */\n  /* grid-template-columns: 48px 44px 38px 78px;\n  grid-gap: 5px 50px;\n  align-items: start; */\n\n`\n\nexport const ItemtColorMenu = styled.li`\nposition: relative;\nwidth : auto;\nheight:35px;\nlist-style-type: none;\nfont-family: 'Roboto';\nfont-style: normal;\nfont-weight: 300;\nfont-size: 16px;\nline-height: 35px;\n`","const colorPalette = [\n    'RGB',\n    'RGBA',\n    'HEX',\n    'CMYK',\n    'Name',\n    'HSL',\n    'HSLA',\n    'HSIA',\n    'HLSA',\n    'HSI',\n    'HLS',\n    'HSV',\n    'HSB',\n    'Safe',\n    'CMY',\n    'XYZ',\n    'Yxy',\n    'Lab',\n    'LCH',\n    'HunterLab',\n    'Luv'\n];\n\nexport default colorPalette\n    ;","import { ItemtColorMenu, ListNameColor } from './listColorsMenu.styled';\nimport colorPalette from '../../util/colorPalette';\n// import { useEffect, useState } from 'react';\n\nconst ListColorMenu = ({ target }) => {\n  return (\n    <ListNameColor>\n      {colorPalette.map(palette => (\n        <ItemtColorMenu key={palette} onClick={target}>\n          {palette}\n        </ItemtColorMenu>\n      ))}\n    </ListNameColor>\n  );\n};\n\nexport default ListColorMenu;\n","import styled from \"styled-components\";\n\nexport const WrraperListColum = styled.div`\nheight: 245px;\nwidth: 435px;\nbackground-color: #D9D9D9;\nposition: absolute;\nz-index: 2\n`\n\nexport const BtnPicker = styled.button`\nwidth: 100px;\nheight: 40px;\nborder-top-left-radius:10px;\nborder-top-right-radius:10px;\n&:not(:first-child) {\n    margin-left:10px;\n  }`\n\nexport const Btn = styled.button`\nwidth: 25px;\nheight: 40px;\nborder-top-left-radius:5px;\nborder-top-right-radius:5px;\nmargin-left:10px;\n`\n\nexport const InputColor = styled.input`\ndisplay:block;\nwidth: 435px;\nheight: 25px;\npadding: 20px 30px 15px 30px;\n  `\n\nexport const WrraperOnverter = styled.div`\ndisplay: flex;\n`\n\nexport const WrraperInput = styled.div`\ndisplay: relative;\n`\n\nexport const WrraperRightsBtnGroup = styled.div`\nmargin-left:53px`","import styled from \"styled-components\";\n\nexport const WrapperInput = styled.div`\ndisplay: flex `\n\nexport const WrapperNameColor = styled.div`\ndisplay: flex;\n  align-items: center;\n  justify-content: center;\n  &:not(:first-child) {\n    margin-left:10px;\n  };\n\nwidth:35px;\nheight:45px;`\n\nexport const Input = styled.input`\nwidth:60px;\nheight:45px;`\n\nexport const InputHexOrName = styled.input`\nwidth:380px;\nheight:45px;`\n\nexport const Tekst = styled.p`\n\n`","import { useEffect, useState } from 'react';\nimport {\n  Input,\n  InputHexOrName,\n  Tekst,\n  WrapperInput,\n  WrapperNameColor,\n} from './colorsInputPicker.styled';\n\nexport const ColorsInputPicker = ({\n  activFlower,\n  activSetNameOrHEX,\n  activNameOrHEX,\n  setInput,\n  setInputSecond,\n  setInputThird,\n  setInputFourth,\n  input,\n  inputSecond,\n  inputThird,\n  inputFourth,\n}) => {\n  const [nameOrHex, setNameOrHex] = useState(false);\n  const namePallete = activFlower.split('');\n\n  useEffect(() => {\n    if (activFlower === 'HEX' || activFlower === 'Name') {\n      setNameOrHex(true);\n    } else {\n      setNameOrHex(false);\n    }\n  }, [activFlower]);\n\n  return (\n    <div>\n      {nameOrHex ? (\n        <WrapperInput>\n          <WrapperNameColor>\n            <Tekst>#</Tekst>\n          </WrapperNameColor>\n          <InputHexOrName\n            onChange={event => activSetNameOrHEX(event.target.value)}\n            value={activNameOrHEX}\n          />\n        </WrapperInput>\n      ) : (\n        <WrapperInput>\n          <WrapperNameColor>\n            <Tekst>{namePallete[0] || ''}</Tekst>\n          </WrapperNameColor>\n          <Input\n            onChange={event =>\n              setInput(event.target.value.replace(/[^0-9 .]/g, ''))\n            }\n            value={input}\n          />\n          <WrapperNameColor>\n            <Tekst>{namePallete[1] || ''}</Tekst>\n          </WrapperNameColor>\n          <Input\n            onChange={event =>\n              setInputSecond(event.target.value.replace(/[^0-9 .]/g, ''))\n            }\n            value={inputSecond}\n          />\n          <WrapperNameColor>\n            <Tekst>{namePallete[2] || ''}</Tekst>\n          </WrapperNameColor>\n          <Input\n            onChange={event =>\n              setInputThird(event.target.value.replace(/[^0-9 .]/g, ''))\n            }\n            value={inputThird}\n          />\n          {namePallete[3] ? (\n            <>\n              <WrapperNameColor>\n                <Tekst>{namePallete[3] || ''}</Tekst>\n              </WrapperNameColor>\n              <Input\n                // type=\"Number\"\n                onChange={event =>\n                  setInputFourth(event.target.value.replace(/[^0-9 .]/g, ''))\n                }\n                value={inputFourth}\n                // min=\"0\"\n                // max=\"1\"\n              />\n            </>\n          ) : null}\n          <Input readOnly value=\"100%\" />\n        </WrapperInput>\n      )}\n    </div>\n  );\n};\n","export function getColor(color, options) {\n    let result = {};\n    switch (options) {\n        case 'RGB':\n            result = color.getRGB()\n            break;\n        case 'RGBA':\n            result = color.getRGBA()\n            break;\n        case 'HEX':\n            result = color.getHEX()\n            break;\n        case 'CMYK':\n            result = color.getCMYK()\n            break;\n        case 'Name':\n            result = color.getName()\n            break;\n        case 'HSL':\n            result = color.getHSL()\n            break;\n        case 'HSLA':\n            result = color.getHSLA()\n            break;\n        case 'HSIA':\n            result = color.getHSIA()\n            break;\n        case 'HLSA':\n            result = color.getHLSA()\n            break;\n        case 'HSI':\n            result = color.getHSI()\n            break;\n        case 'HLS':\n            result = color.getHLS()\n            break;\n        case 'HSV':\n            result = color.getHSV()\n            break;\n        case 'HSB':\n            result = color.getHSB()\n            break;\n        case 'Safe':\n            result = color.getSafe()\n            break;\n        case 'CMY':\n            result = color.getCMY()\n            break;\n        case 'XYZ':\n            result = color.getXYZ()\n            break;\n        case 'Yxy':\n            result = color.getYxy()\n            break;\n        case 'Lab':\n            result = color.getLab()\n            break;\n        case 'LCH':\n            result = color.getLCH()\n            break;\n        case 'HunterLab':\n            result = color.getHunterLab()\n            break;\n        case 'Luv':\n            result = color.getLuv()\n            break;\n        default:\n            result = '';\n    }\n    return result\n}","/* eslint-disable react-hooks/exhaustive-deps */\nimport ListColorMenu from 'components/listColorsMenu/listColorsMenu';\nimport { useState, useEffect } from 'react';\nimport {\n  Btn,\n  BtnPicker,\n  InputColor,\n  WrraperInput,\n  WrraperListColum,\n  WrraperOnverter,\n  WrraperRightsBtnGroup,\n} from './ConverterColor.styled';\nimport { ColorsInputPicker } from '../colorsInputPicker/colorsInputPicker';\nimport { columnConvert } from 'util/ColumnConvert';\nimport { nameActivMenu } from 'util/ActivElement/nameActivMenu';\nimport { activColorInputValue } from 'util/ActivElement/activColorInputValue';\nimport { activFlowerSystemt } from 'util/ActivElement/activFlowerSystemt';\nimport { saturationToInput } from 'util/saturationToInput';\nimport { activColorInput } from 'util/ActivElement/activColorInput';\nimport { activInputs } from 'util/ActivElement/actinInput';\nimport { activInputsSecond } from 'util/ActivElement/activInputSecond';\nimport { activInputsThird } from 'util/ActivElement/activInputThird';\nimport { activInputsFourth } from 'util/ActivElement/activInputFourth';\nimport { activSetInputs } from 'util/ActivElement/activSetInputs';\nimport { activSetInputsSecond } from 'util/ActivElement/activSetInputsSecond';\nimport { activSetInputsThird } from 'util/ActivElement/activSetInputsThird';\nimport { activSetInputsFourth } from 'util/ActivElement/activSetInputsFourth';\nimport { ActivInputNameOrHEX } from 'util/ActivElement/activInputNameOrHEX';\nimport { activSetInputNameOrHEX } from 'util/ActivElement/ActivSetInputNameOrHEX';\n\nconst ConverterColor = ({ color, bgColor, saturation }) => {\n  //////input set\n  const [colorInput, setColorInput] = useState('');\n  const [colorInputSecond, setColorInputSecond] = useState('');\n  const [colorInputThird, setColorInputThird] = useState('');\n  const [colorInputFourth, setColorInputFourth] = useState('');\n  const [rightsInput, setRightsInput] = useState('');\n\n  //////////////input state in colorsInputPicker\n  //Neme or HEX\n  const [inputNameOrHEX, setInputNameOrHEX] = useState('');\n  const [inputNameOrHEXSecond, setInputNameOrHEXSecond] = useState('');\n  const [inputNameOrHEXThird, setInputNameOrHEXThird] = useState('');\n  const [inputNameOrHEXFourth, setInputNameOrHEXFourth] = useState('');\n  //1\n  const [input, setInput] = useState('');\n  const [inputSecond, setInputSecond] = useState('');\n  const [inputThird, setInputThird] = useState('');\n  const [inputFourth, setInputFourth] = useState('');\n  //2\n  const [input2, setInput2] = useState('');\n  const [inputSecond2, setInputSecond2] = useState('');\n  const [inputThird2, setInputThird2] = useState('');\n  const [inputFourth2, setInputFourth2] = useState('');\n  //3\n  const [input3, setInput3] = useState('');\n  const [inputSecond3, setInputSecond3] = useState('');\n  const [inputThird3, setInputThird3] = useState('');\n  const [inputFourth3, setInputFourth3] = useState('');\n  //4\n  const [input4, setInput4] = useState('');\n  const [inputSecond4, setInputSecond4] = useState('');\n  const [inputThird4, setInputThird4] = useState('');\n  const [inputFourth4, setInputFourth4] = useState('');\n\n  ///////activ set\n  const [isVisible, setIsVisible] = useState(false);\n  const [isVisibleRights, setIsVisibleRights] = useState(false);\n  const [activMenu, setActivMenu] = useState('flowerSystem');\n  const [rightsActivMenu, setRightsActivMenu] = useState('rightsFlowerSystem');\n\n  //////color menu set\n  const [flowerSystem, setFlowerSystem] = useState('RGB');\n  const [flowerSystemSecond, setFlowerSystemSecond] = useState('HLS');\n  const [flowerSystemThird, setFlowerSystemThird] = useState('CMYK');\n  const [flowerSystemFourth, setFlowerSystemFourth] = useState('HSL');\n  const [rightsFlowerSystem, setRightsFlowerSystem] = useState('RGB');\n  const [rightsFlowerSystemSecond, setRightsFlowerSystemSecond] =\n    useState('HLS');\n  const [rightsFlowerSystemThird, setRightsFlowerSystemThird] =\n    useState('CMYK');\n  const [rightsFlowerSystemFourth, setRightsFlowerSystemFourth] =\n    useState('HSL');\n\n  const activNameOrHEX = ActivInputNameOrHEX(\n    activMenu,\n    inputNameOrHEX,\n    inputNameOrHEXSecond,\n    inputNameOrHEXThird,\n    inputNameOrHEXFourth\n  );\n\n  const activSetNameOrHEX = activSetInputNameOrHEX(\n    activMenu,\n    setInputNameOrHEX,\n    setInputNameOrHEXSecond,\n    setInputNameOrHEXThird,\n    setInputNameOrHEXFourth\n  );\n\n  const activSetInput = activColorInput(\n    activMenu,\n    setColorInput,\n    setColorInputSecond,\n    setColorInputThird,\n    setColorInputFourth\n  );\n\n  const activInputRights = nameActivMenu(\n    rightsActivMenu,\n    rightsFlowerSystem,\n    rightsFlowerSystemSecond,\n    rightsFlowerSystemThird,\n    rightsFlowerSystemFourth\n  );\n\n  const colorInputValue = activColorInputValue(\n    colorInput,\n    colorInputSecond,\n    colorInputThird,\n    colorInputFourth,\n    activMenu\n  );\n\n  const activFlower = activFlowerSystemt(\n    activMenu,\n    flowerSystem,\n    flowerSystemSecond,\n    flowerSystemThird,\n    flowerSystemFourth\n  );\n\n  const activInput = activInputs(activMenu, input, input2, input3, input4);\n  const activInputSecond = activInputsSecond(\n    activMenu,\n    inputSecond,\n    inputSecond2,\n    inputSecond3,\n    inputSecond4\n  );\n\n  const activInputThird = activInputsThird(\n    activMenu,\n    inputThird,\n    inputThird2,\n    inputThird3,\n    inputThird4\n  );\n\n  const activInputFourth = activInputsFourth(\n    activMenu,\n    inputFourth,\n    inputFourth2,\n    inputFourth3,\n    inputFourth4\n  );\n\n  const setInputActiv = activSetInputs(\n    activMenu,\n    setInput,\n    setInput2,\n    setInput3,\n    setInput4\n  );\n\n  const setInputActivSecond = activSetInputsSecond(\n    activMenu,\n    setInputSecond,\n    setInputSecond2,\n    setInputSecond3,\n    setInputSecond4\n  );\n\n  const setInputActivThird = activSetInputsThird(\n    activMenu,\n    setInputThird,\n    setInputThird2,\n    setInputThird3,\n    setInputThird4\n  );\n\n  const setInputActivFourth = activSetInputsFourth(\n    activMenu,\n    setInputFourth,\n    setInputFourth2,\n    setInputFourth3,\n    setInputFourth4\n  );\n\n  useEffect(() => {\n    const colorConverter = saturationToInput(color, saturation, activFlower);\n    if (activFlower === 'HEX' || activFlower === 'Name') {\n      activSetNameOrHEX(colorConverter);\n      return;\n    }\n    console.log(colorConverter);\n    const result = Object.values({ colorConverter }).map(i =>\n      Object.values(i)\n    )[0];\n    if (result.length === 4) {\n      setInputActiv(result[0]);\n      setInputActivSecond(result[1]);\n      setInputActivThird(result[2]);\n      setInputActivFourth(result[3]);\n      return;\n    }\n    if (result.length === 3) {\n      setInputActiv(result[0]);\n      setInputActivSecond(result[1]);\n      setInputActivThird(result[2]);\n    }\n  }, [saturation.s, saturation.h, saturation.v]);\n\n  useEffect(() => {\n    if (colorInputValue !== '') {\n      const colorConverter = columnConvert(\n        activFlower,\n        activInputRights,\n        colorInputValue,\n        color\n      );\n\n      const bg = color.getRGB();\n      bgColor(bg);\n      if (activInputRights === 'HEX' || activInputRights === 'Name') {\n        setRightsInput(colorConverter);\n        return;\n      }\n      const result = Object.values({ colorConverter }).map(i =>\n        Object.values(i)\n      );\n      setRightsInput(result);\n    }\n  }, [activMenu, activFlower, activInputRights, colorInputValue]);\n\n  function targetLi(e) {\n    if (activMenu === 'flowerSystem') {\n      setFlowerSystem(e.target.innerText);\n    }\n    if (activMenu === 'flowerSystemSecond') {\n      setFlowerSystemSecond(e.target.innerText);\n    }\n    if (activMenu === 'flowerSystemThird') {\n      setFlowerSystemThird(e.target.innerText);\n    }\n    if (activMenu === 'flowerSystemFourth') {\n      setFlowerSystemFourth(e.target.innerText);\n    }\n    visibli();\n  }\n\n  function rightsTargetLi(e) {\n    if (rightsActivMenu === 'rightsFlowerSystem') {\n      setRightsFlowerSystem(e.target.innerText);\n    }\n    if (rightsActivMenu === 'rightsFlowerSystemSecond') {\n      setRightsFlowerSystemSecond(e.target.innerText);\n    }\n    if (rightsActivMenu === 'rightsFlowerSystemThird') {\n      setRightsFlowerSystemThird(e.target.innerText);\n    }\n    if (rightsActivMenu === 'rightsFlowerSystemFourth') {\n      setRightsFlowerSystemFourth(e.target.innerText);\n    }\n    rightsVisibli();\n  }\n\n  function visibli() {\n    setIsVisible(!isVisible);\n  }\n\n  function rightsVisibli() {\n    setIsVisibleRights(!isVisibleRights);\n  }\n\n  function activ(event) {\n    if (event.currentTarget.id === 'flowerSystem') {\n      return setActivMenu('flowerSystem');\n    }\n    if (event.currentTarget.id === 'flowerSystemSecond') {\n      return setActivMenu('flowerSystemSecond');\n    }\n    if (event.currentTarget.id === 'flowerSystemThird') {\n      return setActivMenu('flowerSystemThird');\n    }\n    if (event.currentTarget.id === 'flowerSystemFourth') {\n      return setActivMenu('flowerSystemFourth');\n    }\n  }\n\n  function rightsActiv(event) {\n    if (event.currentTarget.id === 'rightsFlowerSystem') {\n      return setRightsActivMenu('rightsFlowerSystem');\n    }\n    if (event.currentTarget.id === 'rightsFlowerSystemSecond') {\n      return setRightsActivMenu('rightsFlowerSystemSecond');\n    }\n    if (event.currentTarget.id === 'rightsFlowerSystemThird') {\n      return setRightsActivMenu('rightsFlowerSystemThird');\n    }\n    if (event.currentTarget.id === 'rightsFlowerSystemFourth') {\n      return setRightsActivMenu('rightsFlowerSystemFourth');\n    }\n  }\n\n  function activListColum() {\n    visibli();\n    activSetInput('');\n    activSetNameOrHEX('');\n    setInputActiv('');\n    setInputActivSecond('');\n    setInputActivThird('');\n    setInputActivFourth('');\n  }\n\n  function rightsActivListColum() {\n    rightsVisibli();\n  }\n\n  function inputToSetValue(\n    activInput,\n    activInputSecond,\n    activInputThird,\n    activInputFourth,\n    activNameOrHEX\n  ) {\n    if (activFlower === 'HEX' || activFlower === 'Name') {\n      activSetInput(activNameOrHEX);\n      return;\n    }\n    activSetInput(\n      `${activInput},${activInputSecond},${activInputThird},${activInputFourth}`\n    );\n  }\n  useEffect(() => {\n    inputToSetValue(\n      activInput,\n      activInputSecond,\n      activInputThird,\n      activInputFourth,\n      activNameOrHEX\n    );\n  }, [\n    activInput,\n    activInputSecond,\n    activInputThird,\n    activInputFourth,\n    activNameOrHEX,\n  ]);\n\n  return (\n    <WrraperOnverter>\n      <div>\n        <BtnPicker id=\"flowerSystem\" onClick={activ}>\n          {flowerSystem}\n        </BtnPicker>\n        <BtnPicker id=\"flowerSystemSecond\" onClick={activ}>\n          {flowerSystemSecond}\n        </BtnPicker>\n        <BtnPicker id=\"flowerSystemThird\" onClick={activ}>\n          {flowerSystemThird}\n        </BtnPicker>\n        <BtnPicker id=\"flowerSystemFourth\" onClick={activ}>\n          {flowerSystemFourth}\n        </BtnPicker>\n        <Btn onClick={activListColum}>p</Btn>\n        <WrraperInput>\n          {isVisible ? (\n            <WrraperListColum>\n              <ListColorMenu target={targetLi} />\n            </WrraperListColum>\n          ) : null}\n          <ColorsInputPicker\n            activFlower={activFlower}\n            activSetNameOrHEX={activSetNameOrHEX}\n            activNameOrHEX={activNameOrHEX}\n            setInput={setInputActiv}\n            setInputSecond={setInputActivSecond}\n            setInputThird={setInputActivThird}\n            setInputFourth={setInputActivFourth}\n            input={activInput}\n            inputSecond={activInputSecond}\n            inputThird={activInputThird}\n            inputFourth={activInputFourth}\n          />\n        </WrraperInput>\n      </div>\n      <WrraperRightsBtnGroup>\n        <BtnPicker id=\"rightsFlowerSystem\" onClick={rightsActiv}>\n          {rightsFlowerSystem}\n        </BtnPicker>\n        <BtnPicker id=\"rightsFlowerSystemSecond\" onClick={rightsActiv}>\n          {rightsFlowerSystemSecond}\n        </BtnPicker>\n        <BtnPicker id=\"rightsFlowerSystemThird\" onClick={rightsActiv}>\n          {rightsFlowerSystemThird}\n        </BtnPicker>\n        <BtnPicker id=\"rightsFlowerSystemFourth\" onClick={rightsActiv}>\n          {rightsFlowerSystemFourth}\n        </BtnPicker>\n        <Btn onClick={rightsActivListColum}>p</Btn>\n        <WrraperInput>\n          {isVisibleRights ? (\n            <WrraperListColum>\n              <ListColorMenu target={rightsTargetLi} />\n            </WrraperListColum>\n          ) : null}\n          <InputColor\n            type=\"text\"\n            name=\"rightsInput\"\n            readOnly\n            value={rightsInput}\n          />\n        </WrraperInput>\n      </WrraperRightsBtnGroup>\n    </WrraperOnverter>\n  );\n};\n\nexport default ConverterColor;\n\n// ) : null}\n// {activMenu === 'flowerSystemSecond' ? (\n//   <ColorsInputPicker\n//     activFlower={activFlower}\n//     colorInputValue={colorInputValue}\n//     setInput={setInputActiv}\n//     setInputSecond={setInputActivSecond}\n//     setInputThird={setInputActivThird}\n//     setInputFourth={setInputActivFourth}\n//     input={activInput}\n//     inputSecond={activInputSecond}\n//     inputThird={activInputThird}\n//     inputFourth={activInputFourth}\n//   />\n// ) : null}\n// {activMenu === 'flowerSystemThird' ? (\n//   <ColorsInputPicker\n//     activFlower={activFlower}\n//     colorInputValue={colorInputValue}\n//     setInput={setInputActiv}\n//     setInputSecond={setInputActivSecond}\n//     setInputThird={setInputActivThird}\n//     setInputFourth={setInputActivFourth}\n//     input={activInput}\n//     inputSecond={activInputSecond}\n//     inputThird={activInputThird}\n//     inputFourth={activInputFourth}\n//   />\n// ) : null}\n// {activMenu === 'flowerSystemFourth' ? (\n//   <ColorsInputPicker\n//     activFlower={activFlower}\n//     colorInputValue={colorInputValue}\n//     setInput={setInputActiv}\n//     setInputSecond={setInputActivSecond}\n//     setInputThird={setInputActivThird}\n//     setInputFourth={setInputActivFourth}\n//     input={activInput}\n//     inputSecond={activInputSecond}\n//     inputThird={activInputThird}\n//     inputFourth={activInputFourth}\n//   />\n// ) : null}\n","export function ActivInputNameOrHEX(activMenu,\n    inputNameOrHEX,\n    inputNameOrHEXSecond,\n    inputNameOrHEXThird,\n    inputNameOrHEXFourth) {\n    let activInput = inputNameOrHEX;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = inputNameOrHEX;\n            break;\n        case 'flowerSystemSecond':\n            activInput = inputNameOrHEXSecond;\n            break;\n        case 'flowerSystemThird':\n            activInput = inputNameOrHEXThird;\n            break;\n        case 'flowerSystemFourth':\n            activInput = inputNameOrHEXFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activSetInputNameOrHEX(activMenu,\n    setInputNameOrHEX,\n    setInputNameOrHEXSecond,\n    setInputNameOrHEXThird,\n    setInputNameOrHEXFourth) {\n    let activInput = setInputNameOrHEX;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = setInputNameOrHEX;\n            break;\n        case 'flowerSystemSecond':\n            activInput = setInputNameOrHEXSecond;\n            break;\n        case 'flowerSystemThird':\n            activInput = setInputNameOrHEXThird;\n            break;\n        case 'flowerSystemFourth':\n            activInput = setInputNameOrHEXFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activColorInput(activMenu,\n    setColorInput,\n    setColorInputSecond,\n    setColorInputThird,\n    setColorInputFourth) {\n    let activColorInput = activMenu;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activColorInput = setColorInput;\n            break;\n        case 'flowerSystemSecond':\n            activColorInput = setColorInputSecond;\n            break;\n        case 'flowerSystemThird':\n            activColorInput = setColorInputThird;\n            break;\n        case 'flowerSystemFourth':\n            activColorInput = setColorInputFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activColorInput\n}\n","export function nameActivMenu(rightsActivMenu,\n    rightsFlowerSystem,\n    rightsFlowerSystemSecond,\n    rightsFlowerSystemThird,\n    rightsFlowerSystemFourth) {\n    let activInputRights = rightsActivMenu;\n    switch (rightsActivMenu) {\n        case 'rightsFlowerSystem':\n            activInputRights = rightsFlowerSystem;\n            break;\n        case 'rightsFlowerSystemSecond':\n            activInputRights = rightsFlowerSystemSecond;\n            break;\n        case 'rightsFlowerSystemThird':\n            activInputRights = rightsFlowerSystemThird;\n            break;\n        case 'rightsFlowerSystemFourth':\n            activInputRights = rightsFlowerSystemFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInputRights\n}","export function activColorInputValue(colorInput,\n    colorInputSecond,\n    colorInputThird,\n    colorInputFourth,\n    activMenu) {\n    let activColorInputValue = activMenu;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activColorInputValue = colorInput;\n            break;\n        case 'flowerSystemSecond':\n            activColorInputValue = colorInputSecond;\n            break;\n        case 'flowerSystemThird':\n            activColorInputValue = colorInputThird;\n            break;\n        case 'flowerSystemFourth':\n            activColorInputValue = colorInputFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activColorInputValue\n}\n","export function activFlowerSystemt(activMenu,\n    flowerSystem,\n    flowerSystemSecond,\n    flowerSystemThird,\n    flowerSystemFourth) {\n    let activFlowerSystemt = activMenu;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activFlowerSystemt = flowerSystem;\n            break;\n        case 'flowerSystemSecond':\n            activFlowerSystemt = flowerSystemSecond;\n            break;\n        case 'flowerSystemThird':\n            activFlowerSystemt = flowerSystemThird;\n            break;\n        case 'flowerSystemFourth':\n            activFlowerSystemt = flowerSystemFourth;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activFlowerSystemt\n}","export function activInputs(activMenu,\n    input, input2, input3, input4) {\n    let activInput = input;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = input;\n            break;\n        case 'flowerSystemSecond':\n            activInput = input2;\n            break;\n        case 'flowerSystemThird':\n            activInput = input3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = input4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activInputsSecond(activMenu,\n    inputSecond, inputSecond2, inputSecond3, inputSecond4) {\n    let activInput = inputSecond;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = inputSecond;\n            break;\n        case 'flowerSystemSecond':\n            activInput = inputSecond2;\n            break;\n        case 'flowerSystemThird':\n            activInput = inputSecond3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = inputSecond4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activInputsThird(activMenu,\n    inputThird, inputThird2, inputThird3, inputThird4) {\n    let activInput = inputThird;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = inputThird;\n            break;\n        case 'flowerSystemSecond':\n            activInput = inputThird2;\n            break;\n        case 'flowerSystemThird':\n            activInput = inputThird3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = inputThird4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activInputsFourth(activMenu,\n    inputFourth, inputFourth2, inputFourth3, inputFourth4) {\n    let activInput = inputFourth;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = inputFourth;\n            break;\n        case 'flowerSystemSecond':\n            activInput = inputFourth2;\n            break;\n        case 'flowerSystemThird':\n            activInput = inputFourth3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = inputFourth4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activSetInputs(activMenu,\n    setInput,\n    setInput2,\n    setInput3,\n    setInput4) {\n    let activInput = setInput;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = setInput;\n            break;\n        case 'flowerSystemSecond':\n            activInput = setInput2;\n            break;\n        case 'flowerSystemThird':\n            activInput = setInput3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = setInput4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activSetInputsSecond(activMenu,\n    setInputSecond,\n    setInputSecond2,\n    setInputSecond3,\n    setInputSecond4) {\n    let activInput = setInputSecond;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = setInputSecond;\n            break;\n        case 'flowerSystemSecond':\n            activInput = setInputSecond2;\n            break;\n        case 'flowerSystemThird':\n            activInput = setInputSecond3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = setInputSecond4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activSetInputsThird(activMenu,\n    setInputThird,\n    setInputThird2,\n    setInputThird3,\n    setInputThird4) {\n    let activInput = setInputThird;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = setInputThird;\n            break;\n        case 'flowerSystemSecond':\n            activInput = setInputThird2;\n            break;\n        case 'flowerSystemThird':\n            activInput = setInputThird3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = setInputThird4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function activSetInputsFourth(activMenu,\n    setInputFourth,\n    setInputFourth2,\n    setInputFourth3,\n    setInputFourth4) {\n    let activInput = setInputFourth;\n    switch (activMenu) {\n        case 'flowerSystem':\n            activInput = setInputFourth;\n            break;\n        case 'flowerSystemSecond':\n            activInput = setInputFourth2;\n            break;\n        case 'flowerSystemThird':\n            activInput = setInputFourth3;\n            break;\n        case 'flowerSystemFourth':\n            activInput = setInputFourth4;\n            break;\n        default:\n            console.log('Invalid name');\n    }\n    return activInput\n}","export function saturationToInput(color, saturation, flowerSystem) {\n    color.setHSV(saturation.h, saturation.s / 100, saturation.v / 100);\n\n    let result = {};\n\n    if (flowerSystem === 'RGB') {\n        result = color.getRGB()\n        return result\n    }\n\n    if (flowerSystem === 'RGBA') {\n        result = color.getRGBA()\n        return result\n    }\n\n    if (flowerSystem === 'HEX') {\n        try {\n            result = color.getHEX()\n            return result\n        } catch (error) {\n            return result\n        }\n    }\n    if (flowerSystem === 'CMYK') {\n        result = color.getCMYK()\n        return result\n    }\n\n    if (flowerSystem === 'Name') {\n        try {\n            result = color.getName()\n            return result\n        } catch (error) {\n            return \"no name\"\n        }\n\n    }\n    if (flowerSystem === 'HSL') {\n        result = color.getHLS()\n        return result\n    }\n\n    if (flowerSystem === 'HSLA') {\n        result = color.getHLSA()\n        return result\n    }\n    if (flowerSystem === 'LCH') {\n        result = color.getLCH()\n        console.log(color.getLCH())\n        return result\n    }\n\n    if (flowerSystem === 'HSIA') {\n        result = color.getHSIA()\n        return result\n    }\n\n    if (flowerSystem === 'HLSA') {\n        result = color.getHLSA()\n        return result\n    }\n\n    if (flowerSystem === 'HSI') {\n        result = color.getHSI()\n        return result\n    }\n\n    if (flowerSystem === 'HLS') {\n        result = color.getHLS()\n        return result\n    }\n\n    if (flowerSystem === 'HSV') {\n        result = color.getHSV()\n        return result\n    }\n\n    if (flowerSystem === 'HSB') {\n        result = color.getHSB()\n        return result\n    }\n    if (flowerSystem === 'Safe') {\n        result = color.getSafe()\n        return result\n    }\n    if (flowerSystem === 'CMY') {\n        result = color.getCMY()\n        return result\n    }\n    if (flowerSystem === 'XYZ') {\n        result = color.getXYZ()\n        return result\n    }\n    if (flowerSystem === 'Yxy') {\n        result = color.getYxy()\n        return result\n    }\n    if (flowerSystem === 'Lab') {\n        result = color.getLab()\n        return result\n    }\n    if (flowerSystem === 'HunterLab') {\n        result = color.getHunterLab()\n        return result\n    }\n    if (flowerSystem === 'Luv') {\n        result = color.getLuv()\n        return result\n    }\n}\n","\nimport { getColor } from \"./getColor\";\n\nexport function columnConvert(flowerSystem, rightsFlowerSystem, inputOne, color) {\n    let result = {}\n\n    if (flowerSystem === 'RGB') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setRGB(colorEl[0],\n                colorEl[1],\n                colorEl[2])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'RGBA') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            color.setRGB(colorEl[0],\n                colorEl[1],\n                colorEl[2])\n            color.setAlpha(colorEl[3])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HEX') {\n        try {\n            color.setHEX(inputOne)\n        } catch (error) {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'CMYK') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            color.setCMYK(colorEl[0],\n                colorEl[1],\n                colorEl[2],\n                colorEl[3])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'Name') {\n        try {\n            color.setName(inputOne.trim())\n        } catch (error) {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSL') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHSL(colorEl[0],\n                colorEl[1],\n                colorEl[2])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSLA') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            color.setHSLA(colorEl[0],\n                colorEl[1],\n                colorEl[2],\n                colorEl[3])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSIA') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            color.setHSIA(colorEl[0],\n                colorEl[1],\n                colorEl[2],\n                colorEl[3])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HLSA') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2] && colorEl[3]) {\n            color.setHLSA(colorEl[0],\n                colorEl[1],\n                colorEl[2],\n                colorEl[3])\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSI') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHSI(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSI') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHSI(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HLS') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHLS(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HLS') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHLS(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSV') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHSV(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HSB') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHSB(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'Safe') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setRGB(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'CMY') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setCMY(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'XYZ') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setXYZ(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'Yxy') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setYxy(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'LCH') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setLCH(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'Lab') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setLab(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'HunterLab') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setHunterLab(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n        return result\n    }\n    if (flowerSystem === 'Luv') {\n        const colorEl = inputOne.split(',');\n        if (colorEl[0] && colorEl[1] && colorEl[2]) {\n            color.setLuv(colorEl[0],\n                colorEl[1],\n                colorEl[2],)\n        } else {\n            return result\n        }\n        result = getColor(color, rightsFlowerSystem)\n\n        return result\n    }\n}","import nameColors from '../util/colorsName.json'\nimport websafe_colors from '../util/websafe_colors.json'\n\n\n\n\nexport default class Converter {\n    static RGBAToRGB(\n        red,\n        green,\n        blue,\n        alpha,\n        bgRed = 255,\n        bgGreen = 255,\n        bgBlue = 255\n    ) {\n        red = ((1 - alpha) * bgRed) + (alpha * red);\n        green = ((1 - alpha) * bgGreen) + (alpha * green);\n        blue = ((1 - alpha) * bgBlue) + (alpha * blue);\n\n        const result = this._roundRGB(red, green, blue);\n\n        return result;\n    }\n\n    // /**\n    //  * Convert the RGB color to a RGBA color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]\n    //  */\n\n    static RGBToRGBA(red, green, blue) {\n        const rgba = {}\n        rgba.red = red;\n        rgba.green = green;\n        rgba.blue = blue;\n        rgba.alpha = 1;\n        return rgba\n    }\n\n    // /**\n    //  * Convert the HEX color to a RGB color.\n    //  *\n    //  * @param string $hex\n    //  *\n    //  * @return int[]\n    //  */\n\n    static HEXToRGB(hex) {\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        const rgb = [\n            parseInt(result[1], 16),\n            parseInt(result[2], 16),\n            parseInt(result[3], 16)]\n        return this._roundRGB(...rgb);\n    }\n\n    // /**\n    //  * Convert the RGB color to a HEX color\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return string\n    //  */\n\n    static RGBToHEX(red, green, blue) {\n        red = Number(red);\n        green = Number(green);\n        blue = Number(blue);\n        return ((1 << 24) + (red << 16) + (green << 8) + blue).toString(16).slice(1);\n    }\n\n    // /**\n    //  * Convert the CMYK color to a RGB color.\n    //  *\n    //  * @param float $cyan\n    //  * @param float $magenta\n    //  * @param float $yellow\n    //  * @param float $key\n    //  *\n    //  * @return int[]\n    //  */\n\n\n    static CMYKToRGB(cyan, magenta, yellow, key) {\n        cyan = cyan / 100\n        magenta = magenta / 100\n        yellow = yellow / 100\n        key = key / 100\n        const red = Math.round(255 * (1 - cyan) * (1 - key))\n        const green = Math.round(255 * (1 - magenta) * (1 - key))\n        const blue = Math.round(255 * (1 - yellow) * (1 - key))\n        return this._roundRGB(red, green, blue);\n    }\n\n    // /**\n    //  * Convert the RGB color to a CMYK color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return float[]\n    //  */\n\n    static RGBToCMYK(red, green, blue) {\n\n        const calcRed = red / 255;\n        const calcGreen = green / 255;\n        const calcBlue = blue / 255;\n\n        const key = 1 - Math.max(calcRed, calcGreen, calcBlue);\n        const cyan = ((1 - calcRed - key) / (1 - key))\n        const magenta = ((1 - calcGreen - key) / (1 - key));\n        const yellow = ((1 - calcBlue - key) / (1 - key));\n\n        const cmyk = {}\n        cmyk.cyan = ((cyan).toFixed(2)) * 100;\n        cmyk.magenta = ((magenta).toFixed(2)) * 100;\n        cmyk.yellow = ((yellow).toFixed(2)) * 100;\n        cmyk.key = ((key).toFixed(2)) * 100;\n        // console.log(cmyk);\n\n\n        return cmyk;\n    }\n\n    // /**\n    //  * Convert the HTML named color to a RGB color.\n    //  *\n    //  * @param string $name\n    //  *\n    //  * @return int[]\n    //  */\n\n\n    static NameToRGB(name) {\n        let color = ''\n        for (let nameColor of nameColors) {\n            if (nameColor.name === name) {\n                color = nameColor.rgb\n            }\n        }\n        if (color === '') {\n            throw new Error('Color name not found!');\n        }\n        const red = color[0];\n        const green = color[1];\n        const blue = color[2];\n\n\n        return this._roundRGB(red, green, blue);\n    }\n\n    // /**\n    //  * Convert the RGB color to a HTML named color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return string\n    //  */\n\n\n    static RGBToName(red, green, blue) {\n        let color = ''\n        for (const nameColor of nameColors) {\n            if (nameColor.rgb[0] === red && nameColor.rgb[1] === green && nameColor.rgb[2] === blue) {\n                color = nameColor.name\n                return color\n            }\n        }\n        throw new Error('Name for color not found!');\n    }\n\n    // /**\n    //  * Convert the HSL color to a RGB color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $saturation\n    //  * @param float $lightness\n    //  *\n    //  * @return int[]\n    //  */\n\n    static HSLToRGB(hue, saturation, lightness) {\n        saturation = saturation / 100;\n        lightness = lightness / 100;\n\n        let c = (1 - Math.abs(2 * lightness - 1)) * saturation,\n            x = c * (1 - Math.abs((hue / 60) % 2 - 1)),\n            m = lightness - c / 2,\n            red = 0,\n            green = 0,\n            blue = 0;\n\n        if (0 <= hue && hue < 60) {\n            red = c; green = x; blue = 0;\n        } else if (60 <= hue && hue < 120) {\n            red = x; green = c; blue = 0;\n        } else if (120 <= hue && hue < 180) {\n            red = 0; green = c; blue = x;\n        } else if (180 <= hue && hue < 240) {\n            red = 0; green = x; blue = c;\n        } else if (240 <= hue && hue < 300) {\n            red = x; green = 0; blue = c;\n        } else if (300 <= hue && hue < 360) {\n            red = c; green = 0; blue = x;\n        }\n        red = Math.abs(((red + m) * 255));\n        green = Math.abs(((green + m) * 255));\n        blue = Math.abs(((blue + m) * 255));\n\n        return this._roundRGB(red, green, blue);;\n    }\n\n    // /**\n    //  * Convert the RGB color to a HSL color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n\n    static RGBToHSL(red, green, blue) {\n        red /= 255;\n        green /= 255;\n        blue /= 255;\n\n        // Find greatest and smallest channel values\n        let cmin = Math.min(red, green, blue),\n            cmax = Math.max(red, green, blue),\n            delta = cmax - cmin,\n            hue = 0,\n            saturation = 0,\n            lightness = 0;\n\n        if (delta === 0)\n            hue = 0;\n        else if (cmax === red)\n            hue = ((green - blue) / delta) % 6;\n\n        else if (cmax === green)\n            hue = (blue - red) / delta + 2;\n\n        else\n            hue = (red - green) / delta + 4;\n\n        hue = Math.round(hue * 60);\n\n        if (hue < 0)\n            hue += 360;\n\n        lightness = (cmax + cmin) / 2;\n\n        saturation = delta === 0 ? 0 : delta / (1 - Math.abs(2 * lightness - 1));\n\n        saturation = +(saturation).toFixed(11);\n        lightness = +(lightness).toFixed(11);\n\n        const hsl = {}\n        hsl.hue = hue;\n        hsl.saturation = saturation.toFixed(2) * 100;\n        hsl.lightness = lightness.toFixed(2) * 100;\n\n        return hsl;\n    }\n\n    // /**\n    //  * Convert the HSLA color to a RGBA color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $saturation\n    //  * @param float $lightness\n    //  * @param float $alpha\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n\n    static HSLAToRGBA(hue, saturation, lightness, alpha) {\n        const rgba = this.HSLToRGB(hue, saturation, lightness);\n        rgba.alpha = alpha\n\n        return rgba;\n    }\n\n    // /**\n    //  * Convert the RGBA color to a HSLA color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * @param float $alpha\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n\n    static RGBAToHSLA(red, green, blue, alpha) {\n        const hsla = this.RGBToHSL(red, green, blue);\n        hsla.alpha = alpha;\n        return hsla;\n    }\n\n    // /**\n    //  * Convert the HSIA color to a RGBA color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $saturation\n    //  * @param float $intensity\n    //  * @param float $alpha\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n\n    static HSIAToRGBA(hue, saturation, intensity, alpha) {\n        const rgba = this.HSIToRGB(hue, saturation, intensity);\n        rgba.alpha = alpha;\n\n        return rgba;\n    }\n\n    // /**\n    //  * Convert the RGBA color to a HSIA color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * @param float $alpha\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n\n    static RGBAToHSIA(red, green, blue, alpha) {\n        const hsia = this.RGBToHSI(red, green, blue);\n        hsia.alpha = alpha;\n\n        return hsia;\n    }\n\n    // /**\n    //  * Convert the HLSA color to a RGBA color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $lightness\n    //  * @param float $saturation\n    //  * @param float $alpha\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n\n    static HLSAToRGBA(hue, lightness, saturation, alpha) {\n        const rgba = this.HLSToRGB(hue, lightness, saturation);\n        rgba.alpha = alpha;\n\n        return rgba;\n    }\n\n    // /**\n    //  * Convert the RGBA color to a HLSA color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * @param float $alpha\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n    static RGBAToHLSA(red, green, blue, alpha) {\n        const hlsa = this.RGBToHLS(red, green, blue);\n        hlsa.alpha = alpha;\n\n        return hlsa;\n    }\n\n    // /**\n    //  * Convert the HSI color to a RGB color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $saturation\n    //  * @param float $intensity\n    //  *\n    //  * @return int[]\n    //  */\n\n\n    static HSIToRGB(hue, saturation, intensity) {\n        return this.HSLToRGB(hue, saturation, intensity);\n    }\n\n    // /**\n    //  * Convert the RGB color to a HSI color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n    static RGBToHSI(red, green, blue) {\n        return this.RGBToHSL(red, green, blue);\n    }\n\n    // /**\n    //  * Convert the HLS color to a RGB color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $lightness\n    //  * @param float $saturation\n    //  *\n    //  * @return int[]\n    //  */\n\n    static HLSToRGB(hue, lightness, saturation) {\n        return this.HSLToRGB(hue, saturation, lightness);\n    }\n\n    // /**\n    //  * Convert the RGB color to a HLS color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n    static RGBToHLS(red, green, blue) {\n        const hsl = this.RGBToHSL(red, green, blue);\n        const hls = {}\n        hls.hue = hsl.hue\n        hls.lightness = hsl.lightness\n        hls.saturation = hsl.saturation\n\n        return hls\n    }\n\n    // /**\n    //  * Convert the HSV color to a RGB color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $saturation\n    //  * @param float $value\n    //  *\n    //  * @return int[]\n    //  */\n\n    static HSVToRGB(hue, saturation, value) {\n        // saturation = saturation / 100\n        // value = value / 100\n        let red = Number;\n        let green = Number;\n        let blue = Number;\n        if (saturation === 0) {\n            red = green = blue = value;\n        } else {\n            if (hue === 360) {\n                hue = 0;\n            } else {\n                hue /= 60;\n            }\n\n            const i = Math.floor(hue);\n            const f = hue - i;\n\n            const p = value * (1.0 - saturation);\n            const q = value * (1.0 - (saturation * f));\n            const t = value * (1.0 - (saturation * (1.0 - f)));\n\n            switch (i) {\n                case 0:\n                    red = value;\n                    green = t;\n                    blue = p;\n                    break;\n                case 1:\n                    red = q;\n                    green = value;\n                    blue = p;\n                    break;\n                case 2:\n                    red = p;\n                    green = value;\n                    blue = t;\n                    break;\n                case 3:\n                    red = p;\n                    green = q;\n                    blue = value;\n                    break;\n                case 4:\n                    red = t;\n                    green = p;\n                    blue = value;\n                    break;\n                default:\n                    red = value;\n                    green = p;\n                    blue = q;\n                    break;\n            }\n        }\n\n        return this._roundRGB(red * 255, green * 255, blue * 255);\n    }\n\n    // /**\n    //  * Convert the RGB color to a HSV color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n    static RGBToHSV(red, green, blue) {\n        const circle = this._prepareRGBToCircle(red, green, blue);\n        const value = circle.max.toFixed(11);\n        let saturation = (circle.max === 0) ? 0 : (circle.d / circle.max);\n        saturation = saturation.toFixed(11);\n        const hsv = {}\n        hsv.hue = circle.hue;\n        hsv.saturation = saturation\n        hsv.value = value\n\n        return hsv\n    }\n\n    // /**\n    //  * Convert the HSB color to a RGB color.\n    //  *\n    //  * @param int $hue\n    //  * @param float $saturation\n    //  * @param float $brightness\n    //  *\n    //  * @return array\n    //  */\n\n\n    static HSBToRGB(hue, saturation, brightness) {\n        return this.HSVToRGB(hue, saturation, brightness);\n    }\n\n    // /**\n    //  * Convert the RGB color to a HSB color.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]|float[]\n    //  */\n    static RGBToHSB(red, green, blue) {\n        return this.RGBToHSV(red, green, blue);\n    }\n\n    // /**\n    //  * Convert the RGB color to a RGB color from the safe color list.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]\n    //  */\n\n    static RGBToSafe(red, green, blue) {\n        const colors = websafe_colors;\n        let nearest = colors.shift();\n        let shortest_distance = this._getRGBDistance(red, green, blue, ...nearest);\n        colors.forEach(color => {\n            let current_distance = this._getRGBDistance(red, green, blue, ...color);\n            if (current_distance < shortest_distance) {\n                shortest_distance = current_distance;\n                nearest = color;\n            }\n        })\n\n        return this._roundRGB(...nearest);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * @return array\n    //  */\n\n    static RGBToCMY(red, green, blue) {\n        const cyan = 1 - (red / 255);\n        const magenta = 1 - (green / 255);\n        const yellow = 1 - (blue / 255);\n        const cmy = {};\n        cmy.cyan = cyan.toFixed(2) * 100;\n        cmy.magenta = magenta.toFixed(2) * 100;\n        cmy.yellow = yellow.toFixed(2) * 100;\n\n        return cmy;\n    }\n\n    // /**\n    //  * @param float $cyan\n    //  * @param float $magenta\n    //  * @param float $yellow\n    //  * @return int[]\n    //  */\n\n\n    static CMYToRGB(cyan, magenta, yellow) {\n        cyan = cyan / 100\n        magenta = magenta / 100\n        yellow = yellow / 100\n        const red = (1 - cyan) * 255;\n        const green = (1 - magenta) * 255;\n        const blue = (1 - yellow) * 255;\n\n        return this._roundRGB(red, green, blue);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * X, Y and Z output refer to a D65/2° standard illuminant.\n    //  * @return array\n    //  */\n\n    static RGBToXYZ(red, green, blue) {\n        const redCulc = this._prepareColorToXYZConversion(red);\n        const greenCulc = this._prepareColorToXYZConversion(green);\n        const blueCulc = this._prepareColorToXYZConversion(blue);\n\n        const X = redCulc * 0.4124 + greenCulc * 0.3576 + blueCulc * 0.1805;\n        const Y = redCulc * 0.2126 + greenCulc * 0.7152 + blueCulc * 0.0722;\n        const Z = redCulc * 0.0193 + greenCulc * 0.1192 + blueCulc * 0.9505;\n\n        const xyz = {};\n        xyz.X = X.toFixed(2);\n        xyz.Y = Y.toFixed(2);\n        xyz.Z = Z.toFixed(2);\n        return xyz;\n    }\n\n    // /**\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $X\n    //  * @param float $Y\n    //  * @param float $Z\n    //  * @return array\n    //  */\n\n    static XYZToRGB(X, Y, Z) {\n        X = Number(X) / 100;\n        Y = Number(Y) / 100;\n        Z = Number(Z) / 100;\n        console.log(X, Y, Z);\n        let red = X * 3.2406 + Y * -1.5372 + Z * -0.4986;\n        let green = X * -0.9689 + Y * 1.8758 + Z * 0.0415;\n        let blue = X * 0.0557 + Y * -0.2040 + Z * 1.0570;\n\n        red = this._prepareColorForXYZToRGBOutput(red);\n        green = this._prepareColorForXYZToRGBOutput(green);\n        blue = this._prepareColorForXYZToRGBOutput(blue);\n        console.log(red, green, blue);\n\n        return this._roundRGB(red, green, blue);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * @return array\n    //  */\n\n\n    static RGBToYxy(red, green, blue) {\n        console.log(this.RGBToXYZ(red, green, blue))\n        const XYZ = this.RGBToXYZ(red, green, blue);\n        const X = Number(XYZ.X);\n        const Y = Number(XYZ.Y);\n        const Z = Number(XYZ.Z);\n        const x = X / (X + Y + Z);\n        const y = Y / (X + Y + Z);\n\n        const yxy = {};\n        yxy.Y = Math.round(Y);\n        yxy.x = x.toFixed(2) * 100;\n        yxy.y = y.toFixed(2) * 100;\n        return yxy;\n    }\n\n    // /**\n    //  * @param float $Y\n    //  * @param float $x\n    //  * @param float $y\n    //  * @return array\n    //  */\n\n    static YxyToRGB(Y, x, y) {\n        x = x / 100\n        y = y / 100\n        const X = x * (Y / y);\n        const Z = (1 - x - y) * (Y / y);\n\n        return this.XYZToRGB(X, Y, Z);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $refX\n    //  * @param float|int $refY\n    //  * @param float $refZ\n    //  * @return array\n    //  */\n\n    static RGBToLab(\n        red,\n        green,\n        blue,\n        refX = 95.047,\n        refY = 100,\n        refZ = 108.883\n    ) {\n        let { X, Y, Z } = this.RGBToXYZ(red, green, blue);\n        X = X / refX;\n        Y = Y / refY;\n        Z = Z / refZ;\n\n        X = X > 0.008856 ? Math.pow(X, 1 / 3) : (7.787 * X) + (16 / 116);\n        Y = Y > 0.008856 ? Math.pow(Y, 1 / 3) : (7.787 * Y) + (16 / 116);\n        Z = Z > 0.008856 ? Math.pow(Z, 1 / 3) : (7.787 * Z) + (16 / 116);\n\n        const L = (116 * Y) - 16;\n        const a = 500 * (X - Y);\n        const b = 200 * (Y - Z);\n\n        const lab = {};\n        lab.L = L;\n        lab.a = a;\n        lab.b = b;\n\n        return lab;\n    }\n\n    // /**\n    //  * @param float $L\n    //  * @param float $a\n    //  * @param float $b\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $refX\n    //  * @param float|int $refY\n    //  * @param float $refZ\n    //  * @return int[]\n    //  */\n\n    static LabToRGB(\n        L,\n        a,\n        b,\n        refX = 95.047,\n        refY = 100,\n        refZ = 108.883\n    ) {\n        let Y = (L + 16) / 116;\n        let X = a / 500 + Y;\n        let Z = Y - b / 200;\n\n        Y = Math.pow(Y, 3) > 0.008856 ? Math.pow(Y, 3) : (Y - 16 / 116) / 7.787;\n        X = Math.pow(X, 3) > 0.008856 ? Math.pow(X, 3) : (X - 16 / 116) / 7.787;\n        Z = Math.pow(Z, 3) > 0.008856 ? Math.pow(Z, 3) : (Z - 16 / 116) / 7.787;\n\n        X = X * refX;\n        Y = Y * refY;\n        Z = Z * refZ;\n\n        return this.XYZToRGB(X, Y, Z);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * @return array\n    //  */\n\n    static RGBToLCH(red, green, blue) {\n        let { L, a, b } = this.RGBToLab(red, green, blue);\n        let H = Math.atan2(b, a);\n        H = H > 0 ? (H / Math.PI) * 180 : 360 - (Math.abs(H) / Math.PI) * 180;\n\n        L = L.toFixed(4);\n        const C = (Math.sqrt((Math.pow(a, 2) + Math.pow(b, 2)))).toFixed(4);\n        H = Math.floor(H % 360);\n        const lch = {};\n        lch.L = Number(L);\n        lch.C = Number(C);\n        lch.H = H;\n\n        return lch;\n    }\n\n    // /**\n    //  * @param float $L\n    //  * @param float $C\n    //  * @param float $H - range = 0 ÷ 360°\n    //  * @return array\n    //  */\n\n    static LCHToRGB(L, C, H) {\n        const radiansH = (Math.PI * H) / 180;\n        const a = Math.cos(radiansH) * C;\n        const b = Math.sin(radiansH) * C;\n\n        return this.LabToRGB(L, a, b);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $refX\n    //  * @param float|int $refY\n    //  * @param float $refZ\n    //  * @return array\n    //  */\n\n    static RGBToHunterLab(\n        red,\n        green,\n        blue,\n        refX = 95.047,\n        refY = 100,\n        refZ = 108.883\n    ) {\n        const { X, Y, Z } = this.RGBToXYZ(red, green, blue);\n        const Ka = (175 / 198.04) * (refY + refX);\n        const Kb = (70 / 218.11) * (refY + refZ);\n\n        const Hunter_L = 100 * Math.sqrt(Y / refY);\n        const Hunter_a = Ka * (((X / refX) - (Y / refY)) / Math.sqrt(Y / refY));\n        const Hunter_b = Kb * (((Y / refY) - (Z / refZ)) / Math.sqrt(Y / refY));\n\n        const hunterLab = {};\n        hunterLab.Hunter_L = Hunter_L;\n        hunterLab.Hunter_a = Hunter_a;\n        hunterLab.Hunter_b = Hunter_b;\n\n        return hunterLab;\n    }\n\n    // /**\n    //  * @param float $Hunter_L\n    //  * @param float $Hunter_a\n    //  * @param float $Hunter_b\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $refX\n    //  * @param float|int $refY\n    //  * @param float $refZ\n    //  * @return array\n    //  */\n\n    static HunterLabToRGB(\n        Hunter_L,\n        Hunter_a,\n        Hunter_b,\n        refX = 95.047,\n        refY = 100,\n        refZ = 108.883\n    ) {\n        const Ka = (175.0 / 198.04) * (refY + refX);\n        const Kb = (70.0 / 218.11) * (refY + refZ);\n\n        const Y = Math.pow((Hunter_L / refY), 2) * 100;\n        const X = (Hunter_a / Ka * Math.sqrt(Y / refY) + (Y / refY)) * refX;\n        const Z = - (Hunter_b / Kb * Math.sqrt(Y / refY) - (Y / refY)) * refZ;\n\n        return this.XYZToRGB(X, Y, Z);\n    }\n\n    // /**\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $refX\n    //  * @param float|int $refY\n    //  * @param float $refZ\n    //  * @return array\n    //  */\n\n    static RGBToLuv(\n        red,\n        green,\n        blue,\n        refX = 95.047,\n        refY = 100,\n        refZ = 108.883\n    ) {\n        let { X, Y, Z } = this.RGBToXYZ(red, green, blue);\n\n        const U = (4 * X) / (X + (15 * Y) + (3 * Z));\n        const V = (9 * Y) / (X + (15 * Y) + (3 * Z));\n        Y /= 100;\n        Y = Y > 0.008856 ? Math.pow(Y, 1 / 3) : (7.787 * Y) + (16 / 116);\n\n        const refU = (4 * refX) / (refX + (15 * refY) + (3 * refZ));\n        const refV = (9 * refY) / (refX + (15 * refY) + (3 * refZ));\n\n        const L = (116 * Y) - 16;\n        const u = 13 * L * (U - refU);\n        const v = 13 * L * (V - refV);\n\n        const luv = {};\n        luv.L = L;\n        luv.u = u;\n        luv.v = v;\n\n        return luv;\n    }\n\n    // /**\n    //  * @param float $L\n    //  * @param float $u\n    //  * @param float $v\n    //  * X, Y and Z input refer to a D65/2° standard illuminant.\n    //  * @param float $refX\n    //  * @param float|int $refY\n    //  * @param float $refZ\n    //  * @return int[]\n    //  */\n\n    static LuvToRGB(\n        L,\n        u,\n        v,\n        refX = 95.047,\n        refY = 100,\n        refZ = 108.883\n    ) {\n        let Y = (L + 16) / 116;\n        Y = Math.pow(Y, 3) > 0.008856 ? Math.pow(Y, 3) : ((Y - 16 / 116) / 7.787);\n\n        const refU = (4 * refX) / (refX + (15 * refY) + (3 * refZ));\n        const refV = (9 * refY) / (refX + (15 * refY) + (3 * refZ));\n\n        const U = u / (13 * L) + refU;\n        const V = v / (13 * L) + refV;\n\n        Y *= 100;\n        const X = - (9 * Y * U) / ((U - 4) * V - U * V);\n        const Z = (9 * Y - (15 * V * Y) - (V * X)) / (3 * V);\n\n        return this.XYZToRGB(X, Y, Z);\n    }\n\n    // /**\n    //  * @param $color\n    //  * @return float\n    //  */\n\n    static _prepareColorForXYZToRGBOutput(color) {\n        const colors = (color > 0.0031308) ? (1.055 * Math.pow(color, (1 / 2.4)) - 0.055) : (12.92 * color);\n\n        return colors * 255;\n    }\n\n    // /**\n    //  * @param int $color\n    //  * @return float\n    //  */\n\n    static _prepareColorToXYZConversion(color) {\n        let colorCulc = color / 255;\n        colorCulc = colorCulc > 0.04045 ? Math.pow(((colorCulc + 0.055) / 1.055), 2.4) : colorCulc / 12.92;\n        colorCulc *= 100;\n\n        return colorCulc;\n    }\n\n    // /**\n    //  * Rounds the RGB colors to integers.\n    //  *\n    //  * @param int|float $red\n    //  * @param int|float $green\n    //  * @param int|float $blue\n    //  *\n    //  * @return int[]\n    //  */\n\n    static _roundRGB(red, green, blue) {\n        red = Math.round(red);\n        green = Math.round(green);\n        blue = Math.round(blue);\n        const rgb = {};\n        rgb.red = red;\n        rgb.green = green;\n        rgb.blue = blue;\n\n        return rgb\n    }\n\n    // /**\n    //  * Prepares RGB to HLS/HSB conversion.\n    //  *\n    //  * @param int $red\n    //  * @param int $green\n    //  * @param int $blue\n    //  *\n    //  * @return int[]|float[]\n    //  */\n\n    static _prepareRGBToCircle(red, green, blue) {\n        red /= 255;\n        green /= 255;\n        blue /= 255;\n\n        const max = Math.max(red, green, blue);\n        const min = Math.min(red, green, blue);\n        const d = max - min;\n        let hue = d\n\n        if (d !== 0) {\n            if (max === red) {\n                hue = ((green - blue) / d) % 6;\n            } else if (max === green) {\n                hue = 2 + (blue - red) / d;\n            } else {\n                hue = 4 + (red - green) / d;\n            }\n            hue = Math.round(hue * 60);\n            if (hue < 0) {\n                hue = 360 + hue;\n            }\n        } else {\n            hue = 0;\n        }\n\n        const result = {};\n        result.min = min;\n        result.max = max;\n        result.d = d;\n        result.hue = hue;\n\n        return result;\n    }\n\n    // /**\n    //  * Prepare Hue value to RGB conversion.\n    //  *\n    //  * @param $v1\n    //  * @param $v2\n    //  * @param $vH\n    //  *\n    //  * @return float\n    //  */\n\n    static _HueToRGB(v1, v2, vH) {\n        if (vH < 0) {\n            ++vH;\n        }\n\n        if (vH > 1) {\n            --vH;\n        }\n\n        if ((6 * vH) < 1) {\n            return (v1 + (v2 - v1) * 6 * vH);\n        }\n\n        if ((2 * vH) < 1) {\n            return v2;\n        }\n\n        if ((3 * vH) < 2) {\n            return (v1 + (v2 - v1) * ((2.0 / 3) - vH) * 6);\n        }\n\n        return v1;\n    }\n\n    // /**\n    //  * Return distance between two RGB colors.\n    //  *\n    //  * @param int $r0\n    //  * @param int $g0\n    //  * @param int $b0\n    //  * @param int $r1\n    //  * @param int $g1\n    //  * @param int $b1\n    //  *\n    //  * @return int\n    //  */\n\n    static _getRGBDistance(r1, g1, b1, r0, g0, b0,) {\n        const diff = Math.abs(r0 - r1);\n        const diff1 = diff + Math.abs(g0 - g1);\n        const diff2 = diff1 + Math.abs(b0 - b1);\n\n        return diff2;\n    }\n}\n","import Converter from './converter.js'\n\nexport default class Color {\n    constructor() {\n        this.red = 255;\n        this.green = 255;\n        this.blue = 255;\n        this.alpha = 1;\n        this.bgRed = 255;\n        this.bgGreen = 255;\n        this.bgBlue = 255;\n    }\n\n    setRGB(red, green, blue) {\n        this.red = red;\n        this.green = green;\n        this.blue = blue;\n\n        this.resetAlpha();\n\n        return this._checkColor();\n    }\n\n    getRGB(val = '') {\n        let rgb = {};\n        if (this.alpha !== 1.0) {\n            rgb = Converter.RGBAToRGB(\n                this.red,\n                this.green,\n                this.blue,\n                this.alpha,\n                this.bgRed,\n                this.bgGreen,\n                this.bgBlue\n            );\n        } else {\n            rgb = this._compactColor(this.red, this.green, this.blue);\n        }\n\n        return this.getRGBValue(rgb, val);\n    }\n\n    setAlpha(alpha) {\n        this.alpha = alpha;\n\n        return this._checkAlpha();\n    }\n\n    getAlpha() {\n        return this.alpha;\n    }\n\n    setBgRGB(red, green, blue) {\n        this.bgRed = red;\n        this.bgGreen = green;\n        this.bgBlue = blue;\n\n        return this._checkBgColor();\n    }\n\n    getBgRGB(val = '') {\n        const rgb = this._compactColor(this.bgRed, this.bgGreen, this.bgBlue);\n\n        return this.getRGBValue(rgb, val);\n    }\n\n    getRGBValue(rgb, val = '') {\n        switch (val) {\n            case 'r':\n            case 'red':\n                return rgb = rgb['red'];\n            case 'g':\n            case 'green':\n                return rgb = rgb['green'];\n            case 'b':\n            case 'blue':\n                return rgb = rgb['blue'];\n            default:\n                return rgb;\n        }\n    }\n\n    setRGBA(\n        red,\n        green,\n        blue,\n        alpha,\n        bgRed = 255,\n        bgGreen = 255,\n        bgBlue = 255\n    ) {\n        this.setRGB(red, green, blue)\n            .setAlpha(alpha)\n            .setBgRGB(bgRed, bgGreen, bgBlue);\n\n        return this;\n    }\n\n    getRGBA() {\n        return this._compactColor(this.red, this.green, this.blue, this.alpha);\n    }\n\n    setHEX(hex) {\n        hex = hex.toLowerCase().trim();\n        switch (hex.length) {\n            case 1:\n                hex = hex + hex + hex + hex + hex + hex;\n                break;\n            case 2:\n                hex = hex[0] + hex[1] + hex[0] + hex[1] + hex[0] + hex[1];\n                break;\n            case 3:\n                hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n                break;\n            case 6:\n                break;\n            default:\n                throw new Error('Invalid HEX length!');\n        }\n        const rgb = Converter.HEXToRGB(hex);\n\n        this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n\n        return this;\n    }\n\n    getHEX() {\n        const rgb = this.getRGB();\n        return Converter.RGBToHEX(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setCMYK(cyan, magenta, yellow, key) {\n        const rgb = Converter.CMYKToRGB(cyan, magenta, yellow, key);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getCMYK() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToCMYK(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setCMY(cyan, magenta, yellow) {\n        const rgb = Converter.CMYToRGB(cyan, magenta, yellow);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n\n    }\n\n    getCMY() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToCMY(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setHLSA(hue, lightness, saturation, alpha) {\n        const rgba = Converter.HLSAToRGBA(hue, lightness, saturation, alpha);\n\n        return this.setRGBA(rgba['red'], rgba['green'], rgba['blue'], rgba['alpha']);\n    }\n\n    getHLSA() {\n        const rgb = this.getRGBA();\n\n        return Converter.RGBAToHLSA(rgb['red'], rgb['green'], rgb['blue'], rgb['alpha']);\n    }\n\n    setHLS(hue, lightness, saturation) {\n        const rgb = Converter.HLSToRGB(hue, lightness, saturation);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getHLS() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToHLS(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setHSB(hue, saturation, brightness) {\n        const rgb = Converter.HSBToRGB(hue, saturation, brightness);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getHSB() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToHSB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setName(name) {\n        const rgb = Converter.NameToRGB(name);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getName() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToName(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setHSL(hue, saturation, lightness) {\n        const rgb = Converter.HSLToRGB(hue, saturation, lightness);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getHSL() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToHSL(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setHSI(hue, saturation, intensity) {\n        return this.setHSL(hue, saturation, intensity);\n    }\n\n    getHSI() {\n        return this.getHSL();\n    }\n\n    setHSLA(hue, saturation, lightness, alpha) {\n        const rgb = Converter.HSLToRGB(hue, saturation, lightness);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']).setAlpha(alpha);\n    }\n\n    getHSLA() {\n        const rgba = this.getRGBA();\n\n        return Converter.RGBAToHSLA(rgba['red'], rgba['green'], rgba['blue'], rgba['alpha']);\n    }\n\n    setHSIA(hue, saturation, lightness, alpha) {\n        const rgb = Converter.HSIToRGB(hue, saturation, lightness);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']).setAlpha(alpha);\n    }\n\n    getHSIA() {\n        const rgba = this.getRGBA();\n\n        return Converter.RGBAToHSIA(rgba['red'], rgba['green'], rgba['blue'], rgba['alpha']);\n    }\n\n    setSafe() {\n        const rgb = this.getSafe();\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getSafe() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToSafe(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setXYZ(X, Y, Z) {\n        const rgb = Converter.XYZToRGB(X, Y, Z);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getXYZ() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToXYZ(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setLab(L, a, b) {\n        const rgb = Converter.LabToRGB(L, a, b);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getLab() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToLab(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setLCH(L, C, H) {\n        const rgb = Converter.LCHToRGB(L, C, H);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getLCH() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToLCH(rgb['red'], rgb['green'], rgb['blue']);\n    }\n    setYxy(Y, x, y) {\n        const rgb = Converter.YxyToRGB(Y, x, y);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getYxy() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToYxy(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setHunterLab(L, a, b) {\n        const rgb = Converter.HunterLabToRGB(L, a, b);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getHunterLab() {\n        const rgb = this.getRGB()\n\n        return Converter.RGBToHunterLab(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setHSV(H, S, V) {\n        const rgb = Converter.HSVToRGB(H, S, V);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getHSV() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToHSV(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setLuv(L, u, v) {\n        const rgb = Converter.LuvToRGB(L, u, v);\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getLuv() {\n        const rgb = this.getRGB();\n\n        return Converter.RGBToLuv(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    setRandom() {\n        const rgb = this.getRandom();\n\n        return this.setRGB(rgb['red'], rgb['green'], rgb['blue']);\n    }\n\n    getRandom() {\n        return this._compactColor(Math.floor(Math.random() * 255), Math.floor(Math.random() * 255), Math.floor(Math.random() * 255));\n    }\n\n    resetAlpha() {\n        return this.setAlpha(1.0).setBgRGB(255, 255, 255);\n    }\n\n    _checkColor() {\n        if (!this._isRGBValid(this.red, this.green, this.blue)) {\n            throw new Error('Invalid background color value!');\n        }\n\n        return this;\n    }\n\n    _checkAlpha() {\n        if (this.alpha < 0 || this.alpha > 1) {\n            throw new Error('Invalid alpha value!');\n        }\n\n        return this;\n    }\n\n    _checkBgColor() {\n        if (!this._isRGBValid(this.bgRed, this.bgGreen, this.bgBlue)) {\n            throw new Error('Invalid background color value!');\n        }\n\n        return this;\n    }\n\n    _isRGBValid(red, green, blue) {\n        return red >= 0 && red <= 255\n            && green >= 0 && green <= 255\n            && blue >= 0 && blue <= 255;\n    }\n\n    _compactColor(red, green, blue, alpha = null) {\n        const result = {}\n        result.red = red;\n        result.green = green;\n        result.blue = blue;\n\n        if (alpha === null) {\n            return result;\n        }\n        result.alpha = alpha;\n        return result;\n    }\n\n}\n\n\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect } from 'react';\nimport Hue from '@uiw/react-color-hue';\nimport Saturation from '@uiw/react-color-saturation';\nimport { Section } from 'components/ui/Section/Section';\nimport {\n  ColorDisplay,\n  WrappeSaturation,\n  WrapperColorPicker,\n  WrapperColorPickerSection,\n  WrapperHue,\n} from './colorPicker.styled';\nimport ConverterColor from 'components/Converter/ConverterColor';\nimport Color from 'js/color';\n\nconst ColorPicker = () => {\n  const [hsva, setHsva] = useState({ h: 25, s: 25, v: 25, a: 1 });\n  const [bgRGB, setBgRGB] = useState('');\n  const color = new Color();\n\n  function colorClass() {\n    color.setHSV(hsva.h, hsva.s / 100, hsva.v / 100);\n    const result = color.getRGB();\n    color.setBgRGB(result.red, result.green, result.blue);\n    const bgOb = color.getBgRGB();\n    const bgString = `rgb(${bgOb.red}, ${bgOb.green}, ${bgOb.blue})`;\n    setBgRGB(bgString);\n  }\n  function bgColorInInput(bgColor) {\n    const bgString = `rgb(${bgColor.red}, ${bgColor.green}, ${bgColor.blue})`;\n    setBgRGB(bgString);\n  }\n\n  useEffect(() => {\n    colorClass();\n  }, [hsva]);\n\n  return (\n    <Section>\n      <WrapperColorPickerSection>\n        <WrapperColorPicker>\n          <ColorDisplay style={{ backgroundColor: bgRGB }} />\n          <WrapperHue>\n            <Hue\n              hue={hsva.h}\n              direction=\"vertical\"\n              width={18}\n              height={225}\n              onChange={newHue => {\n                setHsva({ ...hsva, ...newHue });\n              }}\n            />\n          </WrapperHue>\n          <WrappeSaturation>\n            <Saturation\n              style={{ width: '582px', height: '225px' }}\n              hsva={hsva}\n              onChange={newColor => {\n                setHsva({ ...hsva, ...newColor, a: hsva.a });\n              }}\n            />\n          </WrappeSaturation>\n        </WrapperColorPicker>\n        <ConverterColor\n          color={color}\n          bgColor={bgColorInInput}\n          saturation={hsva}\n        />\n      </WrapperColorPickerSection>\n    </Section>\n  );\n};\n\nexport default ColorPicker;\n","import styled from 'styled-components';\n\n\nexport const MainTeg = styled.main``\n","import styled from 'styled-components';\n\n\nexport const TextStart = styled.p``\n\nexport const WraperTextStart = styled.div`\n\ndisplay:flex;\njustify-content: space-between;\nalign-items:center;\n`","import { Section } from 'components/ui/Section/Section';\nimport { TextStart, WraperTextStart } from './DescriptionText.styled';\n\nconst TextDescription = () => {\n  return (\n    <Section>\n      <WraperTextStart>\n        <TextStart>\n          С помощью универсального конвертер цветов вы можете легко перевести\n          цвет из одной цветовой модели в ряд других.\n          <br />\n          В первую очередь, калькулятор служит для удобной работы с современными\n          форматами CSS3-цветов.\n          <br />\n          Поддерживается конвертация из HEX в RGB/RGBA и HSL/HSLA, RGB в CMYK,\n          XYZ, LAB, и обратно.\n          <br />А также специальный функционал для замещения альфа-канала при\n          переводе цвета из RGBA в RGB (и HSLA в HSL).\n        </TextStart>\n      </WraperTextStart>\n    </Section>\n  );\n};\n\nexport default TextDescription;\n","import ColorPicker from 'components/colorPicker/colorPicker';\nimport { MainTeg } from './Main.styled';\nimport TextDescription from 'components/DescriptionText/DescriptionText';\n\nconst Main = () => {\n  return (\n    <MainTeg>\n      <TextDescription />\n      <ColorPicker />\n    </MainTeg>\n  );\n};\n\nexport default Main;\n","import { Wraper } from './Home.styled';\nimport Main from 'main/Main';\n\nconst Home = () => {\n  return (\n    <Wraper>\n      <Main />\n    </Wraper>\n  );\n};\n\nexport default Home;\n"],"names":["Wraper","styled","Sections","Section","children","WrapperColorPickerSection","WrapperColorPicker","WrapperHue","ColorDisplay","WrappeSaturation","ListNameColor","ItemtColorMenu","target","colorPalette","palette","onClick","WrraperListColum","BtnPicker","Btn","InputColor","WrraperOnverter","WrraperInput","WrraperRightsBtnGroup","WrapperInput","WrapperNameColor","Input","InputHexOrName","Tekst","ColorsInputPicker","activFlower","activSetNameOrHEX","activNameOrHEX","setInput","setInputSecond","setInputThird","setInputFourth","input","inputSecond","inputThird","inputFourth","useState","nameOrHex","setNameOrHex","namePallete","split","useEffect","onChange","event","value","replace","readOnly","getColor","color","options","result","getRGB","getRGBA","getHEX","getCMYK","getName","getHSL","getHSLA","getHSIA","getHLSA","getHSI","getHLS","getHSV","getHSB","getSafe","getCMY","getXYZ","getYxy","getLab","getLCH","getHunterLab","getLuv","bgColor","saturation","colorInput","setColorInput","colorInputSecond","setColorInputSecond","colorInputThird","setColorInputThird","colorInputFourth","setColorInputFourth","rightsInput","setRightsInput","inputNameOrHEX","setInputNameOrHEX","inputNameOrHEXSecond","setInputNameOrHEXSecond","inputNameOrHEXThird","setInputNameOrHEXThird","inputNameOrHEXFourth","setInputNameOrHEXFourth","input2","setInput2","inputSecond2","setInputSecond2","inputThird2","setInputThird2","inputFourth2","setInputFourth2","input3","setInput3","inputSecond3","setInputSecond3","inputThird3","setInputThird3","inputFourth3","setInputFourth3","input4","setInput4","inputSecond4","setInputSecond4","inputThird4","setInputThird4","inputFourth4","setInputFourth4","isVisible","setIsVisible","isVisibleRights","setIsVisibleRights","activMenu","setActivMenu","rightsActivMenu","setRightsActivMenu","flowerSystem","setFlowerSystem","flowerSystemSecond","setFlowerSystemSecond","flowerSystemThird","setFlowerSystemThird","flowerSystemFourth","setFlowerSystemFourth","rightsFlowerSystem","setRightsFlowerSystem","rightsFlowerSystemSecond","setRightsFlowerSystemSecond","rightsFlowerSystemThird","setRightsFlowerSystemThird","rightsFlowerSystemFourth","setRightsFlowerSystemFourth","activInput","console","log","ActivInputNameOrHEX","activSetInputNameOrHEX","activSetInput","activColorInput","activInputRights","nameActivMenu","colorInputValue","activColorInputValue","activFlowerSystemt","activInputs","activInputSecond","activInputsSecond","activInputThird","activInputsThird","activInputFourth","activInputsFourth","setInputActiv","activSetInputs","setInputActivSecond","activSetInputsSecond","setInputActivThird","activSetInputsThird","setInputActivFourth","activSetInputsFourth","visibli","rightsVisibli","activ","currentTarget","id","rightsActiv","colorConverter","setHSV","h","s","v","error","saturationToInput","Object","values","map","i","length","inputOne","colorEl","setRGB","setAlpha","setHEX","setCMYK","setName","trim","setHSL","setHSLA","setHSIA","setHLSA","setHSI","setHLS","setHSB","setCMY","setXYZ","setYxy","setLCH","setLab","setHunterLab","setLuv","columnConvert","bg","inputToSetValue","e","innerText","type","name","Converter","red","green","blue","alpha","bgRed","bgGreen","bgBlue","this","_roundRGB","rgba","hex","exec","rgb","parseInt","Number","toString","slice","cyan","magenta","yellow","key","Math","round","calcRed","calcGreen","calcBlue","max","cmyk","toFixed","nameColors","nameColor","Error","hue","lightness","c","abs","x","m","cmin","min","cmax","delta","hsl","HSLToRGB","hsla","RGBToHSL","intensity","HSIToRGB","hsia","RGBToHSI","HLSToRGB","hlsa","RGBToHLS","hls","floor","f","p","q","t","circle","_prepareRGBToCircle","d","hsv","brightness","HSVToRGB","RGBToHSV","colors","websafe_colors","nearest","shift","shortest_distance","_getRGBDistance","forEach","current_distance","cmy","redCulc","_prepareColorToXYZConversion","greenCulc","blueCulc","X","Y","Z","xyz","_prepareColorForXYZToRGBOutput","RGBToXYZ","XYZ","y","yxy","XYZToRGB","refX","refY","refZ","pow","L","a","b","lab","RGBToLab","H","atan2","PI","C","sqrt","lch","radiansH","cos","sin","LabToRGB","Ka","Kb","Hunter_L","Hunter_a","Hunter_b","hunterLab","U","V","refU","refV","u","luv","colorCulc","v1","v2","vH","r1","g1","b1","r0","g0","b0","Color","resetAlpha","_checkColor","val","RGBAToRGB","_compactColor","getRGBValue","_checkAlpha","_checkBgColor","setBgRGB","toLowerCase","HEXToRGB","RGBToHEX","CMYKToRGB","RGBToCMYK","CMYToRGB","RGBToCMY","HLSAToRGBA","setRGBA","RGBAToHLSA","HSBToRGB","RGBToHSB","NameToRGB","RGBToName","RGBAToHSLA","RGBAToHSIA","RGBToSafe","LCHToRGB","RGBToLCH","YxyToRGB","RGBToYxy","HunterLabToRGB","RGBToHunterLab","S","LuvToRGB","RGBToLuv","getRandom","random","_isRGBValid","hsva","setHsva","bgRGB","bgOb","getBgRGB","bgString","colorClass","style","backgroundColor","direction","width","height","newHue","newColor","MainTeg","TextStart","WraperTextStart"],"sourceRoot":""}